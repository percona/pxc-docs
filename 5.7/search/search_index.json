{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Percona XtraDB Cluster 5.7 Documentation","text":"<p>Percona XtraDB Cluster is a database cluster solution for MySQL. It ensures high availability, prevents downtime and data loss, and provides linear scalability for a growing environment.</p> <p>This documentation is for the latest release: Percona XtraDB Cluster 5.7.44-31.65.3 (Release Notes).</p> <p>Features of Percona XtraDB Cluster include:</p> <p>Synchronous replication &lt;Database replication&gt;</p> <p>Data is written to all nodes simultaneously or not written at all if it fails even on a single node.</p> <p>Multi-source replication</p> <p>Any node can trigger a data update.</p> <p>True parallel replication &lt;Database replication&gt;</p> <p>Multiple threads on slave performing replication on row level.</p> <p>Automatic node provisioning**</p> <p>Add a node and that node automatically syncs.</p> <p>Data consistency</p> <p>Percona XtraDB Cluster ensures that data is automatically synchronized on all <code>nodes &lt;Node&gt;</code> in your cluster.</p> <p>PXC Strict Mode</p> <p>Avoids the use of experimental and unsupported features.</p> <p>Configuration script for ProxySQL</p> <p>Percona provides a ProxySQL package with the <code>proxysql-admin</code> tool that automatically configures Percona XtraDB Cluster nodes.</p> <p>See also</p> <p>Load balancing with ProxySQL </p> <p>Automatic configuration of SSL encryption</p> <p>Percona XtraDB Cluster includes the <code>pxc-encrypt-cluster-traffic</code> variable that enables automatic configuration of SSL encryption.</p> <p>Optimized Performance</p> <p>Percona XtraDB Cluster performance is optimized to scale with a growing production workload.</p> <p>For more information, see the following blog posts:</p> <ul> <li> <p>How We Made Percona XtraDB Cluster Scale</p> </li> <li> <p>Performance improvements in Percona XtraDB Cluster 5.7.17-29.20</p> </li> </ul> <p>Percona XtraDB Cluster is fully compatible with MySQL Server Community Edition, Percona Server.</p>"},{"location":"index.html#mysql-57-post-eol-support-from-percona","title":"MySQL 5.7 Post-EOL Support from Percona","text":"<p>Leverage MySQL 5.7 Post-EOL Support from Percona to ensure continued security and performance for your MySQL applications. While this service provides critical bug fixes and security patches, consider migrating to the next major version to unlock a wider range of benefits:</p> <ul> <li> <p>Enhanced performance and scalability: Gain access to performance improvements and handle growing data volumes.</p> </li> <li> <p>Improved security features: Benefit from the latest security advancements to effectively safeguard your data.</p> </li> <li> <p>Access to the latest features and functionality: Use the newest features and functionalities to improve your database management experience.</p> </li> </ul>"},{"location":"index.html#releases","title":"Releases","text":"<ul> <li>Percona XtraDB Cluster 5.7.44-31.65.2</li> </ul>"},{"location":"index.html#installation-links","title":"Installation links","text":"<ul> <li> <p>Install MySQL 5.7 Post-EOL Support from Percona releases</p> </li> <li> <p>Download MySQL 5.7 Post-EOL Support from Percona releases from binary tarballs</p> </li> </ul>"},{"location":"index.html#for-monitoring-and-management","title":"For Monitoring and Management","text":"<p>Percona Monitoring and Management (PMM )monitors and provides actionable performance data for MySQL variants, including Percona Server for MySQL, Percona XtraDB Cluster, Oracle MySQL Community Edition, Oracle MySQL Enterprise Edition, and MariaDB. PMM captures metrics and data for the InnoDB, XtraDB, and MyRocks storage engines and has specialized dashboards for specific engine details.</p> <p>Install PMM and connect your server instances to it.</p>"},{"location":"add-node.html","title":"Adding Nodes to Cluster","text":"<p>New <code>nodes &lt;Node&gt;</code> that are properly configured are provisioned automatically. When you start a node with the address of at least one other running <code>node</code> in the <code>wsrep_cluster_address</code> variable, it automatically joins the cluster and synchronizes with it.</p> <p>Note</p> <p>Any existing data and configuration will be overwritten to match the data and configuration of the DONOR node. Do not join several nodes at the same time to avoid overhead due to large amounts of traffic when a new node joins. </p> <p>By default, Percona XtraDB Cluster uses Percona XtraBackup for State Snapshot Transfer (SST). This requires the following:</p> <ul> <li>Set the <code>wsrep_sst_method</code> variable to <code>xtrabackup-v2</code> and provide SST user credentials with the <code>wsrep_sst_auth</code> variable.</li> </ul> <p>For more information, see Configuring Nodes for Write-Set Replication.</p> <ul> <li>Create a user for SST on the initial node.</li> </ul> <p>For more information, see Bootstrapping the First Node.</p>"},{"location":"add-node.html#starting-the-second-node","title":"Starting the Second Node","text":"<p>Start the second node by using either of the following commands:</p> <pre><code>[root@pxc2 ~]# /etc/init.d/mysql start\n</code></pre> <p>or</p> <pre><code>[root@pxc2 ~]# systemctl start mysql\n</code></pre> <p>After the server starts, it should receive SST automatically.</p> <p>To check the status of the second node, run the following:</p> <pre><code>mysql@pxc2&gt; show status like 'wsrep%';\n</code></pre> <p>The output shows that the new node has been successfully added to the cluster. Cluster size is now 2 nodes, it is the primary component, and it is fully connected and ready to receive write-set replication.</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n| ...                        | ...                                  |\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n| ...                        | ...                                  |\n| wsrep_cluster_size         | 2                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n| ...                        | ...                                  |\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> <p>If the state of the second node is <code>Synced</code> as in the previous example, then the node received full SST, is synchronized with the cluster, and you can proceed to add the next node.</p> <p>Note</p> <p>If the state of the node is <code>Joiner</code>, it means that SST hasn\u2019t finished. Do not add new nodes until all others are in <code>Synced</code> state. </p>"},{"location":"add-node.html#starting-the-third-node","title":"Starting the Third Node","text":"<p>To add the third node, start the node using either command:</p> <pre><code>[root@pxc3 ~]# /etc/init.d/mysql start\n</code></pre> <p>or</p> <pre><code>[root@pxc3 ~]# systemctl start mysql\n</code></pre> <p>To check the status of the third node, run the following:</p> <pre><code>mysql@pxc3&gt; show status like 'wsrep%';\n</code></pre> <p>The output shows that the new node has been successfully added to the cluster. Cluster size is now 3 nodes, it is the primary component, and it is fully connected and ready to receive write-set replication.</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n| ...                        | ...                                  |\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n| ...                        | ...                                  |\n| wsrep_cluster_size         | 3                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n| ...                        | ...                                  |\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre>"},{"location":"add-node.html#next-steps","title":"Next Steps","text":"<p>When you add all nodes to the cluster, you can verify replication by running queries and manipulating data on nodes to see if these changes are synchronized accross the cluster.</p>"},{"location":"bootstrap.html","title":"Bootstrapping the First Node","text":"<p>After you configure all PXC nodes, initialize the cluster by bootstrapping the first node.  The initial node must contain all the data that you want to be replicated to other nodes.</p> <p>Bootstrapping implies starting the first node without any known cluster addresses: if the <code>wsrep_cluster_address</code> variable is empty, Percona XtraDB Cluster assumes that this is the first node and initializes the cluster.</p> <p>Instead of changing the configuration, start the first node with the following command on Debian or Ubuntu:</p> <pre><code>[root@pxc1 ~]# /etc/init.d/mysql bootstrap-pxc\n</code></pre> <p>Start the first node with the following command on RedHat or CentOS:</p> <pre><code>[root@pxc1 ~]# systemctl start mysql@bootstrap.service\n</code></pre> <p>When you start the node using the <code>bootstrap.server</code> command, it runs in bootstrap mode with <code>wsrep_cluster_address=gcomm://</code>. This setting tells the node to initialize the cluster with the <code>wsrep_cluster_conf_id</code> variable set to <code>1</code>. After you add other nodes to the cluster, you can then restart this node as normal, and it will use standard configuration again.</p> <p>Note</p> <p>A service started with <code>mysql@bootstrap</code> must be stopped using the same command. For example, the <code>systemctl stop mysql</code> command does not stop an instance started with the <code>mysql@bootstrap</code> command.</p> <p>To make sure that the cluster has been initialized, run the following:</p> <pre><code>mysql@pxc1&gt; show status like 'wsrep%';\n</code></pre> <p>The output shows that the cluster size is 1 node, it is the primary component, the node is in <code>Synced</code> state, it is fully connected and ready for write-set replication.</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n| ...                        | ...                                  |\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n| ...                        | ...                                  |\n| wsrep_cluster_size         | 1                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n| ...                        | ...                                  |\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> <p>Before adding other nodes to your new cluster, create a user for SST and provide the necessary privileges for that user account. The credentials must match those specified when Configuring Nodes for Write-Set Replication.</p> <pre><code>mysql@pxc1&gt; CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 'passw0rd';\nmysql@pxc1&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO\n  'sstuser'@'localhost';\nmysql@pxc1&gt; FLUSH PRIVILEGES;\n</code></pre> <p>For more information, see Privileges for Percona XtraBackup.</p>"},{"location":"bootstrap.html#next-steps","title":"Next Steps","text":"<p>After initializing the cluster, you can add other nodes.</p>"},{"location":"configure.html","title":"Configuring Nodes for Write-Set Replication","text":"<p>After installing Percona XtraDB Cluster on a node, configure it with information about the cluster.</p> <p>Note</p> <p>Make sure that the Percona XtraDB Cluster server is not running.</p> <pre><code>$ sudo service mysql stop\n</code></pre> <p>Configuration examples assume there are three Percona XtraDB Cluster nodes:</p> Node Host IP Node 1 pxc1 192.168.70.61 Node 2 pxc2 192.168.70.62 Node 3 pxc3 192.168.70.63 <p>If you are running Debian or Ubuntu, add the following configuration variables to /etc/percona-xtradb-cluster.conf.d/wsrep.cnf on the first node:</p> <pre><code>[mysqld]\nwsrep_provider=/usr/lib/libgalera_smm.so\nwsrep_cluster_name=pxc-cluster\nwsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63\nwsrep_node_name=pxc1\nwsrep_node_address=192.168.70.61\nwsrep_sst_method=xtrabackup-v2\nwsrep_sst_auth=sstuser:passw0rd\npxc_strict_mode=ENFORCING\nbinlog_format=ROW\ndefault_storage_engine=InnoDB\ninnodb_autoinc_lock_mode=2\n</code></pre> <p>If you are running Red Hat or CentOS, add the following configuration variables to /etc/percona-xtradb-cluster.conf.d/wsrep.cnf on the first node:</p> <pre><code>[mysqld]\n wsrep_provider=/usr/lib64/galera3/libgalera_smm.so\n wsrep_cluster_name=pxc-cluster\n wsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63\n wsrep_node_name=pxc1\n wsrep_node_address=192.168.70.61\n wsrep_sst_method=xtrabackup-v2\n wsrep_sst_auth=sstuser:passw0rd\n pxc_strict_mode=ENFORCING\n binlog_format=ROW\n default_storage_engine=InnoDB\n innodb_autoinc_lock_mode=2\n</code></pre> <p>Use the same configuration for the second and third nodes, except the <code>wsrep_node_name</code> and <code>wsrep_node_address</code> variables:</p> <ul> <li>For the second node:</li> </ul> <pre><code>wsrep_node_name=pxc2\nwsrep_node_address=192.168.70.62\n</code></pre> <ul> <li>For the third node:</li> </ul> <pre><code>wsrep_node_name=pxc3\nwsrep_node_address=192.168.70.63\n</code></pre>"},{"location":"configure.html#configuration-reference","title":"Configuration Reference","text":"<p><code>wsrep_provider</code></p> <p>Specify the path to the Galera library.</p> <p>Note</p> <p>The location depends on the distribution:</p> <ul> <li> <p>Debian or Ubuntu: <code>/usr/lib/libgalera_smm.so</code></p> </li> <li> <p>Red Hat or CentOS: <code>/usr/lib64/galera3/libgalera_smm.so</code></p> </li> </ul> <p><code>wsrep_cluster_name</code></p> <p>Specify the logical name for your cluster. It must be the same for all nodes in your cluster.</p> <p><code>wsrep_cluster_address</code></p> <p>Specify the IP addresses of nodes in your cluster. At least one is required for a node to join the cluster, but it is recommended to list addresses of all nodes. This way if the first node in the list is not available, the joining node can use other addresses.</p> <p>Note</p> <p>No addresses are required for the initial node in the cluster. However, it is recommended to specify them and properly bootstrap the first node. This will ensure that the node is able to rejoin the cluster if it goes down in the future.</p> <p><code>wsrep_node_name</code></p> <p>Specify the logical name for each individual node. If this variable is not specified, the host name will be used.</p> <p><code>wsrep_node_address</code></p> <p>Specify the IP address of this particular node.</p> <p><code>wsrep_sst_method</code></p> <p>By default, Percona XtraDB Cluster uses Percona XtraBackup for State Snapshot Transfer (SST). Setting <code>wsrep_sst_method=xtrabackup-v2</code> is highly recommended. This method requires a user for SST to be set up on the initial node. Provide SST user credentials with the <code>wsrep_sst_auth</code> variable.</p> <p><code>wsrep_sst_auth</code></p> <p>Specify authentication credentials for SST as <code>&lt;sstuser&gt;:&lt;sst_pass&gt;</code>. You must create this user when Bootstrapping the First Node and provide necessary privileges for it:</p> <pre><code>mysql&gt; CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 'passw0rd';\nmysql&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO\n  'sstuser'@'localhost';\nmysql&gt; FLUSH PRIVILEGES;\n</code></pre> <p>For more information, see Privileges for Percona XtraBackup.</p> <p><code>pxc_strict_mode</code></p> <p>PXC Strict Mode is enabled by default and set to <code>ENFORCING</code>, which blocks the use of experimental and unsupported features in Percona XtraDB Cluster.</p> <p><code>binlog_format</code></p> <p>Galera supports only row-level replication, so set <code>binlog_format=ROW</code>.</p> <p><code>default_storage_engine</code></p> <p>Galera fully supports only the InnoDB storage engine. It will not work correctly with MyISAM or any other non-transactional storage engines. Set this variable to <code>default_storage_engine=InnoDB</code>.</p> <p><code>innodb_autoinc_lock_mode</code></p> <p>Galera supports only interleaved (<code>2</code>) lock mode for InnoDB. Setting the traditional (<code>0</code>) or consecutive (<code>1</code>) lock mode can cause replication to fail due to unresolved deadlocks. Set this variable to <code>innodb_autoinc_lock_mode=2</code>.</p>"},{"location":"configure.html#next-steps","title":"Next Steps","text":"<p>After you configure all your nodes, initialize Percona XtraDB Cluster by bootstrapping the first node according to the procedure described in Bootstrapping the First Node.</p>"},{"location":"copyright-and-licensing-information.html","title":"Copyright and licensing information","text":""},{"location":"copyright-and-licensing-information.html#documentation-licensing","title":"Documentation licensing","text":"<p>Percona XtraDB Cluster documentation is (C)2009-2023 Percona LLC and/or its affiliates and is distributed under the Creative Commons Attribution 4.0 International License.</p>"},{"location":"faq.html","title":"Frequently Asked Questions","text":""},{"location":"faq.html#how-do-i-report-bugs","title":"How do I report bugs?","text":"<p>All bugs can be reported on JIRA. Please submit <code>error.log</code> files from all the nodes.</p>"},{"location":"faq.html#how-do-i-solve-locking-issues-like-auto-increment","title":"How do I solve locking issues like auto-increment?","text":"<p>For auto-increment,\u00a0Percona XtraDB Cluster changes <code>auto_increment_offset</code> for each new node. In a single-node workload, locking is handled in the same way as InnoDB. In case of write load on several nodes, Percona XtraDB Cluster uses optimistic locking and the application may receive lock error in response to <code>COMMIT</code> query.</p>"},{"location":"faq.html#what-if-a-node-crashes-and-innodb-recovery-rolls-back-some-transactions","title":"What if a node crashes and InnoDB recovery rolls back some transactions?","text":"<p>When a node crashes, after restarting, it will copy the whole dataset from another\u00a0node (if there were changes to data since the crash).</p>"},{"location":"faq.html#how-can-i-check-the-galera-node-health","title":"How can I check the Galera node health?","text":"<p>To check the health of a Galera node, use the following query:</p> <pre><code>SELECT 1 FROM dual;\n</code></pre> <p>The following results of the previous query are possible:</p> <ul> <li> <p>You get the row with <code>id=1</code> (node is healthy)</p> </li> <li> <p>Unknown error (node is online, but Galera is not connected/synced with the cluster)</p> </li> <li> <p>Connection error (node is not online)</p> </li> </ul> <p>You can also check a node\u2019s health with the <code>clustercheck</code> script. First set up the <code>clustercheck</code> user:</p> <pre><code>GRANT USAGE ON *.* TO 'clustercheck'@'localhost' IDENTIFIED BY PASSWORD '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19';\n</code></pre> <p>You can then check a node\u2019s health by running the <code>clustercheck</code> script:</p> <pre><code>/usr/bin/clustercheck clustercheck password 0\n</code></pre> <p>If the node is running, you should get the following status:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nConnection: close\nContent-Length: 40\n\nPercona XtraDB Cluster Node is synced.\n</code></pre> <p>In case node isn\u2019t synced or if it is offline, status will look like:</p> <pre><code>HTTP/1.1 503 Service Unavailable\nContent-Type: text/plain\nConnection: close\nContent-Length: 44\n\nPercona XtraDB Cluster Node is not synced.\n</code></pre> <p>Note</p> <p>The <code>clustercheck</code> script has the following syntax:</p> <p><code>&lt;user&gt; &lt;pass&gt; &lt;available_when_donor=0|1&gt; &lt;log_file&gt; &lt;available_when_readonly=0|1&gt; &lt;defaults_extra_file&gt;</code></p> <p>Recommended: <code>server_args = user pass 1 /var/log/log-file 0 /etc/my.cnf.local</code></p> <p>Compatibility: <code>server_args = user pass 1 /var/log/log-file 1 /etc/my.cnf.local</code></p>"},{"location":"faq.html#how-does-percona-xtradb-cluster-handle-big-transactions","title":"How does Percona XtraDB Cluster handle big transactions?","text":"<p>Percona XtraDB Cluster populates write set in memory before replication, and this sets the limit for the size of transactions that make sense. There are wsrep variables for maximum row count and maximum size of write set to make sure that the server does not run out of memory.</p>"},{"location":"faq.html#is-it-possible-to-have-different-table-structures-on-the-nodes","title":"Is it possible to have different table structures on the nodes?","text":"<p>For example, if there are four nodes, with four tables: <code>sessions_a</code>, <code>sessions_b</code>, <code>sessions_c</code>, and <code>sessions_d</code>, and you want each table in a separate node, this is not possible for InnoDB tables. However, it will work for MEMORY tables.</p>"},{"location":"faq.html#what-if-a-node-fails-or-there-is-a-network-issue-between-nodes","title":"What if a node fails or there is a network issue between nodes?","text":"<p>The quorum mechanism in\u00a0Percona XtraDB Cluster will decide which nodes can accept traffic and will shut down the nodes that do not belong to the quorum. Later when the failure is fixed, the nodes will need to copy data from the working cluster.</p> <p>The algorithm for quorum is Dynamic Linear Voting (DLV). The quorum is preserved if (and only if) the sum weight of the nodes in a new component strictly exceeds half that of the preceding Primary Component, minus the nodes which left gracefully.</p> <p>The mechanism is described in detail in Galera documentation.</p>"},{"location":"faq.html#how-would-the-quorum-mechanism-handle-split-brain","title":"How would the quorum mechanism handle split brain?","text":"<p>The quorum mechanism cannot handle split brain. If there is no way to decide on the primary component, Percona XtraDB Cluster has no way to resolve a split brain. The minimal recommendation is to have 3 nodes. However, it is possible to allow a node to handle traffic with the following option:</p> <pre><code>wsrep_provider_options=\"pc.ignore_sb = yes\"\n</code></pre>"},{"location":"faq.html#why-a-node-stops-accepting-commands-if-the-other-one-fails-in-a-2-node-setup","title":"Why a node stops accepting commands if the other one fails in a 2-node setup?","text":"<p>This is expected behavior to prevent split brain. For more information, see previous question or Galera documentation.</p>"},{"location":"faq.html#is-it-possible-to-set-up-a-cluster-without-state-transfer","title":"Is it possible to set up a cluster without state transfer?","text":"<p>It is possible in two ways:</p> <ul> <li> <p>By default, Galera reads starting position from a text file <code>&lt;datadir&gt;/grastate.dat</code>. Make this file identical on all nodes, and there will be no state transfer after starting a node.</p> </li> <li> <p>Use the <code>wsrep_start_position</code> variable to start the nodes with the same <code>UUID:seqno</code> value.</p> </li> </ul>"},{"location":"faq.html#what-tcp-ports-are-used-by-percona-xtradb-cluster","title":"What TCP ports are used by Percona XtraDB Cluster?","text":"<p>You may need to open up to four ports if you are using a firewall:</p> <ol> <li> <p>Regular MySQL port (default is 3306).</p> </li> <li> <p>Port for group communication (default is 4567).     It can be changed using the following option:</p> <pre><code>wsrep_provider_options =\"gmcast.listen_addr=tcp://0.0.0.0:4010; \"\n</code></pre> </li> <li> <p>Port for State Snapshot Transfer (default is 4444).     It can be changed using the following option:</p> <pre><code>wsrep_sst_receive_address=10.11.12.205:5555\n</code></pre> </li> <li> <p>Port for Incremental State Transfer (default is port for group communication + 1 or 4568).     It can be changed using the following option:</p> <pre><code>wsrep_provider_options = \"ist.recv_addr=10.11.12.206:7777; \"\n</code></pre> </li> </ol>"},{"location":"faq.html#is-there-async-mode-or-only-sync-commits-are-supported","title":"Is there \u201casync\u201d mode or only \u201csync\u201d commits are supported?","text":"<p>Percona XtraDB Cluster does not support \u201casync\u201d mode, all commits are synchronous on all nodes. To be precise, the commits are \u201cvirtually\u201d synchronous, which means that the transaction should pass certification on nodes, not physical commit. Certification means a guarantee that the transaction does not have conflicts with other transactions on the corresponding node.</p>"},{"location":"faq.html#does-it-work-with-regular-mysql-replication","title":"Does it work with regular MySQL replication?","text":"<p>Yes. On the node you are going to use as source, you should enable <code>log-bin</code> and <code>log-slave-update</code> options.</p>"},{"location":"faq.html#why-the-init-script-etcinitdmysql-does-not-start","title":"Why the init script (/etc/init.d/mysql) does not start?","text":"<p>Try to disable SELinux with the following command:</p> <pre><code>echo 0 &gt; /selinux/enforce\n</code></pre>"},{"location":"faq.html#what-does-nc-invalid-option-d-in-the-ssterr-log-file-mean","title":"What does \u201cnc: invalid option \u2013 \u2018d\u2019\u201d in the sst.err log file mean?","text":"<p>This is Debian/Ubuntu specific error. Percona XtraDB Cluster uses <code>netcat-openbsd</code> package. This dependency has been fixed in recent releases. Future releases of Percona XtraDB Cluster will be compatible with any <code>netcat</code> (see bug #959970).</p>"},{"location":"glossary.html","title":"Glossary","text":""},{"location":"glossary.html#lsn","title":"LSN","text":"<p>Each InnoDB page (usually 16kb in size) contains a log sequence number, or LSN. The LSN is the system version number for the entire database. Each page\u2019s LSN shows how recently it was changed.</p>"},{"location":"glossary.html#innodb","title":"InnoDB","text":"<p>Storage engine which provides ACID-compliant transactions and foreign key support, among others improvements over MyISAM. It is the default engine for MySQL as of the 5.5 series.</p>"},{"location":"glossary.html#myisam","title":"MyISAM","text":"<p>Previous default storage engine for MySQL for versions prior to 5.5. It doesn\u2019t fully support transactions but in some scenarios may be faster than InnoDB. Each table is stored on disk in 3 files: .frm,i <code>.MYD</code>, <code>.MYI</code>.</p>"},{"location":"glossary.html#gtid","title":"GTID","text":"<p>Global Transaction ID, in Percona XtraDB Cluster it consists of UUID and an ordinal sequence number which denotes the position of the change in the sequence.</p>"},{"location":"glossary.html#haproxy","title":"HAProxy","text":"<p>HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for web sites crawling under very high loads while needing persistence or Layer7 processing. Supporting tens of thousands of connections is clearly realistic with todays hardware. Its mode of operation makes its integration into existing architectures very easy and riskless, while still offering the possibility not to expose fragile web servers to the net.</p>"},{"location":"glossary.html#ist","title":"IST","text":"<p>Incremental State Transfer. Functionality which instead of whole state snapshot can catch up with te group by receiving the missing writesets, but only if the writeset is still in the donor\u2019s writeset cache.</p>"},{"location":"glossary.html#sst","title":"SST","text":"<p>State Snapshot Transfer is the full copy of data from one node to another. It\u2019s used when a new node joins the cluster, it has to transfer data from existing node. There are three methods of SST available in Percona XtraDB Cluster: mysqldump, rsync and xtrabackup. The downside of mysqldump and rsync is that the node becomes READ-ONLY while data is being copied from one node to another (SST applies FLUSH TABLES WITH READ LOCK command). Xtrabackup SST does not require READ LOCK for the entire syncing process, only for syncing the MySQL system tables and writing the information about the binlog, galera and replica information (same as the regular Percona XtraBackup backup). State snapshot transfer method can be configured with the <code>wsrep_sst_method</code> variable.</p>"},{"location":"glossary.html#uuid","title":"UUID","text":"<p>Universally Unique IDentifier which uniquely identifies the state and the sequence of changes node undergoes. 128-bit UUID is a classic DCE UUID Version 1 (based on current time and MAC address). Although in theory this UUID could be generated based on the real MAC-address, in the Galera it is always (without exception) based on the generated pseudo-random addresses (\u201clocally administered\u201d bit in the node address (in the UUID structure) is always equal to unity).</p> <p>Complete structure of the 128-bit UUID field and explanation for its generation are as follows:</p> From To Length Content 0 31 32 Bits 0-31 of Coordinated Universal Time (UTC) as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582 encoded as big-endian 32-bit number. 32 47 16 Bits 32-47 of UTC as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582, encoded as big-endian 16-bit number. 48 59 12 Bits 48-59 of UTC as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582, encoded as big-endian 16-bit number. 60 63 4 UUID version number: always equal to 1 (DCE UUID). 64 69 6 most-significants bits of random number, which generated from the server process PID and Coordinated Universal Time (UTC) as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582. 70 71 2 UID variant: always equal to binary 10 (DCE variant). 72 79 8 8 least-significant bits of  random number, which generated from the server process PID and Coordinated Universal Time (UTC) as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582. 80 80 1 Random bit (\u201cunique node identifier\u201d). 81 81 1 Always equal to the one (\u201clocally administered MAC address\u201d). 82 127 46 Random bits (\u201cunique node identifier\u201d): readed from the <code>/dev/urandom</code> or (if <code>/dev/urandom</code> is unavailable) generated based on the server process PID, current time and bits of the default \u201czero node identifier\u201d (entropy data)."},{"location":"glossary.html#xtrabackup","title":"XtraBackup","text":"<p>Percona XtraBackup is an open-source hot backup utility for MySQL - based servers that doesn\u2019t lock your database during the backup.</p>"},{"location":"glossary.html#xtradb","title":"XtraDB","text":"<p>Percona XtraDB is an enhanced version of the InnoDB storage engine, designed to better scale on modern hardware, and including a variety of other features useful in high performance environments. It is fully backwards compatible, and so can be used as a drop-in replacement for standard InnoDB. More information here .</p>"},{"location":"glossary.html#xtradb-cluster","title":"XtraDB Cluster","text":"<p>Percona XtraDB Cluster is a high availability solution for MySQL.</p>"},{"location":"glossary.html#percona-xtradb-cluster","title":"Percona XtraDB Cluster","text":"<p>Percona XtraDB Cluster (PXC) is a high availability solution for MySQL.</p>"},{"location":"glossary.html#mycnf","title":"my.cnf","text":"<p>This file refers to the database server\u2019s main configuration file. Most Linux distributions place it as <code>/etc/mysql/my.cnf</code> or <code>/etc/my.cnf</code>, but the location and name depends on the particular installation. Note that this is not the only way of configuring the server, some systems does not have one even and rely on the command options to start the server and its defaults values.</p>"},{"location":"glossary.html#cluster-replication","title":"cluster replication","text":"<p>Normal replication path for cluster members.\u00a0Can be encrypted (not by default) and unicast or multicast (unicast by default). Runs on tcp port 4567 by default.</p>"},{"location":"glossary.html#database-replication","title":"Database replication","text":"<p>See Database replication in Galera Cluster documentation</p>"},{"location":"glossary.html#slave-database-server","title":"Slave database server","text":"<p>See Database replication in Galera Cluster documentation</p>"},{"location":"glossary.html#multi-master-replication","title":"Multi-master replication","text":"<p>See Multi-master replication in Galera Cluster documentation</p>"},{"location":"glossary.html#node","title":"Node","text":"<p>See Database replication in Galera Cluster documentation</p>"},{"location":"glossary.html#datadir","title":"datadir","text":"<p>The directory in which the database server stores its databases. Most Linux distribution use <code>/var/lib/mysql</code> by default.</p>"},{"location":"glossary.html#donor-node","title":"donor node","text":"<p>The node elected to provide a state transfer (SST or IST).</p>"},{"location":"glossary.html#ibdata","title":"ibdata","text":"<p>Default prefix for tablespace files, e.g., <code>ibdata1</code> is a 10MB autoextendable file that MySQL creates for the shared tablespace by default.</p>"},{"location":"glossary.html#joiner-node","title":"joiner node","text":"<p>The node joining the cluster, usually a state transfer target.</p>"},{"location":"glossary.html#node_1","title":"node","text":"<p>A cluster node \u2013 a single mysql instance that is in the cluster.</p>"},{"location":"glossary.html#primary-cluster","title":"primary cluster","text":"<p>A cluster with quorum.\u00a0A non-primary cluster will not allow any operations and will give <code>Unknown command</code> errors on any clients attempting to read or write from the database.</p>"},{"location":"glossary.html#quorum","title":"quorum","text":"<p>A majority (&gt; 50%) of nodes.\u00a0In the event of a network partition, only the cluster partition that retains a quorum (if any) will remain Primary by default.</p>"},{"location":"glossary.html#split-brain","title":"split brain","text":"<p>Split brain occurs when two parts of a computer cluster are disconnected, each part believing that the other is no longer running. This problem can lead to data inconsistency.</p>"},{"location":"glossary.html#frm","title":".frm","text":"<p>For each table, the server will create a file with the <code>.frm</code> extension containing the table definition (for all storage engines).</p>"},{"location":"intro.html","title":"About Percona XtraDB Cluster","text":"<p>Percona XtraDB Cluster is a fully open-source high-availability solution for MySQL. It integrates Percona Server and Percona XtraBackup with the Galera library to enable synchronous multi-source replication.</p> <p>A cluster consists of nodes, where each node contains the same set of data synchronized accross nodes. The recommended configuration is to have at least 3 nodes, but you can have 2 nodes as well. Each node is a regular MySQL Server instance (for example, Percona Server). You can convert an existing MySQL Server instance to a node and run the cluster using this node as a base. You can also detach any node from the cluster and use it as a regular MySQL Server instance.</p> <p></p> <p>Benefits:</p> <ul> <li> <p>When you execute a query, it is executed locally on the node. All data is available locally, no need for remote access.</p> </li> <li> <p>No central management. You can loose any node at any point of time, and the cluster will continue to function without any data loss.</p> </li> <li> <p>Good solution for scaling a read workload. You can put read queries to any of the nodes.</p> </li> </ul> <p>Drawbacks:</p> <ul> <li> <p>Overhead of provisioning new node.   When you add a new node, it has to copy the full data set from one of existing nodes. If it is 100GB, it copies 100GB.</p> </li> <li> <p>This can\u2019t be used as an effective write scaling solution.   There might be some improvements in write throughput   when you run write traffic to 2 nodes versus all traffic to 1 node,   but you can\u2019t expect a lot.   All writes still have to go on all nodes.</p> </li> <li> <p>You have several duplicates of the data, for 3 nodes you have 3 duplicates.</p> </li> </ul>"},{"location":"intro.html#components","title":"Components","text":"<p>Percona XtraDB Cluster is based on Percona Server running with the XtraDB storage engine. It uses the Galera library, which is an implementation of the write set replication (wsrep) API developed by Codership Oy. The default and recommended data transfer method is via Percona XtraBackup.</p>"},{"location":"limitation.html","title":"Percona XtraDB Cluster Limitations","text":"<p>The following limitations apply to Percona XtraDB Cluster:</p> <ul> <li> <p>Replication works only with InnoDB storage engine. Any writes to tables of other types, including system (<code>mysql.\\*</code>) tables, are not replicated. However, <code>DDL</code> statements are replicated in the statement level, and changes to <code>mysql.\\*</code> tables are replicated that way. So you can safely issue <code>CREATE USER...</code>, but issuing <code>INSERT INTO mysql.user...</code> will not be replicated. You can enable experimental MyISAM replication support using the <code>wsrep_replicate_myisam</code> variable.</p> </li> <li> <p>Unsupported queries:</p> <ul> <li> <p><code>LOCK TABLES</code> and <code>UNLOCK TABLES</code> is not supported in multi-source setups</p> </li> <li> <p>Lock functions, such as <code>GET_LOCK()</code>, <code>RELEASE_LOCK()</code>, and so on</p> </li> </ul> <p>See also</p> <p>MySQL Documentation:</p> <ul> <li> <p>LOCK TABLES AND UNLOCK TABLES statements</p> </li> <li> <p>Locking functions</p> </li> </ul> <ul> <li>Query log cannot be directed to table.</li> </ul> </li> </ul> <p>If you enable query logging, you must forward the log to a file:</p> <pre><code>log_output = FILE\n</code></pre> <p>Use <code>general_log</code> and <code>general_log_file</code> to choose query logging   and the log file name.</p> <ul> <li> <p>Maximum allowed transaction size is defined by the <code>wsrep_max_ws_rows</code> and <code>wsrep_max_ws_size</code> variables.    <code>LOAD DATA INFILE</code> processing will commit every 10,000 rows.   So large transactions due to <code>LOAD DATA</code>   will be split to series of small transactions.</p> </li> <li> <p>Due to cluster-level optimistic concurrency control, a   transaction issuing a <code>COMMIT</code> may still be aborted at that stage.   There can be two transactions writing to the same rows   and committing in separate Percona XtraDB Cluster nodes,   and only one of the them can successfully commit.   The failing one will be aborted.   For cluster-level aborts, Percona XtraDB Cluster gives back deadlock error code:</p> </li> </ul> <pre><code>(Error: 1213 SQLSTATE: 40001  (ER_LOCK_DEADLOCK)).\n</code></pre> <ul> <li> <p>XA transactions are not supported due to possible rollback on commit.</p> </li> <li> <p>The write throughput of the whole cluster is limited by the weakest node.  If one node becomes slow, the whole cluster slows down. If you have requirements for stable high performance, then it should be supported by corresponding hardware.</p> </li> <li> <p>The minimal recommended size of cluster is three nodes.  The third node can be an arbitrator.</p> </li> <li> <p>InnoDB fake changes feature is not supported. This feature has been removed.</p> </li> <li> <p><code>enforce_storage_engine=InnoDB</code> is not compatible with <code>wsrep_replicate_myisam=OFF</code> (default).</p> </li> </ul> <p>See also</p> <p>Percona Server for MySQL documentation: enforcing storage engine</p> <ul> <li> <p>When running Percona XtraDB Cluster in cluster mode, avoid <code>ALTER TABLE ... IMPORT/EXPORT</code> workloads. It can lead to node inconsistency if not executed in sync on all nodes.</p> </li> <li> <p>All tables must have the primary key. This ensures that the same rows appear in the same order on different nodes. The <code>DELETE</code> statement is not supported on tables without a primary key.</p> </li> <li> <p>Percona Server 5.7 data at rest encryption is similar to the MySQL 5.7 data-at-rest encryption. Review the available encryption features for Percona Server for MySQL 5.7. Percona Server 8.0 provides more encryption features and options which are not available in this version.</p> </li> </ul> <p>See also</p> <p>Galera Documentation: Tables without Primary Keys</p> <ul> <li>Avoid reusing the names of a persistent table for a temporary table. Although MySQL allows a temporary table and a persistent table to have the same name, this approach is not recommended. If a persistent table name matches a temporary table name, Galera Cluster blocks the replication to that table.</li> </ul> <p>With wsrep_debug set to 1, the error log may contain the following message:</p> <pre><code>... [Note] WSREP: TO BEGIN: -1, 0 : create table t (i int) engine=innodb\n... [Note] WSREP: TO isolation skipped for: 1, sql: create table t (i int) engine=innodb.Only temporary tables affected.\n</code></pre> <ul> <li>As of version 5.7.32-13.47, an INPLACE ALTER TABLE  query takes an internal shared lock on the table during the execution of the query. The <code>LOCK=NONE</code> clause is no longer allowed for all of the INPLACE ALTER TABLE queries due to this change.</li> </ul> <p>This change addresses a deadlock, which could cause a cluster node to hang in the following scenario:</p> <ul> <li> <p>An INPLACE <code>ALTER TABLE</code> query in one session or being applied as Total Order Isolation (TOI)</p> </li> <li> <p>A DML on the same table from another session</p> </li> </ul> <p>Do not use one or more dot characters (.) when defining the values for the following variables:</p> <ul> <li> <p>log_bin</p> </li> <li> <p>log_bin_index</p> </li> </ul> <p>MySQL and XtraBackup handles the value in different ways and this difference causes unpredictable behavior.</p>"},{"location":"overview.html","title":"Quick Start Guide for Percona XtraDB Cluster","text":"<p>This guide describes the procedure for setting up Percona XtraDB Cluster.</p> <p>Examples provided in this guide assume there are three Percona XtraDB Cluster nodes, as a common choice for trying out and testing:</p> Node Host IP Node 1 pxc1 192.168.70.61 Node 2 pxc2 192.168.70.62 Node 3 pxc3 192.168.70.63 <p>Note</p> <p>Avoid creating a cluster with two or any even number of nodes, because this can lead to split brain. </p> <p>For more information, see Cluster Failover.</p> <p>The following procedure provides an overview with links to details for every step:</p> <ul> <li>Install Percona XtraDB Cluster on all nodes and set up root access for them.</li> </ul> <p>It is recommended to install from official Percona repositories:</p> <ul> <li> <p>On Red Hat and CentOS, install using YUM.</p> </li> <li> <p>On Debian and Ubuntu, install using APT.</p> </li> <li> <p>Configure all nodes with relevant settings required for write-set replication.</p> </li> </ul> <p>This includes path to the Galera library, location of other nodes, etc.</p> <ul> <li>Bootstrap the first node to initialize the cluster.</li> </ul> <p>This must be the node with your main database,   which will be used as the data source for the cluster.</p> <ul> <li>Add other nodes to the cluster.</li> </ul> <p>Data on new nodes joining the cluster is overwritten   in order to synchronize it with the cluster.</p> <ul> <li>Verify replication.</li> </ul> <p>Although cluster initialization and node provisioning   is performed automatically, it is a good idea to ensure   that changes on one node actually replicate to other nodes.</p> <ul> <li>Install ProxySQL.</li> </ul> <p>To complete the deployment of the cluster, a high-availability proxy is required. We recommend installing ProxySQL on client nodes for efficient workload management across the cluster without any changes to the applications that generate queries.</p>"},{"location":"overview.html#percona-monitoring-and-management","title":"Percona Monitoring and Management","text":"<p>Percona Monitoring and Management is the best choice for managing and monitoring Percona XtraDB Cluster performance. It provides visibility for the cluster and enables efficient troubleshooting.</p>"},{"location":"telemetry.html","title":"Telemetry on Percona XtraDB Cluster","text":"<p>Percona telemetry fills in the gaps in our understanding of how you use the Percona XtraDB Cluster to improve our products. Participation in the anonymous program is optional. You can opt out if you prefer to not share this information.</p>"},{"location":"telemetry.html#what-information-is-collected","title":"What information is collected","text":"<p>At this time, telemetry is added only to the Percona packages and Docker images. Percona XtraDB Cluster collects only information about the installation environment. Future releases may add additional metrics.</p> <p>Be assured that access to this raw data is rigorously controlled. Percona does not collect personal data. All data is anonymous and cannot be traced to a specific user. To learn more about our privacy practices, read our Percona Privacy statement.</p> <p>An example of the data collected is the following:</p> <pre><code>[{\"id\" : \"c416c3ee-48cd-471c-9733-37c2886f8231\",\n\"product_family\" : \"PRODUCT_FAMILY_PXC\",\n\"instanceId\" : \"6aef422e-56a7-4530-af9d-94cc02198343\",\n\"createTime\" : \"2023-10-16T10:46:23Z\",\n\"metrics\":\n[{\"key\" : \"deployment\",\"value\" : \"PACKAGE\"},\n{\"key\" : \"pillar_version\",\"value\" : \"5.7.44-31.65\"},\n{\"key\" : \"OS\",\"value\" : \"Oracle Linux Server 8.8\"},\n{\"key\" : \"hardware_arch\",\"value\" : \"x86_64 x86_64\"}]}]\n</code></pre>"},{"location":"telemetry.html#disable-telemetry","title":"Disable telemetry","text":"<p>Starting with Percona XtraDB Cluster 5.7.44-31.65, telemetry is enabled by default. If you decide not to send usage data to Percona, you can set the <code>PERCONA_TELEMETRY_DISABLE=1</code> environment variable for either the root user or the operating system before the installation process.</p> Debian-derived distributionRed Hat-derived distributionDOCKER <p>Add the environment variable before the installation process.</p> <pre><code>$ sudo PERCONA_TELEMETRY_DISABLE=1 apt install percona-xtradb-cluster\n</code></pre> <p>Add the environment variable before the install process.</p> <pre><code>$ sudo PERCONA_TELEMETRY_DISABLE=1 yum install percona-xtradb-cluster\n</code></pre> <p>Add the environment variable when running a command in a new container.</p> <pre><code>$ docker run -d -e MYSQL_ROOT_PASSWORD=test1234# -e PERCONA_TELEMETRY_DISABLE=1 -e CLUSTER_NAME=pxc-cluster1 --name=pxc-node1 percona/percona-xtradb-cluster:5.7\n</code></pre>"},{"location":"trademark-policy.html","title":"Trademark policy","text":"<p>This Trademark Policy is to ensure that users of Percona-branded products or services know that what they receive has really been developed, approved, tested and maintained by Percona. Trademarks help to prevent confusion in the marketplace, by distinguishing one company\u2019s or person\u2019s products and services from another\u2019s.</p> <p>Percona owns a number of marks, including but not limited to Percona, XtraDB, Percona XtraDB, XtraBackup, Percona XtraBackup, Percona Server, and Percona Live, plus the distinctive visual icons and logos associated with these marks. Both the unregistered and registered marks of Percona are protected.</p> <p>Use of any Percona trademark in the name, URL, or other identifying characteristic of any product, service, website, or other use is not permitted without Percona\u2019s written permission with the following three limited exceptions.</p> <p>First, you may use the appropriate Percona mark when making a nominative fair use reference to a bona fide Percona product.</p> <p>Second, when Percona has released a product under a version of the GNU General Public License (\u201cGPL\u201d), you may use the appropriate Percona mark when distributing a verbatim copy of that product in accordance with the terms and conditions of the GPL.</p> <p>Third, you may use the appropriate Percona mark to refer to a distribution of GPL-released  Percona software that has been modified with minor changes for the sole purpose of allowing the software to operate on an operating system or hardware platform for which Percona has not yet released the software, provided that those third party changes do not affect the behavior, functionality, features, design or performance of the software. Users who acquire this Percona-branded software receive substantially exact implementations of the Percona software.</p> <p>Percona reserves the right to revoke this authorization at any time in its sole discretion.  For example, if Percona believes that your modification is beyond the scope of the limited license granted in this Policy or that your use of the Percona mark is detrimental to Percona, Percona will revoke this authorization.  Upon revocation, you must immediately cease using the applicable Percona mark.  If you do not immediately cease using the Percona mark upon revocation, Percona may take action to protect its rights and interests in the Percona mark.  Percona does not grant any license to use any Percona mark for any other modified versions of Percona software; such use will require our prior written permission.</p> <p>Neither trademark law nor any of the exceptions set forth in this Trademark Policy permit you to truncate, modify or otherwise use any Percona mark as part of your own brand.  For example, if XYZ creates a modified version of the Percona Server, XYZ may not brand that modification as \u201cXYZ Percona Server\u201d or \u201cPercona XYZ Server\u201d, even if that modification otherwise complies with the third exception noted above.</p> <p>In all cases, you must comply with applicable law, the underlying license, and this Trademark Policy, as amended from time to time.  For instance, any mention of Percona trademarks should include the full trademarked name, with proper spelling and capitalization, along with attribution of ownership to Percona Inc.  For example, the full proper name for XtraBackup is Percona XtraBackup. However, it is acceptable to omit the word \u201cPercona\u201d for brevity on the second and subsequent uses, where such omission does not cause confusion.</p> <p>In the event of doubt as to any of the conditions or exceptions outlined in this Trademark Policy, please contact trademarks@percona.com for assistance and we will do our very best to be helpful.</p>"},{"location":"upgrade-third-party-lib.html","title":"Upgrade third-party libraries","text":"<p>The following are generic instructions for updating libraries using a package manager. Your environment may differ. Upgrading libraries can have unintended consequences. Test the upgrade on a staging environment before upgrading production.</p>"},{"location":"upgrade-third-party-lib.html#prepare","title":"Prepare","text":"<p>These steps apply to any package manager. The example updates the OpenSSL library.</p> <ol> <li>Create a full server backup to ensure data integrity in case of issues.</li> <li>Identify the library and review the installation method.</li> <li>Research the compatibility between the new library and your current MySQL version.</li> <li>Stop the server.</li> </ol>"},{"location":"upgrade-third-party-lib.html#upgrade","title":"Upgrade","text":"Distributions using the APT package managerDistributions using the YUM package manager <p>Install the update:</p> <pre><code>$ sudo apt update\n$ sudo apt install libssl-dev openssl\n</code></pre> <p>Install the update:</p> <pre><code>$ sudo yum update\n$ sudo yum install openssl\n</code></pre>"},{"location":"upgrade-third-party-lib.html#verify","title":"Verify","text":"<p>After the upgrade, do the following:</p> <ol> <li> <p>Restart the server to ensure the library is loaded correctly.</p> <pre><code>$ sudo systemctl restart mysql\n</code></pre> </li> <li> <p>Connect to the server and verify the update with either <code>SHOW PLUGINS;</code> or <code>SHOW VARIABLES LIKE '%library_name%';</code>.</p> </li> <li> <p>Test the library functionality by running scripts or applications that rely on the upgraded library.</p> </li> </ol>"},{"location":"upgrade-third-party-lib.html#troubleshoot","title":"Troubleshoot","text":"<p>If you find issues:</p> <ul> <li>Check the error logs.</li> <li>Consult the documentation for the library and online resources for any troubleshooting steps specific to this library. Look for any potential compatibility issues.</li> </ul>"},{"location":"verify.html","title":"Verifying Replication","text":"<p>Use the following procedure to verify replication by creating a new database on the second node, creating a table for that database on the third node, and adding some records to the table on the first node.</p> <ul> <li>Create a new database on the second node:</li> </ul> <pre><code>mysql@pxc2&gt; CREATE DATABASE percona;\n</code></pre> <p>The following output confirms that a new database has been created:</p> <pre><code>Query OK, 1 row affected (0.01 sec)\n</code></pre> <ul> <li>Switch to a newly created database:</li> </ul> <pre><code>mysql@pxc3&gt; USE percona;\n</code></pre> <p>The following output confirms that a database has been changed:</p> <pre><code>Database changed\n</code></pre> <ul> <li>Create a table on the third node:</li> </ul> <pre><code>mysql@pxc3&gt; CREATE TABLE example (node_id INT PRIMARY KEY, node_name VARCHAR(30));\n</code></pre> <p>The following output confirms that a table has been created:</p> <pre><code>Query OK, 0 rows affected (0.05 sec)\n</code></pre> <ul> <li>Insert records on the first node:</li> </ul> <pre><code>mysql@pxc1&gt; INSERT INTO percona.example VALUES (1, 'percona1');\n</code></pre> <p>The following output confirms that the records have been inserted:</p> <pre><code>Query OK, 1 row affected (0.02 sec)\n</code></pre> <ul> <li>Retrieve rows from that table on the second node:</li> </ul> <pre><code>mysql@pxc2&gt; SELECT * FROM percona.example;\n</code></pre> <p>The following output confirms that all the rows have been retrieved:</p> <pre><code>+---------+-----------+\n| node_id | node_name |\n+---------+-----------+\n|       1 | percona1  |\n+---------+-----------+\n1 row in set (0.00 sec)\n</code></pre>"},{"location":"verify.html#next-steps","title":"Next Steps","text":"<ul> <li> <p>Consider installing ProxySQL on client nodes for efficient workload management across the cluster without any changes to the applications that generate queries. This is the recommended high-availability solution for Percona XtraDB Cluster. For more information, see Load balancing with ProxySQL.</p> </li> <li> <p>Percona Monitoring and Management is the best choice for managing and monitoring Percona XtraDB Cluster performance. It provides visibility for the cluster and enables efficient troubleshooting.</p> </li> </ul>"},{"location":"wsrep-files-index.html","title":"Index of files created by PXC","text":"<ul> <li> <p><code>GRA_\\*.log</code></p> <p>These files contain binlog events in ROW format representing the failed transaction. That means that the replica thread was not able to apply one of the transactions. For each of those file, a corresponding warning or error message is present in the mysql error log file. Those error can also be false positives like a bad <code>DDL</code> statement (dropping  a table that doesn\u2019t exists for example) and therefore nothing to worry about. However it\u2019s always recommended to check these log to understand what\u2019s is happening.</p> <p>To be able to analyze these files binlog header needs to be added to the log file. To create the <code>GRA_HEADER</code> file you need an instance running with <code>binlog_checksum</code> set to <code>NONE</code> and extract first 120 bytes from the binlog file:</p> <pre><code>$ head -c 123 mysqld-bin.000001 &gt; GRA_HEADER\n$ cat GRA_HEADER &gt; /var/lib/mysql/GRA_1_2-bin.log\n$ cat /var/lib/mysql/GRA_1_2.log &gt;&gt; /var/lib/mysql/GRA_1_2-bin.log\n$ mysqlbinlog -vvv /var/lib/mysql/GRA_1_2-bin.log\n\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 4\n#160809  16:04:05 server id 3  end_log_pos 123     Start: binlog v 4, server v 5.7.12-5rc1-log created 160809 16:04:05 at startup\n# Warning: this binlog is either in use or was not closed properly.\nROLLBACK/*!*/;\nBINLOG '\nnbGpVw8DAAAAdwAAAHsAAAABAAQANS43LjEyLTVyYzEtbG9nAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAACdsalXEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA\nALfQ8hw=\n'/*!*/;\n# at 123\n#160809  16:05:49 server id 2  end_log_pos 75     Query    thread_id=11    exec_time=0    error_code=0\nuse `test`/*!*/;\nSET TIMESTAMP=1470738949/*!*/;\nSET @@session.pseudo_thread_id=11/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;\nSET @@session.sql_mode=1436549152/*!*/;\nSET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;\n/*!\\C utf8 *//*!*/;\nSET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;\nSET @@session.lc_time_names=0/*!*/;\nSET @@session.collation_database=DEFAULT/*!*/;\ndrop table t\n/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n</code></pre> <p>This information can be used for checking the MySQL error log for the corresponding error message.</p> <pre><code>160805  9:33:37 8:52:21 [ERROR] Slave SQL: Error 'Unknown table 'test'' on query. Default database: 'test'. Query: 'drop table test', Error_code: 1051\n160805  9:33:37 8:52:21 [Warning] WSREP: RBR event 1 Query apply warning: 1, 3\n</code></pre> <p>In this example <code>DROP TABLE</code> statement was executed on a table that doesn\u2019t exist.</p> </li> <li> <p><code>gcache.page</code></p> <p>See <code>gcache.page_size</code></p> <p>See also</p> <p>Percona Database Performance Blog: All You Need to Know About GCache (Galera-Cache) https://www.percona.com/blog/2016/11/16/all-you-need-to-know-about-gcache-galera-cache/</p> </li> <li> <p><code>galera.cache</code></p> <p>This file is used as a main writeset store. It\u2019s implemented as a permanent ring-buffer file that is preallocated on disk when the node is initialized. File size can be controlled with the variable <code>gcache.size</code>. If this value is bigger, more writesets are cached and chances are better that the re-joining node will get IST instead of SST. Filename can be changed with the <code>gcache.name</code> variable.</p> </li> <li> <p><code>grastate.dat</code></p> <p>This file contains the Galera state information.</p> <ul> <li> <p><code>version</code> - grastate version</p> </li> <li> <p><code>uuid</code> - a unique identifier for the state and the sequence of changes it undergoes.For more information on how UUID is generated see UUID.</p> </li> <li> <p><code>seqno</code> - Ordinal Sequence Number, a 64-bit signed integer used to denote the position of the change in the sequence. <code>seqno</code> is <code>0</code> when no writesets have been generated or applied on that node, i.e., not applied/generated across the lifetime of a <code>grastate</code> file. <code>-1</code> is a special value for the <code>seqno</code> that is kept in the <code>grastate.dat</code> while the server is running to allow Galera to distinguish between a clean and an unclean shutdown. Upon a clean shutdown, the correct <code>seqno</code> value is written to the file. So, when the server is brought back up, if the value is still <code>-1</code> , this means that the server did not shut down cleanly. If the value is greater than <code>0</code>, this means that the shutdown was clean. <code>-1</code> is then written again to the file in order to allow the server to correctly detect if the next shutdown was clean in the same manner.</p> </li> <li> <p><code>cert_index</code> - cert index restore through grastate is not implemented yet</p> </li> </ul> <p>Examples of this file look like this:</p> <p>In case server node has this state when not running it means that that node crashed during the transaction processing.</p> <pre><code># GALERA saved state\nversion: 2.1\nuuid:    1917033b-7081-11e2-0800-707f5d3b106b\nseqno:   -1\ncert_index:\n</code></pre> <p>In case server node has this state when not running it means that the node was gracefully shut down.</p> <pre><code># GALERA saved state\nversion: 2.1\nuuid:    1917033b-7081-11e2-0800-707f5d3b106b\nseqno:   5192193423942\ncert_index:\n</code></pre> <p>In case server node has this state when not running it means that the node crashed during the DDL.</p> <pre><code># GALERA saved state\nversion: 2.1\nuuid:    00000000-0000-0000-0000-000000000000\nseqno:   -1\ncert_index:\n</code></pre> </li> <li> <p><code>gvwstate.dat</code></p> </li> </ul> <p>This file is used for Primary Component recovery feature. This file is    created once primary component is formed or changed, so you can get the    latest primary component this node was in. And this file is deleted when the    node is shutdown gracefully.</p> <p>First part contains the node UUID information. Second part contains    the view information. View information is written between <code>#vwbeg</code> and    <code>#vwend</code>. View information consists of:</p> <pre><code>* view_id: [view_type] [view_uuid] [view_seq]. - `view_type` is always `3` which means primary view. `view_uuid` and `view_seq` identifies a unique view, which could be perceived as identifier of this primary component.\n\n* bootstrap: [bootstarp_or_not]. - it could be `0` or `1`, but it does not affect primary component recovery process now.\n\n* member: [node\u2019s uuid] [node\u2019s segment]. - it represents all nodes in this primary component.\n\nExample of this file looks like this:\n\n```text\nmy_uuid: c5d5d990-30ee-11e4-aab1-46d0ed84b408\n#vwbeg\nview_id: 3 bc85bd53-31ac-11e4-9895-1f2ce13f2542 2 \nbootstrap: 0\nmember: bc85bd53-31ac-11e4-9895-1f2ce13f2542 0\nmember: c5d5d990-30ee-11e4-aab1-46d0ed84b408 0\n#vwend\n```\n</code></pre>"},{"location":"wsrep-provider-index.html","title":"Index of wsrep_provider options","text":"<p>The following variables can be set and checked in the <code>wsrep_provider_options</code> variable. The value of the variable can be changed in the MySQL configuration file, <code>my.cnf</code>, or by setting the variable value in the MySQL client.</p> <p>To change the value in <code>my.cnf</code>, the following syntax should be used:</p> <pre><code>wsrep_provider_options=\"variable1=value1;[variable2=value2]\"\n</code></pre> <p>For example to set the size of the Galera buffer storage to 512 MB, specify the following in <code>my.cnf</code>:</p> <pre><code>wsrep_provider_options=\"gcache.size=512M\"\n</code></pre> <p>Dynamic variables can be changed from the MySQL client using the <code>SET GLOBAL</code> command. For example, to change the value of the <code>pc.ignore_sb</code>, use the following command:</p> <pre><code>mysql&gt; SET GLOBAL wsrep_provider_options=\"pc.ignore_sb=true\";\n</code></pre>"},{"location":"wsrep-provider-index.html#index","title":"Index","text":""},{"location":"wsrep-provider-index.html#base_dir","title":"<code>base_dir</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: value of <code>datadir</code> <p>This variable specifies the data directory.</p>"},{"location":"wsrep-provider-index.html#base_host","title":"<code>base_host</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: value of <code>wsrep_node_address</code> <p>This variable sets the value of the node\u2019s base IP. This is an IP address on which Galera listens for connections from other nodes. Setting this value incorrectly would stop the node from communicating with other nodes.</p>"},{"location":"wsrep-provider-index.html#base_port","title":"<code>base_port</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 4567 <p>This variable sets the port on which Galera listens for connections from other nodes. Setting this value incorrectly would stop the node from communicating with other nodes.</p>"},{"location":"wsrep-provider-index.html#certlog_conflicts","title":"<code>cert.log_conflicts</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: no <p>This variable is used to specify if the details of the certification failures should be logged.</p>"},{"location":"wsrep-provider-index.html#debug","title":"<code>debug</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: no <p>When this variable is set to <code>yes</code>, it will enable debugging.</p>"},{"location":"wsrep-provider-index.html#evsauto_evict","title":"<code>evs.auto_evict</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 0 <p>Number of entries allowed on delayed list until auto eviction takes place. Setting value to <code>0</code> disables auto eviction protocol on the node, though node response times will still be monitored. EVS protocol version (<code>evs.version</code>) <code>1</code> is required to enable auto eviction.</p>"},{"location":"wsrep-provider-index.html#evscausal_keepalive_period","title":"<code>evs.causal_keepalive_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: value of <code>evs.keepalive_period</code> <p>This variable is used for development purposes and shouldn\u2019t be used by regular users.</p>"},{"location":"wsrep-provider-index.html#evsdebug_log_mask","title":"<code>evs.debug_log_mask</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 0x1 <p>This variable is used for EVS (Extended Virtual Synchrony) debugging. It can be used only when <code>wsrep_debug</code> is set to <code>ON</code>.</p>"},{"location":"wsrep-provider-index.html#evsdelay_margin","title":"<code>evs.delay_margin</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: PT1S <p>Time period that a node can delay its response from expected until it is added to delayed list. The value must be higher than the highest RTT between nodes.</p>"},{"location":"wsrep-provider-index.html#evsdelayed_keep_period","title":"<code>evs.delayed_keep_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: PT30S <p>Time period that node is required to remain responsive until one entry is removed from delayed list.</p>"},{"location":"wsrep-provider-index.html#evsevict","title":"<code>evs.evict</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes <p>Manual eviction can be triggered by setting the <code>evs.evict</code> to a certain node value. Setting the <code>evs.evict</code> to an empty string will clear the evict list on the node where it was set.</p>"},{"location":"wsrep-provider-index.html#evsinactive_check_period","title":"<code>evs.inactive_check_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT0.5S <p>This variable defines how often to check for peer inactivity.</p>"},{"location":"wsrep-provider-index.html#evsinactive_timeout","title":"<code>evs.inactive_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT15S <p>This variable defines the inactivity limit, once this limit is reached the node will be considered dead.</p>"},{"location":"wsrep-provider-index.html#evsinfo_log_mask","title":"<code>evs.info_log_mask</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable is used for controlling the extra EVS info logging.</p>"},{"location":"wsrep-provider-index.html#evsinstall_timeout","title":"<code>evs.install_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: PT7.5S <p>This variable defines the timeout on waiting for install message acknowledgments.</p>"},{"location":"wsrep-provider-index.html#evsjoin_retrans_period","title":"<code>evs.join_retrans_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT1S <p>This variable defines how often to retransmit EVS join messages when forming cluster membership.</p>"},{"location":"wsrep-provider-index.html#evskeepalive_period","title":"<code>evs.keepalive_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT1S <p>This variable defines how often to emit keepalive beacons (in the absence of any other traffic).</p>"},{"location":"wsrep-provider-index.html#evsmax_install_timeouts","title":"<code>evs.max_install_timeouts</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 1 <p>This variable defines how many membership install rounds to try before giving up (total rounds will be <code>evs.max_install_timeouts</code> + 2).</p>"},{"location":"wsrep-provider-index.html#evssend_window","title":"<code>evs.send_window</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 10 <p>This variable defines the maximum number of data packets in replication at a time. For WAN setups, the variable can be set to a considerably higher value than default (for example,512). The value must not be less than <code>evs.user_send_window</code>.</p>"},{"location":"wsrep-provider-index.html#evsstats_report_period","title":"<code>evs.stats_report_period</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT1M <p>This variable defines the control period of EVS statistics reporting.</p>"},{"location":"wsrep-provider-index.html#evssuspect_timeout","title":"<code>evs.suspect_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT5S <p>This variable defines the inactivity period after which the node is \u201csuspected\u201d to be dead. If all remaining nodes agree on that, the node will be dropped out of cluster even before <code>evs.inactive_timeout</code> is reached.</p>"},{"location":"wsrep-provider-index.html#evsuse_aggregate","title":"<code>evs.use_aggregate</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: true <p>When this variable is enabled, smaller packets will be aggregated into one.</p>"},{"location":"wsrep-provider-index.html#evsuser_send_window","title":"<code>evs.user_send_window</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 4 <p>This variable defines the maximum number of data packets in replication at a time. For WAN setups, the variable can be set to a considerably higher value than default (for example, 512).</p>"},{"location":"wsrep-provider-index.html#evsversion","title":"<code>evs.version</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable defines the EVS protocol version. Auto eviction is enabled when this variable is set to <code>1</code>. Default <code>0</code> is set for backwards compatibility.</p>"},{"location":"wsrep-provider-index.html#evsview_forget_timeout","title":"<code>evs.view_forget_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: P1D <p>This variable defines the timeout after which past views will be dropped from history.</p>"},{"location":"wsrep-provider-index.html#gcachedir","title":"<code>gcache.dir</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: <code>datadir</code> <p>This variable can be used to define the location of the <code>galera.cache</code> file.</p>"},{"location":"wsrep-provider-index.html#gcachefreeze_purge_at_seqno","title":"<code>gcache.freeze_purge_at_seqno</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Local, Global Dynamic: Yes Default Value: 0 <p>This variable controls the purging of the gcache and enables retaining more data in it. This variable makes it possible to use IST (Incremental State Transfer) when the node rejoins instead of SST (State Snapshot Transfer).</p> <p>Set this variable on an existing node of the cluster (that will continue to be part of the cluster and can act as a potential donor node). This node continues to retain the write-sets and allows restarting the node to rejoin by using IST.</p> <p>See also</p> <p>Percona Database Performance Blog:</p> <ul> <li> <p>All You Need to Know About GCache (Galera-Cache)</p> </li> <li> <p>Want IST Not SST for Node Rejoins? We Have a Solution!</p> </li> </ul> <p>The <code>gcache.freeze_purge_at_seqno</code> variable takes three values:</p> <p>-1 (default)</p> <p>No freezing of gcache, the purge operates as normal.</p> <p>A valid seqno in gcache</p> <p>The freeze purge of write-sets may not be smaller than the selected seqno. The best way to select an optimal value is to use the value of the variable :variable:<code>wsrep_last_applied</code> from the node that you plan to shut down.</p> <p>now The freeze purge of write-sets is no less than the smallest seqno currently in gcache. Using this value results in freezing the gcache-purge instantly. Use this value if selecting a valid seqno in gcache is difficult.</p>"},{"location":"wsrep-provider-index.html#gcachekeep_pages_count","title":"<code>gcache.keep_pages_count</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Local, Global Dynamic: Yes Default Value: 0 <p>This variable is used to limit the number of overflow pages rather than the total memory occupied by all overflow pages. Whenever <code>gcache.keep_pages_count</code> is set to a non-zero value, excess overflow pages will be deleted (starting from the oldest to the newest).</p> <p>Whenever either the <code>gcache.keep_pages_count</code> or the <code>gcache.keep_pages_size</code> variable is updated at runtime to a non-zero value, cleanup is called on excess overflow pages to delete them.</p>"},{"location":"wsrep-provider-index.html#gcachekeep_pages_size","title":"<code>gcache.keep_pages_size</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Local, Global Dynamic: No Default Value: 0 <p>This variable is used to limit the total size of overflow pages rather than the count of all overflow pages. Whenever <code>gcache.keep_pages_size</code> is set to a non-zero value, excess overflow pages will be deleted (starting from the oldest to the newest) until the total size is below the specified value.</p> <p>Whenever either the <code>gcache.keep_pages_count</code> or the <code>gcache.keep_pages_size</code> variable is updated at runtime to a non-zero value, cleanup is called on excess overflow pages to delete them.</p>"},{"location":"wsrep-provider-index.html#gcachemem_size","title":"<code>gcache.mem_size</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable has been deprecated in <code>5.6.22-25.8</code> and shouldn\u2019t be used as it could cause a node to crash.</p> <p>This variable was used to define how much RAM is available for the system.</p>"},{"location":"wsrep-provider-index.html#gcachename","title":"<code>gcache.name</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: /var/lib/mysql/galera.cache <p>This variable can be used to specify the name of the Galera cache file.</p>"},{"location":"wsrep-provider-index.html#gcachepage_size","title":"<code>gcache.page_size</code>","text":"Option Description Command Line: No Config File: Yes Scope: Global Dynamic: No Default Value: 128M <p>Size of the page files in page storage. The limit on overall page storage is the size of the disk. Pages are prefixed by gcache.page.</p> <p>See also</p> <ul> <li> <p>Galera Documentation: gcache.page_size</p> </li> <li> <p>[Percona Database Performance Blog: All You Need to Know About GCache (https://www.percona.com/blog/2016/11/16/all-you-need-to-know-about-gcache-galera-cache/)</p> </li> </ul>"},{"location":"wsrep-provider-index.html#gcacherecover","title":"<code>gcache.recover</code>","text":"Option Description Command Line: No Config File: Yes Scope: Global Dynamic: No Default Value: No <p>Attempts to recover a node\u2019s gcache file to a usable state on startup. If the node can successfully recover the gcache file, the node can provide IST to the remaining nodes. This ability can reduce the time needed to bring up the cluster.</p> <p>An example of setting the value to yes in the configuration file:</p> <pre><code>wsrep_provider_options=\"gcache.recover=yes\"\n</code></pre>"},{"location":"wsrep-provider-index.html#gcachesize","title":"<code>gcache.size</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 128M <p>Size of the transaction cache for Galera replication. This defines the size of the <code>galera.cache</code> file which is used as source for IST. The bigger the value of this variable, the better are chances that the re-joining node will get IST instead of SST.</p>"},{"location":"wsrep-provider-index.html#gcommthread_prio","title":"<code>gcomm.thread_prio</code>","text":"<p>Raises the gcomm thread priority to a higher level. Use this variable when the gcomm thread does not receive enough CPU time due to other competing threads. For example, if the gcomm threads are not frequently run, a node may drop from the cluster because of the timeout.</p> <p>The format for this variable is: &lt;policy&gt;:&lt;priority&gt;. The policy value supports the following options: <code>other</code>, <code>fifo</code>, and <code>rr</code>. The priority value is an integer.</p> <p>Note</p> <p>Setting a priority value of 99 is not recommended. This value blocks system threads.</p> <p>An example of the variable:</p> <pre><code>wsrep_provider_options=\"gcomm.thread_prio=fifo:3\"\n</code></pre> <p>The description of the <code>policy</code> parameter follows:</p> Option Description other This policy is the default Linux time-sharing scheduling. Threads run until one of the following events occur: * Thread exit  I/O request blocks the thread  Higher priority thread preempts the thread fifo The policy uses a First-in First-out (FIFO) scheduling. These threads always immediately preempt any currently running other, batch or idle threads. The threads are run in a FIFO manner until completion, unless a higher priority thread preempts or blocks them. This policy does not use time slicing. rr The threads use round-robin scheduling. This thread always preempts a currently running other, batch or idle thread. The scheduler runs threads with the same priority for a fixed time in a round-robin style. When this time period is exceeded, the scheduler stops the thread and moves it to the end of the list, and runs another round-robin thread with the same priority. <p>See also</p> <p>For information, see the Galera Cluster documentation</p>"},{"location":"wsrep-provider-index.html#gcsfc_debug","title":"<code>gcs.fc_debug</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable specifies after how many writesets the debug statistics about SST flow control will be posted.</p>"},{"location":"wsrep-provider-index.html#gcsfc_factor","title":"<code>gcs.fc_factor</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 1 <p>This variable is used for replication flow control. Replication is resumed when the replica queue drops below <code>gcs.fc_factor</code> * <code>gcs.fc_limit</code>.</p>"},{"location":"wsrep-provider-index.html#gcsfc_limit","title":"<code>gcs.fc_limit</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 100 <p>The dafaul velue has been changed from <code>16</code> to <code>100</code> in <code>5.7.17-29.20</code>.</p> <p>This variable is used for replication flow control. Replication is paused when the replica queue exceeds this limit. In the default operation mode, flow control limit is dynamically recalculated based on the amount of nodes in the cluster, but this recalculation can be turned off with use of the <code>gcs.fc_master_slave</code> variable to make manual setting of the <code>gcs.fc_limit</code> having an effect  (e.g., for configurations when writing is done to a single node in Percona XtraDB Cluster).</p>"},{"location":"wsrep-provider-index.html#gcsfc_master_slave","title":"<code>gcs.fc_master_slave</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: NO Default Value: NO <p>This variable is used to specify if there is only one source node in the cluster. It affects whether flow control limit is recalculated dynamically (when <code>NO</code>) or not (when <code>YES</code>).</p>"},{"location":"wsrep-provider-index.html#gcsmax_packet_size","title":"<code>gcs.max_packet_size</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 64500 <p>This variable is used to specify the writeset size after which they will be fragmented.</p>"},{"location":"wsrep-provider-index.html#gcsmax_throttle","title":"<code>gcs.max_throttle</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0.25 <p>This variable specifies how much the replication can be throttled during the state transfer in order to avoid running out of memory. Value can be set to <code>0.0</code> if stopping replication is acceptable in order to finish state transfer.</p>"},{"location":"wsrep-provider-index.html#gcsrecv_q_hard_limit","title":"<code>gcs.recv_q_hard_limit</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 9223372036854775807 <p>This variable specifies the maximum allowed size of the receive queue. This should normally be <code>(RAM + swap) / 2</code>. If this limit is exceeded, Galera will abort the server.</p>"},{"location":"wsrep-provider-index.html#gcsrecv_q_soft_limit","title":"<code>gcs.recv_q_soft_limit</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0.25 <p>This variable specifies the fraction of the <code>gcs.recv_q_hard_limit</code> after which replication rate will be throttled.</p>"},{"location":"wsrep-provider-index.html#gcssync_donor","title":"<code>gcs.sync_donor</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: No <p>This variable controls if the rest of the cluster should be in sync with the donor node. When this variable is set to <code>YES</code>, the whole cluster will be blocked if the donor node is blocked with SST.</p>"},{"location":"wsrep-provider-index.html#gmcastlisten_addr","title":"<code>gmcast.listen_addr</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: tcp://0.0.0.0:4567 <p>This variable defines the address on which the node listens to connections from other nodes in the cluster.</p>"},{"location":"wsrep-provider-index.html#gmcastmcast_addr","title":"<code>gmcast.mcast_addr</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: None <p>This variable should be set up if UDP multicast should be used for replication.</p>"},{"location":"wsrep-provider-index.html#gmcastmcast_ttl","title":"<code>gmcast.mcast_ttl</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 1 <p>This variable can be used to define TTL for multicast packets.</p>"},{"location":"wsrep-provider-index.html#gmcastpeer_timeout","title":"<code>gmcast.peer_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT3S <p>This variable specifies the connection timeout to initiate message relaying.</p>"},{"location":"wsrep-provider-index.html#gmcastsegment","title":"<code>gmcast.segment</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable specifies the group segment this member should be a part of. Same segment members are treated as equally physically close.</p>"},{"location":"wsrep-provider-index.html#gmcasttime_wait","title":"<code>gmcast.time_wait</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT5S <p>This variable specifies the time to wait until allowing peer declared outside of stable view to reconnect.</p>"},{"location":"wsrep-provider-index.html#gmcastversion","title":"<code>gmcast.version</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This variable shows which gmcast protocol version is being used.</p>"},{"location":"wsrep-provider-index.html#istrecv_addr","title":"<code>ist.recv_addr</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: value of <code>wsrep_node_address</code> <p>This variable specifies the address on which the node listens for Incremental State Transfer (IST).</p>"},{"location":"wsrep-provider-index.html#pcannounce_timeout","title":"<code>pc.announce_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT3S <p>Cluster joining announcements are sent every \u00bd second for this period of time or less if other nodes are discovered.</p>"},{"location":"wsrep-provider-index.html#pcchecksum","title":"<code>pc.checksum</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: true <p>This variable controls whether replicated messages should be checksummed or not.</p>"},{"location":"wsrep-provider-index.html#pcignore_quorum","title":"<code>pc.ignore_quorum</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: false <p>When this variable is set to <code>TRUE</code>, the node will completely ignore quorum calculations. This should be used with extreme caution even in source-replica setups, because replicas won\u2019t automatically reconnect to source in this case.</p>"},{"location":"wsrep-provider-index.html#pcignore_sb","title":"<code>pc.ignore_sb</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: false <p>When this variable is set to <code>TRUE</code>, the node will process updates even in the case of a split brain. This should be used with extreme caution in multi-source setup, but should simplify things in source-replica cluster (especially if only 2 nodes are used).</p>"},{"location":"wsrep-provider-index.html#pclinger","title":"<code>pc.linger</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT20S <p>This variable specifies the period for which the PC protocol waits for EVS termination.</p>"},{"location":"wsrep-provider-index.html#pcnpvo","title":"<code>pc.npvo</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: false <p>When this variable is set to <code>TRUE</code>, more recent primary components override older ones in case of conflicting primaries.</p>"},{"location":"wsrep-provider-index.html#pcrecovery","title":"<code>pc.recovery</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: true <p>When this variable is set to <code>true</code>, the node stores the Primary Component state to disk. The Primary Component can then recover automatically when all nodes that were part of the last saved state re-establish communication with each other. This feature allows automatic recovery from full cluster crashes, such as in the case of a data center power outage. A subsequent graceful full cluster restart will require explicit bootstrapping for a new Primary Component.</p>"},{"location":"wsrep-provider-index.html#pcversion","title":"<code>pc.version</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This status variable is used to check which PC protocol version is used.</p>"},{"location":"wsrep-provider-index.html#pcwait_prim","title":"<code>pc.wait_prim</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: true <p>When set to <code>TRUE</code>, the node waits for a primary component for the period of time specified in <code>pc.wait_prim_timeout</code>. This is useful to bring up a non-primary component and make it primary with <code>pc.bootstrap</code>.</p>"},{"location":"wsrep-provider-index.html#pcwait_prim_timeout","title":"<code>pc.wait_prim_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: PT30S <p>This variable is used to specify the period of time to wait for a primary component.</p>"},{"location":"wsrep-provider-index.html#pcweight","title":"<code>pc.weight</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: 1 <p>This variable specifies the node weight that\u2019s going to be used for Weighted Quorum calculations.</p>"},{"location":"wsrep-provider-index.html#protonetbackend","title":"<code>protonet.backend</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: asio <p>This variable is used to define which transport backend should be used. Currently only <code>ASIO</code> is supported.</p>"},{"location":"wsrep-provider-index.html#protonetversion","title":"<code>protonet.version</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 0 <p>This status variable is used to check which transport backend protocol version is used.</p>"},{"location":"wsrep-provider-index.html#replcausal_read_timeout","title":"<code>repl.causal_read_timeout</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: PT30S <p>This variable specifies the causal read timeout.</p>"},{"location":"wsrep-provider-index.html#replcommit_order","title":"<code>repl.commit_order</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 3 <p>This variable is used to specify out-of-order committing (which is used to improve parallel applying performance). The following values are available:</p> <ul> <li> <p><code>0</code> - BYPASS: all commit order monitoring is turned off (useful for measuring performance penalty)</p> </li> <li> <p><code>1</code> - OOOC: allow out-of-order committing for all transactions</p> </li> <li> <p><code>2</code> - LOCAL_OOOC: allow out-of-order committing only for local transactions</p> </li> <li> <p><code>3</code> - NO_OOOC: no out-of-order committing is allowed (strict total order committing)</p> </li> </ul>"},{"location":"wsrep-provider-index.html#replkey_format","title":"<code>repl.key_format</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: FLAT8 <p>This variable is used to specify the replication key format. The following values are available:</p> <ul> <li> <p><code>FLAT8</code> - short key with higher probability of key match false positives</p> </li> <li> <p><code>FLAT16</code> - longer key with lower probability of false positives</p> </li> <li> <p><code>FLAT8A</code> - same as <code>FLAT8</code> but with annotations for debug purposes</p> </li> <li> <p><code>FLAT16A</code> - same as <code>FLAT16</code> but with annotations for debug purposes</p> </li> </ul>"},{"location":"wsrep-provider-index.html#replmax_ws_size","title":"<code>repl.max_ws_size</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 2147483647 <p>This variable is used to specify the maximum size of a write-set in bytes. This is limited to 2 gygabytes.</p>"},{"location":"wsrep-provider-index.html#replproto_max","title":"<code>repl.proto_max</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 7 <p>This variable is used to specify the highest communication protocol version to accept in the cluster. Used only for debugging.</p>"},{"location":"wsrep-provider-index.html#socketchecksum","title":"<code>socket.checksum</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: 2 <p>This variable is used to choose the checksum algorithm for network packets. The following values are available:</p> <ul> <li> <p><code>0</code> - disable checksum</p> </li> <li> <p><code>1</code> - plain <code>CRC32</code> (used in Galera 2.x)</p> </li> <li> <p><code>2</code> - hardware accelerated <code>CRC32-C</code></p> </li> </ul>"},{"location":"wsrep-provider-index.html#socketssl","title":"<code>socket.ssl</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: No <p>This variable is used to specify if SSL encryption should be used.</p>"},{"location":"wsrep-provider-index.html#socketssl_ca","title":"<code>socket.ssl_ca</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No <p>This variable is used to specify the path to the Certificate Authority (CA) certificate file.</p>"},{"location":"wsrep-provider-index.html#socketssl_cert","title":"<code>socket.ssl_cert</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No <p>This variable is used to specify the path to the server\u2019s certificate file (in PEM format).</p>"},{"location":"wsrep-provider-index.html#socketssl_key","title":"<code>socket.ssl_key</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No <p>This variable is used to specify the path to the server\u2019s private key file (in PEM format).</p>"},{"location":"wsrep-provider-index.html#socketssl_compression","title":"<code>socket.ssl_compression</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: Yes <p>This variable is used to specify if the SSL compression is to be used.</p>"},{"location":"wsrep-provider-index.html#socketssl_cipher","title":"<code>socket.ssl_cipher</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: No Default Value: AES128-SHA <p>This variable is used to specify what cypher will be used for encryption.</p>"},{"location":"wsrep-status-index.html","title":"Index of wsrep status variables","text":""},{"location":"wsrep-status-index.html#wsrep_apply_oooe","title":"<code>wsrep_apply_oooe</code>","text":"<p>This variable shows parallelization efficiency, how often writests have been applied out of order.</p>"},{"location":"wsrep-status-index.html#wsrep_apply_oool","title":"<code>wsrep_apply_oool</code>","text":"<p>This variable shows how often a writeset with a higher sequence number was applied before one with a lower sequence number.</p>"},{"location":"wsrep-status-index.html#wsrep_apply_window","title":"<code>wsrep_apply_window</code>","text":"<p>Average distance between highest and lowest concurrently applied sequence numbers.</p>"},{"location":"wsrep-status-index.html#wsrep_causal_reads","title":"<code>wsrep_causal_reads</code>","text":"<p>Shows the number of writesets processed while the variable <code>wsrep_causal_reads</code> was set to <code>ON</code>.</p>"},{"location":"wsrep-status-index.html#wsrep_cert_bucket_count","title":"<code>wsrep_cert_bucket_count</code>","text":"<p>This variable, shows the number of cells in the certification index hash-table.</p>"},{"location":"wsrep-status-index.html#wsrep_cert_deps_distance","title":"<code>wsrep_cert_deps_distance</code>","text":"<p>Average distance between highest and lowest sequence number that can be possibly applied in parallel.</p>"},{"location":"wsrep-status-index.html#wsrep_cert_index_size","title":"<code>wsrep_cert_index_size</code>","text":"<p>Number of entries in the certification index.</p>"},{"location":"wsrep-status-index.html#wsrep_cert_interval","title":"<code>wsrep_cert_interval</code>","text":"<p>Average number of write-sets received while a transaction replicates.</p>"},{"location":"wsrep-status-index.html#wsrep_cluster_conf_id","title":"<code>wsrep_cluster_conf_id</code>","text":"<p>Number of cluster membership changes that have taken place.</p>"},{"location":"wsrep-status-index.html#wsrep_cluster_size","title":"<code>wsrep_cluster_size</code>","text":"<p>Current number of nodes in the cluster.</p>"},{"location":"wsrep-status-index.html#wsrep_cluster_state_uuid","title":"<code>wsrep_cluster_state_uuid</code>","text":"<p>This variable contains UUID state of the cluster. When this value is the same as the one in <code>wsrep_local_state_uuid</code>, node is synced with the cluster.</p>"},{"location":"wsrep-status-index.html#wsrep_cluster_status","title":"<code>wsrep_cluster_status</code>","text":"<p>Status of the cluster component. Possible values are:</p> <ul> <li> <p><code>Primary</code></p> </li> <li> <p><code>Non-Primary</code></p> </li> <li> <p><code>Disconnected</code></p> </li> </ul>"},{"location":"wsrep-status-index.html#wsrep_commit_oooe","title":"<code>wsrep_commit_oooe</code>","text":"<p>This variable shows how often a transaction was committed out of order.</p>"},{"location":"wsrep-status-index.html#wsrep_commit_oool","title":"<code>wsrep_commit_oool</code>","text":"<p>This variable currently has no meaning.</p>"},{"location":"wsrep-status-index.html#wsrep_commit_window","title":"<code>wsrep_commit_window</code>","text":"<p>Average distance between highest and lowest concurrently committed sequence number.</p>"},{"location":"wsrep-status-index.html#wsrep_connected","title":"<code>wsrep_connected</code>","text":"<p>This variable shows if the node is connected to the cluster. If the value is <code>OFF</code>, the node has not yet connected to any of the cluster components. This may be due to misconfiguration.</p>"},{"location":"wsrep-status-index.html#wsrep_evs_delayed","title":"<code>wsrep_evs_delayed</code>","text":"<p>Comma separated list of nodes that are considered delayed. The node format is <code>&lt;uuid&gt;:&lt;address&gt;:&lt;count&gt;</code>, where <code>&lt;count&gt;</code> is the number of entries on delayed list for that node.</p>"},{"location":"wsrep-status-index.html#wsrep_evs_evict_list","title":"<code>wsrep_evs_evict_list</code>","text":"<p>List of UUIDs of the evicted nodes.</p>"},{"location":"wsrep-status-index.html#wsrep_evs_repl_latency","title":"<code>wsrep_evs_repl_latency</code>","text":"<p>This status variable provides information regarding group communication replication latency. This latency is measured in seconds from when a message is sent out to when a message is received.</p> <p>The format of the output is <code>&lt;min&gt;/&lt;avg&gt;/&lt;max&gt;/&lt;std_dev&gt;/&lt;sample_size&gt;</code>.</p>"},{"location":"wsrep-status-index.html#wsrep_evs_state","title":"<code>wsrep_evs_state</code>","text":"<p>Internal EVS protocol state.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_interval","title":"<code>wsrep_flow_control_interval</code>","text":"<p>This variable shows the lower and upper limits for Galera flow control. The upper limit is the maximum allowed number of requests in the queue. If the queue reaches the upper limit, new requests are denied. As existing requests get processed, the queue decreases, and once it reaches the lower limit, new requests will be allowed again.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_interval_high","title":"<code>wsrep_flow_control_interval_high</code>","text":"<p>Shows the upper limit for flow control to trigger.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_interval_low","title":"<code>wsrep_flow_control_interval_low</code>","text":"<p>Shows the lower limit for flow control to stop.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_paused","title":"<code>wsrep_flow_control_paused</code>","text":"<p>Time since the last status query that was paused due to flow control.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_paused_ns","title":"<code>wsrep_flow_control_paused_ns</code>","text":"<p>Total time spent in a paused state measured in nanoseconds.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_recv","title":"<code>wsrep_flow_control_recv</code>","text":"<p>The number of <code>FC_PAUSE</code> events received since the last status query. Unlike most status variables, this counter does not reset each time you run the query. This counter is reset when the server restarts.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_requested","title":"<code>wsrep_flow_control_requested</code>","text":"<p>This variable returns whether or not a node requested a replication pause.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_status","title":"<code>wsrep_flow_control_status</code>","text":"<p>The number of <code>FC_PAUSE</code> events sent since the last status query. Unlike most status variables, this counter does not reset each time you run the query. This counter is reset when the server restarts.</p>"},{"location":"wsrep-status-index.html#wsrep_flow_control_sent","title":"<code>wsrep_flow_control_sent</code>","text":"<p>This variable has been implemented in <code>5.7.17-29.20</code>. The variable shows whether a node has flow control enabled for normal traffic. It does not indicate the status of flow control during SST.</p>"},{"location":"wsrep-status-index.html#wsrep_gcache_pool_size","title":"<code>wsrep_gcache_pool_size</code>","text":"<p>This variable shows the size of the page pool and dynamic memory allocated for GCache (in bytes).</p>"},{"location":"wsrep-status-index.html#wsrep_gcomm_uuid","title":"<code>wsrep_gcomm_uuid</code>","text":"<p>This status variable exposes UUIDs in <code>gvwstate.dat</code>, which are Galera view IDs (thus unrelated to cluster state UUIDs). This UUID is unique for each node. You will need to know this value when using manual eviction feature.</p>"},{"location":"wsrep-status-index.html#wsrep_incoming_addresses","title":"<code>wsrep_incoming_addresses</code>","text":"<p>Shows the comma-separated list of incoming node addresses in the cluster.</p>"},{"location":"wsrep-status-index.html#wsrep_ist_receive_status","title":"<code>wsrep_ist_receive_status</code>","text":"<p>This variable has been implemented in <code>5.7.17-29.20</code>. Displays the progress of IST for joiner node. If IST is not running, the value is blank. If IST is running, the value is the percentage of transfer completed.</p>"},{"location":"wsrep-status-index.html#wsrep_ist_receive_seqno_end","title":"<code>wsrep_ist_receive_seqno_end</code>","text":"<p>The sequence number of the last transaction in IST.</p>"},{"location":"wsrep-status-index.html#wsrep_ist_receive_seqno_current","title":"<code>wsrep_ist_receive_seqno_current</code>","text":"<p>The sequence number of the current transaction in IST.</p>"},{"location":"wsrep-status-index.html#wsrep_ist_receive_seqno_start","title":"<code>wsrep_ist_receive_seqno_start</code>","text":"<p>The sequence number of the first transaction in IST.</p>"},{"location":"wsrep-status-index.html#wsrep_last_applied","title":"<code>wsrep_last_applied</code>","text":"<p>This variable has been implemented in <code>5.7.20-29.24</code>. Sequence number of the last applied transaction.</p>"},{"location":"wsrep-status-index.html#wsrep_last_committed","title":"<code>wsrep_last_committed</code>","text":"<p>Sequence number of the last committed transaction.</p>"},{"location":"wsrep-status-index.html#wsrep_local_bf_aborts","title":"<code>wsrep_local_bf_aborts</code>","text":"<p>Number of local transactions that were aborted by replica transactions while being executed.</p>"},{"location":"wsrep-status-index.html#wsrep_local_cached_downto","title":"<code>wsrep_local_cached_downto</code>","text":"<p>The lowest sequence number in GCache. This information can be helpful with determining IST and SST. If the value is <code>0</code>, then it means there are no writesets in GCache (usual for a single node).</p>"},{"location":"wsrep-status-index.html#wsrep_local_cert_failures","title":"<code>wsrep_local_cert_failures</code>","text":"<p>Number of writesets that failed the certification test.</p>"},{"location":"wsrep-status-index.html#wsrep_local_commits","title":"<code>wsrep_local_commits</code>","text":"<p>Number of writesets commited on the node.</p>"},{"location":"wsrep-status-index.html#wsrep_local_index","title":"<code>wsrep_local_index</code>","text":"<p>Node\u2019s index in the cluster.</p>"},{"location":"wsrep-status-index.html#wsrep_local_recv_queue","title":"<code>wsrep_local_recv_queue</code>","text":"<p>Current length of the receive queue (that is, the number of writesets waiting to be applied).</p>"},{"location":"wsrep-status-index.html#wsrep_local_recv_queue_avg","title":"<code>wsrep_local_recv_queue_avg</code>","text":"<p>Average length of the receive queue since the last status query. When this number is bigger than <code>0</code> this means node can\u2019t apply writesets as fast as they are received. This could be a sign that the node is overloaded and it may cause replication throttling.</p>"},{"location":"wsrep-status-index.html#wsrep_local_replays","title":"<code>wsrep_local_replays</code>","text":"<p>Number of transaction replays due to asymmetric lock granularity.</p>"},{"location":"wsrep-status-index.html#wsrep_local_send_queue","title":"<code>wsrep_local_send_queue</code>","text":"<p>Current length of the send queue (that is, the number of writesets waiting to be sent).</p>"},{"location":"wsrep-status-index.html#wsrep_local_send_queue_avg","title":"<code>wsrep_local_send_queue_avg</code>","text":"<p>Average length of the send queue since the last status query. When cluster experiences network throughput issues or replication throttling, this value will be significantly bigger than <code>0</code>.</p>"},{"location":"wsrep-status-index.html#wsrep_local_state","title":"<code>wsrep_local_state</code>","text":""},{"location":"wsrep-status-index.html#wsrep_local_state_comment","title":"<code>wsrep_local_state_comment</code>","text":"<p>Internal number and the corresponding human-readable comment of the node\u2019s state. Possible values are:</p> Num Comment Description 1 Joining Node is joining the cluster 2 Donor/Desynced Node is the donor to the node joining the cluster 3 Joined Node has joined the cluster 4 Synced Node is synced with the cluster"},{"location":"wsrep-status-index.html#wsrep_local_state_uuid","title":"<code>wsrep_local_state_uuid</code>","text":"<p>The UUID of the state stored on the node.</p>"},{"location":"wsrep-status-index.html#wsrep_protocol_version","title":"<code>wsrep_protocol_version</code>","text":"<p>Version of the wsrep protocol used.</p>"},{"location":"wsrep-status-index.html#wsrep_provider_name","title":"<code>wsrep_provider_name</code>","text":"<p>Name of the wsrep provider (usually <code>Galera</code>).</p>"},{"location":"wsrep-status-index.html#wsrep_provider_vendor","title":"<code>wsrep_provider_vendor</code>","text":"<p>Name of the wsrep provider vendor (usually <code>Codership Oy</code>)</p>"},{"location":"wsrep-status-index.html#wsrep_provider_version","title":"<code>wsrep_provider_version</code>","text":"<p>Current version of the wsrep provider.</p>"},{"location":"wsrep-status-index.html#wsrep_ready","title":"<code>wsrep_ready</code>","text":"<p>This variable shows if node is ready to accept queries. If status is <code>OFF</code>, almost all queries will fail with <code>ERROR 1047 (08S01) Unknown Command</code> error (unless the <code>wsrep_on</code> variable is set to <code>0</code>).</p>"},{"location":"wsrep-status-index.html#wsrep_received","title":"<code>wsrep_received</code>","text":"<p>Total number of writesets received from other nodes.</p>"},{"location":"wsrep-status-index.html#wsrep_received_bytes","title":"<code>wsrep_received_bytes</code>","text":"<p>Total size (in bytes) of writesets received from other nodes.</p>"},{"location":"wsrep-status-index.html#wsrep_repl_data_bytes","title":"<code>wsrep_repl_data_bytes</code>","text":"<p>Total size (in bytes) of data replicated.</p>"},{"location":"wsrep-status-index.html#wsrep_repl_keys","title":"<code>wsrep_repl_keys</code>","text":"<p>Total number of keys replicated.</p>"},{"location":"wsrep-status-index.html#wsrep_repl_keys_bytes","title":"<code>wsrep_repl_keys_bytes</code>","text":"<p>Total size (in bytes) of keys replicated.</p>"},{"location":"wsrep-status-index.html#wsrep_repl_other_bytes","title":"<code>wsrep_repl_other_bytes</code>","text":"<p>Total size of other bits replicated.</p>"},{"location":"wsrep-status-index.html#wsrep_replicated","title":"<code>wsrep_replicated</code>","text":"<p>Total number of writesets sent to other nodes.</p>"},{"location":"wsrep-status-index.html#wsrep_replicated_bytes","title":"<code>wsrep_replicated_bytes</code>","text":"<p>Total size (in bytes) of writesets sent to other nodes.</p>"},{"location":"wsrep-system-index.html","title":"Index of wsrep system variables","text":"<p>Percona XtraDB Cluster introduces a number of MySQL system variables related to write-set replication.</p>"},{"location":"wsrep-system-index.html#pxc_encrypt_cluster_traffic","title":"<code>pxc_encrypt_cluster_traffic</code>","text":"Option Description Command Line: <code>--pxc-encrypt-cluster-traffic</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>OFF</code> <p>This variable has been implemented in <code>5.7.16</code>. Enables automatic configuration of SSL encryption. When disabled, you need to configure SSL manually to encrypt Percona XtraDB Cluster traffic.</p> <p>Possible values:</p> <ul> <li> <p><code>OFF</code>, <code>0</code>, <code>false</code>: Disabled (default)</p> </li> <li> <p><code>ON</code>, <code>1</code>, <code>true</code>: Enabled</p> </li> </ul> <p>For more information, see SSL Automatic Configuration.</p>"},{"location":"wsrep-system-index.html#pxc_maint_mode","title":"<code>pxc_maint_mode</code>","text":"Option Description Command Line: <code>--pxc-maint-mode</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>DISABLED</code> <p>This variable has been implemented in <code>5.7.16</code>. Specifies the maintenance mode for taking a node down without adjusting settings in ProxySQL.</p> <p>The following values are available:</p> <ul> <li> <p><code>DISABLED</code>: This is the default state that tells ProxySQL to route traffic to the node as usual.</p> </li> <li> <p><code>SHUTDOWN</code>: This state is set automatically when you initiate node shutdown.</p> </li> <li> <p><code>MAINTENANCE</code>: You can manually change to this state if you need to perform maintenance on a node without shutting it down.</p> </li> </ul> <p>For more information, see Assisted Maintenance Mode.</p>"},{"location":"wsrep-system-index.html#pxc_maint_transition_period","title":"<code>pxc_maint_transition_period</code>","text":"Option Description Command Line: <code>--pxc-maint-transition-period</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>10</code> (ten seconds) <p>This variable has been implemented in <code>5.7.16</code>. Defines the transition period when you change <code>pxc_maint_mode</code> to <code>SHUTDOWN</code>. By default, the period is set to 10 seconds, which should be enough for most transactions to finish. You can increase the value to accommodate for longer-running transactions.</p> <p>For more information, see Assisted Maintenance Mode.</p>"},{"location":"wsrep-system-index.html#pxc_strict_mode","title":"<code>pxc_strict_mode</code>","text":"Option Description Command Line: <code>--pxc-strict-mode</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>ENFORCING</code> or <code>DISABLED</code> <p>This variable has been implemented in <code>5.7</code>.Controls PXC Strict Mode, which runs validations to avoid the use of experimental and unsupported features in Percona XtraDB Cluster.</p> <p>Depending on the actual mode you select, upon encountering a failed validation, the server will either throw an error (halting startup or denying the operation), or log a warning and continue running as normal. The following modes are available:</p> <ul> <li> <p><code>DISABLED</code>: Do not perform strict mode validations and run as normal.</p> </li> <li> <p><code>PERMISSIVE</code>: If a validation fails, log a warning and continue running as normal.</p> </li> <li> <p><code>ENFORCING</code>: If a validation fails during startup, halt the server and throw an error. If a validation fails during runtime, deny the operation and throw an error.</p> </li> <li> <p><code>MASTER</code>: The same as <code>ENFORCING</code> except that the validation of explicit table locking is not performed. This mode can be used with clusters in which write operations are isolated to a single node.</p> </li> </ul> <p>By default, <code>pxc_strict_mode</code> is set to <code>ENFORCING</code>, except if the node is acting as a standalone server or the node is bootstrapping, then <code>pxc_strict_mode</code> defaults to <code>DISABLED</code>.</p> <p>Note</p> <p>When changing the value of <code>pxc_strict_mode</code> from <code>DISABLED</code> or <code>PERMISSIVE</code> to <code>ENFORCING</code> or <code>MASTER</code>, ensure that the following configuration is used:</p> <ul> <li> <p><code>wsrep_replicate_myisam=OFF</code></p> </li> <li> <p><code>binlog_format=ROW</code></p> </li> <li> <p><code>log_output=FILE</code> or <code>log_output=NONE</code> or <code>log_output=FILE,NONE</code></p> </li> </ul> <p>The <code>SERIALIZABLE</code> method of isolation is not allowed in <code>ENFORCING</code> mode.</p> <p>For more information, see PXC Strict Mode.</p>"},{"location":"wsrep-system-index.html#wsrep_auto_increment_control","title":"<code>wsrep_auto_increment_control</code>","text":"Option Description Command Line: <code>--wsrep-auto-increment-control</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>ON</code> <p>Enables automatic adjustment of auto-increment system variables depending on the size of the cluster:</p> <ul> <li> <p><code>auto_increment_increment</code> controls the interval between successive <code>AUTO_INCREMENT</code> column values</p> </li> <li> <p><code>auto_increment_offset</code> determines the starting point for the <code>AUTO_INCREMENT</code> column value</p> </li> </ul> <p>This helps prevent auto-increment replication conflicts across the cluster   by giving each node its own range of auto-increment values.   It is enabled by default.</p> <p>Automatic adjustment may not be desirable depending on application\u2019s use   and assumptions of auto-increments.   It can be disabled in source-replica clusters.</p>"},{"location":"wsrep-system-index.html#wsrep_causal_reads","title":"<code>wsrep_causal_reads</code>","text":"Option Description Command Line: <code>--wsrep-causal-reads</code> Config File: Yes Scope: Global, Session Dynamic: Yes Default Value: <code>OFF</code> <p>This variable has been implemented in <code>5.6.20-25.7</code>. In some cases, the source may apply events faster than a replica, which can cause source and replica to become out of sync for a brief moment. When this variable is set to <code>ON</code>, the replica will wait until that event is applied before doing any other queries. Enabling this variable will result in larger latencies.</p> <p>Note</p> <p>This variable was deprecated because enabling it is the equivalent of setting <code>wsrep_sync_wait</code> to <code>1</code>.</p>"},{"location":"wsrep-system-index.html#wsrep_certify_nonpk","title":"<code>wsrep_certify_nonPK</code>","text":"Option Description Command Line: <code>--wsrep-certify-nonpk</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>ON</code> <p>Enables automatic generation of primary keys for rows that don\u2019t have them. Write set replication requires primary keys on all tables to allow for parallel applying of transactions. This variable is enabled by default. As a rule, make sure that all tables have primary keys.</p>"},{"location":"wsrep-system-index.html#wsrep_cluster_address","title":"<code>wsrep_cluster_address</code>","text":"Option Description Command Line: <code>--wsrep-cluster-address</code> Config File: Yes Scope: Global Dynamic: Yes <p>Defines the back-end schema, IP addresses, ports, and options that the node uses when connecting to the cluster. This variable needs to specify at least one other node\u2019s address, which is alive and a member of the cluster. In practice, it is best (but not necessary) to provide a complete list of all possible cluster nodes. The value should be of the following format:</p> <pre><code>&lt;schema&gt;://&lt;address&gt;[?&lt;option1&gt;=&lt;value1&gt;[&amp;&lt;option2&gt;=&lt;value2&gt;]],...\n</code></pre> <p>The only back-end schema currently supported is <code>gcomm</code>. The IP address can contain a port number after a colon. Options are specified after <code>?</code> and separated by <code>&amp;</code>. You can specify multiple addresses separated by commas.</p> <p>For example:</p> <pre><code>wsrep_cluster_address=\"gcomm://192.168.0.1:4567?gmcast.listen_addr=0.0.0.0:5678\"\n</code></pre> <p>If an empty <code>gcomm://</code> is provided, the node will bootstrap itself (that is, form a new cluster). It is not recommended to have empty cluster address in production config after the cluster has been bootstrapped initially. If you want to bootstrap a new cluster with a node, you should pass the <code>--wsrep-new-cluster</code> option when starting.</p>"},{"location":"wsrep-system-index.html#wsrep_cluster_name","title":"<code>wsrep_cluster_name</code>","text":"Option Description Command Line: <code>--wsrep-cluster-name</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>my_wsrep_cluster</code> <p>Specifies the name of the cluster and must be identical on all nodes. A node checks the value when attempting to connect to the cluster. If the names match, the node connects. </p> <p>Edit the value in the <code>my.cnf</code> in the [galera] section.</p> <pre><code>[galera]\n\n    wsrep_cluster_name=simple-cluster\n</code></pre> <p>Execute <code>SHOW VARIABLES</code> with the LIKE operator to view the variable:</p> <pre><code>mysql&gt; SHOW VARIABLES LIKE 'wsrep_cluster_name';\n</code></pre> Expected output <pre><code>+--------------------+----------------+\n| Variable_name      | Value          |\n+--------------------+----------------+\n| wsrep_cluster_name | simple-cluster |\n+--------------------+----------------+\n</code></pre> <p>Note</p> <p>It should not exceed 32 characters. A node cannot join the cluster if the cluster names do not match. You must re-bootstrap the cluster after a name change.</p>"},{"location":"wsrep-system-index.html#wsrep_convert_lock_to_trx","title":"<code>wsrep_convert_lock_to_trx</code>","text":"Option Description Command Line: <code>--wsrep-convert-lock-to-trx</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>This variable has been deprecated in <code>5.7.23-31.31</code>. Defines whether locking sessions should be converted into transactions. By default, this is disabled.</p> <p>Enabling this variable can help older applications to work in a multi-source setup by converting <code>LOCK/UNLOCK TABLES</code> statements into <code>BEGIN/COMMIT</code> statements. It is not the same as support for locking sessions, but it does prevent the database from ending up in a logically inconsistent state. Enabling this variable can also result in having huge write-sets.</p>"},{"location":"wsrep-system-index.html#wsrep_data_home_dir","title":"<code>wsrep_data_home_dir</code>","text":"Option Description Command Line: No Config File: Yes Scope: Global Dynamic: No Default Value: <code>/var/lib/mysql</code> (or whatever path is specified by <code>datadir</code>) <p>Specifies the path to the directory where the wsrep provider stores its files (such as <code>grastate.dat</code>).</p>"},{"location":"wsrep-system-index.html#wsrep_dbug_option","title":"<code>wsrep_dbug_option</code>","text":"Option Description Command Line: <code>--wsrep-dbug-option</code> Config File: Yes Scope: Global Dynamic: Yes <p>Defines <code>DBUG</code> options to pass to the wsrep provider.</p>"},{"location":"wsrep-system-index.html#wsrep_debug","title":"<code>wsrep_debug</code>","text":"Option Description Command Line: <code>--wsrep-debug</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>Enables additional debugging output for the database server error log. By default, it is disabled. This variable can be used when trying to diagnose problems or when submitting a bug.</p> <p>You can set <code>wsrep_debug</code> in the following <code>my.cnf</code> groups:</p> <ul> <li> <p>Under <code>[mysqld]</code> it enables debug logging for <code>mysqld</code> and the SST script</p> </li> <li> <p>Under <code>[sst]</code> it enables debug logging for the SST script only</p> </li> </ul> <p>Note</p> <p>Do not enable debugging in production environments, because it logs authentication info (that is, passwords).</p>"},{"location":"wsrep-system-index.html#wsrep_desync","title":"<code>wsrep_desync</code>","text":"Option Description Command Line: No Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>Defines whether the node should participate in Flow Control. By default, this variable is disabled, meaning that if the receive queue becomes too big, the node engages in Flow Control: it works through the receive queue until it reaches a more manageable size. For more information, see <code>wsrep_local_recv_queue</code> and <code>wsrep_flow_control_interval</code>.</p> <p>Enabling this variable will disable Flow Control for the node. It will continue to receive write-sets that it is not able to apply, the receive queue will keep growing, and the node will keep falling behind the cluster indefinitely.</p> <p>Toggling this back to <code>OFF</code> will require an IST or an SST, depending on how long it was desynchronized. This is similar to cluster desynchronization, which occurs during RSU TOI. Because of this, it\u2019s not a good idea to enable <code>wsrep_desync</code> for a long period of time or for several nodes at once.</p> <p>Note</p> <p>You can also desync a node using the <code>/\\*! WSREP_DESYNC \\*/</code> query comment.</p>"},{"location":"wsrep-system-index.html#wsrep_dirty_reads","title":"<code>wsrep_dirty_reads</code>","text":"Option Description Command Line: <code>--wsrep-dirty-reads</code> Config File: Yes Scope: Session, Global Dynamic: Yes Default Value: <code>OFF</code> <p>Defines whether the node accepts read queries when in a non-operational state, that is, when it loses connection to the Primary Component. By default, this variable is disabled and the node rejects all queries, because there is no way to tell if the data is correct.</p> <p>If you enable this variable, the node will permit read queries (<code>USE</code>, <code>SELECT</code>, <code>LOCK TABLE</code>, and <code>UNLOCK TABLES</code>), but any command that modifies or updates the database on a non-operational node will still be rejected (including DDL and DML statements, such as <code>INSERT</code>, <code>DELETE</code>, and <code>UPDATE</code>).</p> <p>To avoid deadlock errors, set the <code>wsrep_sync_wait</code> variable to <code>0</code> if you enable <code>wsrep_dirty_reads</code>.</p>"},{"location":"wsrep-system-index.html#wsrep_drupal_282555_workaround","title":"<code>wsrep_drupal_282555_workaround</code>","text":"Option Description Command Line: <code>--wsrep-drupal-282555-workaround</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>This variable has been announced as deprecated in <code>5.7.24-31.33</code>. Enables a workaround for MySQL InnoDB bug that affects Drupal (Drupal bug #282555 and MySQL bug #41984). In some cases, duplicate key errors would occur when inserting the <code>DEFAULT</code> value into an <code>AUTO_INCREMENT</code> column.</p>"},{"location":"wsrep-system-index.html#wsrep_forced_binlog_format","title":"<code>wsrep_forced_binlog_format</code>","text":"Option Description Command Line: <code>--wsrep-forced-binlog-format</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>NONE</code> <p>This variable has been announced as deprecated in <code>5.7.22-29.26</code>. Defines a binary log format that will always be effective, regardless of the client session <code>binlog_format</code> variable value.</p> <p>Possible values for this variable are:</p> <ul> <li> <p><code>ROW</code>: Force row-based logging format</p> </li> <li> <p><code>STATEMENT</code>: Force statement-based logging format</p> </li> <li> <p><code>MIXED</code>: Force mixed logging format</p> </li> <li> <p><code>NONE</code>: Do not force the binary log format and use whatever is set by the <code>binlog_format</code> variable (default)</p> </li> </ul>"},{"location":"wsrep-system-index.html#wsrep_load_data_splitting","title":"<code>wsrep_load_data_splitting</code>","text":"Option Description Command Line: <code>--wsrep-load-data-splitting</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>ON</code> <p>Defines whether the node should split large <code>LOAD DATA</code> transactions. This variable is enabled by default, meaning that <code>LOAD DATA</code> commands are split into transactions of 10 000 rows or less.</p> <p>If you disable this variable, then huge data loads may prevent the node from completely rolling the operation back in the event of a conflict, and whatever gets committed stays committed.</p> <p>Note</p> <p>It doesn\u2019t work as expected with <code>autocommit=0</code> when enabled.</p>"},{"location":"wsrep-system-index.html#wsrep_log_conflicts","title":"<code>wsrep_log_conflicts</code>","text":"Option Description Command Line: <code>--wsrep-log-conflicts</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>OFF</code> <p>Defines whether the node should log additional information about conflicts. By default, this variable is disabled and Percona XtraDB Cluster uses standard logging features in MySQL.</p> <p>If you enable this variable, it will also log table and schema where the conflict occurred, as well as the actual values for keys that produced the conflict.</p>"},{"location":"wsrep-system-index.html#wsrep_max_ws_rows","title":"<code>wsrep_max_ws_rows</code>","text":"Option Description Command Line: <code>--wsrep-max-ws-rows</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>0</code> (no limit) <p>Defines the maximum number of rows each write-set can contain.</p> <p>By default, there is no limit for the maximum number of rows in a write-set. The maximum allowed value is <code>1048576</code>.</p>"},{"location":"wsrep-system-index.html#wsrep_max_ws_size","title":"<code>wsrep_max_ws_size</code>","text":"Option Description Command Line: <code>--wsrep_max_ws_size</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>2147483647</code> (2 GB) <p>Defines the maximum write-set size (in bytes). Anything bigger than the specified value will be rejected.</p> <p>You can set it to any value between <code>1024</code> and the default <code>2147483647</code>.</p>"},{"location":"wsrep-system-index.html#wsrep_node_address","title":"<code>wsrep_node_address</code>","text":"Option Description Command Line: <code>--wsrep-node-address</code> Config File: Yes Scope: Global Dynamic: No Default Value: IP of the first network interface (<code>eth0</code>) and default port (<code>4567</code>) <p>Specifies the network address of the node. By default, this variable is set to the IP address of the first network interface (usually <code>eth0</code> or <code>enp2s0</code>) and the default port (<code>4567</code>).</p> <p>While default value should be correct in most cases, there are situations when you need to specify it manually. For example:</p> <ul> <li> <p>Servers with multiple network interfaces</p> </li> <li> <p>Servers that run multiple nodes</p> </li> <li> <p>Network Address Translation (NAT)</p> </li> <li> <p>Clusters with nodes in more than one region</p> </li> <li> <p>Container deployments, such as Docker</p> </li> <li> <p>Cloud deployments, such as Amazon EC2 (use the global DNS name instead of the local IP address)</p> </li> </ul> <p>The value should be specified in the following format:</p> <pre><code>&lt;ip_address&gt;[:port]\n</code></pre> <p>Note</p> <p>The value of this variable is also used as the default value for the <code>wsrep_sst_receive_address</code> variable and the <code>ist.recv_addr</code> option.</p>"},{"location":"wsrep-system-index.html#wsrep_node_incoming_address","title":"<code>wsrep_node_incoming_address</code>","text":"Option Description Command Line: <code>--wsrep-node-incoming-address</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>AUTO</code> <p>Specifies the network address from which the node expects client connections. By default, it uses the IP address from <code>wsrep_node_address</code> and port number 3306.</p> <p>This information is used for the <code>wsrep_incoming_addresses</code> variable which shows all active cluster nodes.</p>"},{"location":"wsrep-system-index.html#wsrep_node_name","title":"<code>wsrep_node_name</code>","text":"Option Description Command Line: <code>--wsrep-node-name</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: The node\u2019s host name <p>Defines a unique name for the node. Defaults to the host name.</p> <p>In many situations, you may use the value of this variable as a means to identify the given node in the cluster as the alternative to using the node address (the value of the <code>wsrep_node_address</code>).</p> <p>Note</p> <p>The variable <code>wsrep_sst_donor</code> is an example where you may only use the value of <code>wsrep_node_name</code> and the node address is not permitted.</p>"},{"location":"wsrep-system-index.html#wsrep_notify_cmd","title":"<code>wsrep_notify_cmd</code>","text":"Option Description Command Line: <code>--wsrep-notify-cmd</code> Config File: Yes Scope: Global Dynamic: No <p>Specifies the notification command that the node should execute whenever cluster membership or local node status changes. This can be used for alerting or to reconfigure load balancers.</p> <p>Note</p> <p>The node will block and wait until the command or script completes and returns before it can proceed. If the script performs any potentially blocking or long-running operations, such as network communication, you should consider initiating such operations in the background and have the script return immediately.</p>"},{"location":"wsrep-system-index.html#wsrep_on","title":"<code>wsrep_on</code>","text":"Option Description Command Line: No Config File: No Scope: Session Dynamic: Yes Default Value: <code>ON</code> <p>Defines if current session transaction changes for a node are replicated to the cluster.</p> <p>If set to <code>OFF</code> for a session, no transaction changes are replicated in that session. The setting does not cause the node to leave the cluster, and the node communicates with other nodes.</p>"},{"location":"wsrep-system-index.html#wsrep_osu_method","title":"<code>wsrep_OSU_method</code>","text":"Option Description Command Line: <code>--wsrep-OSU-method</code> Config File: Yes Scope: Global, Session Dynamic: Yes Default Value: <code>TOI</code> <p>Defines the method for Online Schema Upgrade that the node uses to replicate DDL statements. The following methods are available:</p> <p><code>TOI</code>: When the Total Order Isolation method is selected, data definition language (DDL) statements are processed in the same order with regards to other transactions in each node. This guarantees data consistency.</p> <p>In the case of DDL statements, the cluster will have parts of the database locked and it will behave like a single server. In some cases (like big <code>ALTER TABLE</code>) this could have impact on cluster\u2019s performance and availability, but it could be fine for quick changes that happen almost instantly (like fast index changes).</p> <p>When DDL statements are processed under TOI, the DDL statement will be replicated up front to the cluster. That is, the cluster will assign global transaction ID for the DDL statement before DDL processing begins. Then every node in the cluster has the responsibility to execute the DDL statement in the given slot in the sequence of incoming transactions, and this DDL execution has to happen with high priority.</p> <p>Important</p> <p>Under the <code>TOI</code> method, when DDL operations are performed, <code>MDL</code> is ignored. If <code>MDL</code> is important, use the <code>RSU</code> method.</p> <p><code>RSU</code>:  When the Rolling Schema Upgrade method is selected, DDL statements won\u2019t be replicated across the cluster. Instead, it\u2019s up to the user to run them on each node separately.</p> <p>The node applying the changes will desynchronize from the cluster briefly, while normal work happens on all the other nodes. When a DDL statement is processed, the node will apply delayed replication events.</p> <p>The schema changes must be backwards compatible for this method to work, otherwise, the node that receives the change will likely break Galera replication. If replication breaks, SST will be triggered when the node tries to join again but the change will be undone.</p> <p>Note</p> <p>This variable\u2019s behavior is consistent with MySQL behavior for variables that have both global and session scope. This means if you want to change the variable in current session, you need to do it with <code>SET wsrep_OSU_method</code> (without the <code>GLOBAL</code> keyword). Setting the variable with <code>SET GLOBAL wsrep_OSU_method</code> will change the variable globally but it won\u2019t have effect on the current session.</p>"},{"location":"wsrep-system-index.html#wsrep_preordered","title":"<code>wsrep_preordered</code>","text":"Option Description Command Line: <code>--wsrep-preordered</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>This variable has been announced as deprecated in <code>5.7.24-31.33</code>. Defines whether the node should use transparent handling of preordered replication events (like replication from traditional source). By default, this is disabled.</p> <p>If you enable this variable, such events will be applied locally first before being replicated to other nodes in the cluster. This could increase the rate at which they can be processed, which would be otherwise limited by the latency between the nodes in the cluster.</p> <p>Preordered events should not interfere with events that originate on the local node. Therefore, you should not run local update queries on a table that is also being updated through asynchronous replication.</p>"},{"location":"wsrep-system-index.html#wsrep_provider","title":"<code>wsrep_provider</code>","text":"Option Description Command Line: <code>--wsrep-provider</code> Config File: Yes Scope: Global Dynamic: No <p>Specifies the path to the Galera library. This is usually <code>/usr/lib64/libgalera_smm.so</code> on CentOS/RHEL and <code>/usr/lib/libgalera_smm.so</code> on Debian/Ubuntu.</p> <p>If you do not specify a path or the value is not valid, the node will behave as standalone instance of MySQL.</p>"},{"location":"wsrep-system-index.html#wsrep_provider_options","title":"<code>wsrep_provider_options</code>","text":"Option Description Command Line: <code>--wsrep-provider-options</code> Config File: Yes Scope: Global Dynamic: No <p>Specifies optional settings for the replication provider documented in Index of :variable:`wsrep_provider` options. These options affect how various situations are handled during replication.</p>"},{"location":"wsrep-system-index.html#wsrep_recover","title":"<code>wsrep_recover</code>","text":"Option Description Command Line: <code>--wsrep-recover</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>OFF</code> Location: mysqld_safe` <p>Recovers database state after crash by parsing GTID from the log. If the GTID is found, it will be assigned as the initial position for server.</p>"},{"location":"wsrep-system-index.html#wsrep_reject_queries","title":"<code>wsrep_reject_queries</code>","text":"Option Description Command Line: No Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>NONE</code> <p>Defines whether the node should reject queries from clients. Rejecting queries can be useful during upgrades, when you want to keep the node up and apply write-sets without accepting queries.</p> <p>When a query is rejected, the following error is returned:</p> <pre><code>Error 1047: Unknown command\n</code></pre> <p>The following values are available:</p> <ul> <li> <p><code>NONE</code>: Accept all queries from clients (default)</p> </li> <li> <p><code>ALL</code>: Reject all new queries from clients, but maintain existing client connections</p> </li> <li> <p><code>ALL_KILL</code>: Reject all new queries from clients and kill existing client connections</p> </li> </ul> <p>Note</p> <p>This variable doesn\u2019t affect Galera replication in any way, only the applications that connect to the database are affected. If you want to desync a node, use <code>wsrep_desync</code>.</p>"},{"location":"wsrep-system-index.html#wsrep_replicate_myisam","title":"<code>wsrep_replicate_myisam</code>","text":"Option Description Command Line: <code>--wsrep-replicate-myisam</code> Config File: Yes Scope: Session, Global Dynamic: No Default Value: <code>OFF</code> <p>Defines whether DML statements for MyISAM tables should be replicated. It is disabled by default, because MyISAM replication is still experimental.</p> <p>On the global level, <code>wsrep_replicate_myisam</code> can be set only during startup. On session level, you can change it during runtime as well.</p> <p>For older nodes in the cluster, <code>wsrep_replicate_myisam</code> should work since the TOI decision (for MyISAM DDL) is done on origin node. Mixing of non-MyISAM and MyISAM tables in the same DDL statement is not recommended when <code>wsrep_replicate_myisam</code> is disabled, since if any table in the list is MyISAM, the whole DDL statement is not put under TOI.</p> <p>Note</p> <p>You should keep in mind the following when using MyISAM replication:</p> <ul> <li> <p>DDL (CREATE/DROP/TRUNCATE) statements on MyISAM will be replicated irrespective of <code>wsrep_replicate_myisam</code> value</p> </li> <li> <p>DML (INSERT/UPDATE/DELETE) statements on MyISAM will be replicated only if<code>wsrep_replicate_myisam</code> is enabled</p> </li> <li> <p>SST will get full transfer irrespective of <code>wsrep_replicate_myisam</code>value (it will get MyISAM tables from donor)</p> </li> <li> <p>Difference in configuration of <code>pxc-cluster</code> node  on enforce_storage_engine  front may result in picking up different engine for the same table  on different nodes</p> </li> <li> <p><code>CREATE TABLE AS SELECT</code> (CTAS) statements use non-TOI replication  and are replicated only if there is involvement of InnoDB table  that needs transactions  (in case of MyISAM table, CTAS statements will not be replicated).</p> </li> </ul>"},{"location":"wsrep-system-index.html#wsrep_restart_slave","title":"<code>wsrep_restart_slave</code>","text":"Option Description Command Line: <code>--wsrep-restart-slave</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>Defines whether replication replica should be restarted when the node joins back to the cluster. Enabling this can be useful because asynchronous replication replica thread is stopped when the node tries to apply the next replication event while the node is in non-primary state.</p>"},{"location":"wsrep-system-index.html#wsrep_retry_autocommit","title":"<code>wsrep_retry_autocommit</code>","text":"Option Description Command Line: <code>--wsrep-retry-autocommit</code> Config File: Yes Scope: Global Dynamic: No Default Value: <code>1</code> <p>Specifies the number of times autocommit transactions will be retried in the cluster if it encounters certification errors. In case there is a conflict, it should be safe for the cluster node to simply retry the statement without returning an error to the client, hoping that it will pass next time.</p> <p>This can be useful to help an application using autocommit to avoid deadlock errors that can be triggered by replication conflicts.</p> <p>If this variable is set to <code>0</code>, autocommit transactions won\u2019t be retried.</p>"},{"location":"wsrep-system-index.html#wsrep_rsu_commit_timeout","title":"<code>wsrep_RSU_commit_timeout</code>","text":"Option Description Command Line: <code>--wsrep-RSU-commit-timeout</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>5000</code> Range: From <code>5000</code> (5 milliseconds) to <code>31536000000000</code> (365 days) <p>Specifies the timeout in microseconds to allow active connection to complete COMMIT action before starting RSU.</p> <p>While running RSU it is expected that user has isolated the node and there is no active traffic executing on the node. RSU has a check to ensure this, and waits for any active connection in <code>COMMIT</code> state before starting RSU.</p> <p>By default this check has timeout of 5 milliseconds, but in some cases COMMIT is taking longer. This variable sets the timeout, and has allowed values from the range of (5 milliseconds, 365 days). The value is to be set in microseconds. Unit of variable is in micro-secs so set accordingly.</p> <p>Note</p> <p>RSU operation will not auto-stop node from receiving active traffic. So there could be a continuous flow of active traffic while RSU continues to wait, and that can result in RSU starvation. User is expected to block active RSU traffic while performing operation.</p>"},{"location":"wsrep-system-index.html#wsrep_slave_fk_checks","title":"<code>wsrep_slave_FK_checks</code>","text":"Option Description Command Line: <code>--wsrep-slave-FK-checks</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>ON</code> <p>Defines whether foreign key checking is done for applier threads. This is enabled by default.</p>"},{"location":"wsrep-system-index.html#wsrep_slave_threads","title":"<code>wsrep_slave_threads</code>","text":"Option Description Command Line: <code>--wsrep-slave-threads</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>1</code> <p>Specifies the number of threads that can apply replication transactions in parallel. Galera supports true parallel replication that applies transactions in parallel only when it is safe to do so. This variable is dynamic. You can increase/decrease it at any time.</p> <p>Note</p> <p>When you decrease the number of threads, it won\u2019t kill the threads immediately, but stop them after they are done applying current transaction (the effect with an increase is immediate though).</p> <p>If any replication consistency problems are encountered, it\u2019s recommended to set this back to <code>1</code> to see if that resolves the issue. The default value can be increased for better throughput.</p> <p>Review the Galera Cluster documentation for flow control for suggested settings.</p> <p>You can also estimate the optimal value for this from <code>wsrep_cert_deps_distance</code> as suggested in the Galera Cluster documentation.</p> <p>For more configuration tips, see this document.</p>"},{"location":"wsrep-system-index.html#wsrep_slave_uk_checks","title":"<code>wsrep_slave_UK_checks</code>","text":"Option Description Command Line: <code>--wsrep-slave-UK-checks</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>OFF</code> <p>Defines whether unique key checking is done for applier threads. This is disabled by default.</p>"},{"location":"wsrep-system-index.html#wsrep_sst_auth","title":"<code>wsrep_sst_auth</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes Default Value: : <p>Specifies authentication information for State Snapshot Transfer (SST). Required information depends on the method specified in the <code>wsrep_sst_method</code> variable.</p> <p>For more information about SST authentication, see State Snapshot Transfer.</p> <p>Note</p> <p>Value of this variable is masked in the log and in the <code>SHOW VARIABLES</code> query output.</p>"},{"location":"wsrep-system-index.html#wsrep_sst_donor","title":"<code>wsrep_sst_donor</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Global Dynamic: Yes <p>Specifies a list of nodes (using their <code>wsrep_node_name</code> values) that the current node should prefer as donors for SST and IST.</p> <p>Warning</p> <p>Using IP addresses of nodes instead of node names (the value of  <code>wsrep_node_name</code>) as values of <code>wsrep_sst_donor</code> results in an error.</p> <pre><code>ERROR] WSREP: State transfer request failed unrecoverably: 113 (No route\nto host). Most likely it is due to inability to communicate with the\ncluster primary component. Restart required.\n</code></pre> <p>If the value is empty, the first node in SYNCED state in the index becomes the donor and will not be able to serve requests during the state transfer.</p> <p>To consider other nodes if the listed nodes are not available, add a comma at the end of the list, for example:</p> <pre><code>wsrep_sst_donor=node1,node2,\n</code></pre> <p>If you remove the trailing comma from the previous example, then the joining node will consider only <code>node1</code> and <code>node2</code>.</p> <p>Note</p> <p>By default, the joiner node does not wait for more than 100 seconds to receive the first packet from a donor. This is implemented via the <code>sst-initial-timeout</code> option. If you set the list of preferred donors without the trailing comma or believe that all nodes in the cluster can often be unavailable for SST (this is common for small clusters), then you may want to increase the initial timeout (or disable it completely if you don\u2019t mind the joiner node waiting for the state transfer indefinitely).</p>"},{"location":"wsrep-system-index.html#wsrep_sst_donor_rejects_queries","title":"<code>wsrep_sst_donor_rejects_queries</code>","text":"Option Description Command Line: <code>--wsrep-sst-donor-rejects-queries</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: OFF <p>Defines whether the node should reject blocking client sessions when it is serving as a donor during a blocking state transfer method (when <code>wsrep_sst_method</code> is set to <code>mysqldump</code> or <code>rsync</code>). This is disabled by default, meaning that the node accepts such queries.</p> <p>If you enable this variable, queries will return the <code>Unknown command</code> error. This can be used to signal load-balancer that the node isn\u2019t available.</p>"},{"location":"wsrep-system-index.html#wsrep_sst_method","title":"<code>wsrep_sst_method</code>","text":"Option Description Command Line: <code>--wsrep-sst-method</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: xtrabackup-v2 <p>Defines the method or script for State Snapshot Transfer (SST).</p> <p>Available values are:</p> <ul> <li> <p><code>xtrabackup-v2</code>: Uses Percona XtraBackup to perform SST. This method requires <code>wsrep_sst_auth</code> to be set up with credentials (<code>&lt;user&gt;:&lt;password&gt;</code>) on the donor node. Privileges and permissions for running Percona XtraBackup can be found in Percona XtraBackup documentation. This is the recommended and default method for Percona XtraDB Cluster. For more information, see Percona XtraBackup SST Configuration.</p> </li> <li> <p><code>rsync</code>: Uses <code>rsync</code> to perform SST. This method doesn\u2019t use the <code>wsrep_sst_auth</code> variable.</p> </li> <li> <p><code>mysqldump</code>: Uses <code>mysqldump</code> to perform SST This method requires superuser credentials for the donor node to be specified in the <code>wsrep_sst_auth</code> variable.</p> </li> </ul> <p>Note</p> <p>This method is deprecated as of <code>5.7.22-29.26</code> and not recommended unless it is required for specific reasons. Also, it is not compatible with <code>bind_address</code> set to <code>127.0.0.1</code> or <code>localhost</code>, and will cause startup to fail in this case.</p> <ul> <li> <p><code>&lt;custom_script_name&gt;</code>: Galera supports Scriptable State Snapshot Transfer. This enables users to create their own custom scripts for performing SST. For example, you can create a script <code>/usr/bin/wsrep_MySST.sh</code> and specify <code>MySST</code> for this variable to run your custom SST script.</p> </li> <li> <p><code>skip</code>: Use this to skip SST. This can be used when initially starting the cluster and manually restoring the same data to all nodes. It shouldn\u2019t be used permanently because it could lead to data inconsistency across the nodes.</p> </li> </ul> <p>Note</p> <p>Only <code>xtrabackup-v2</code> and <code>rsync</code> provide support for clusters with GTIDs and async replicas.</p>"},{"location":"wsrep-system-index.html#wsrep_sst_receive_address","title":"<code>wsrep_sst_receive_address</code>","text":"Option Description Command Line: <code>--wsrep-sst-receive-address</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>AUTO</code> <p>Specifies the network address where donor node should send state transfers. By default, this variable is set to <code>AUTO</code>, meaning that the IP address from <code>wsrep_node_address</code> is used.</p>"},{"location":"wsrep-system-index.html#wsrep_start_position","title":"<code>wsrep_start_position</code>","text":"Option Description Command Line: <code>--wsrep-start-position</code> Config File: Yes Scope: Global Dynamic: Yes Default Value: <code>00000000-0000-0000-0000-00000000000000:-1</code> <p>Specifies the node\u2019s start position as <code>UUID:seqno</code>. By setting all the nodes to have the same value for this variable, the cluster can be set up without the state transfer.</p>"},{"location":"wsrep-system-index.html#wsrep_sync_wait","title":"<code>wsrep_sync_wait</code>","text":"Option Description Command Line: <code>--wsrep-sync-wait</code> Config File: Yes Scope: Session, Global Dynamic: Yes Default Value: <code>0</code> <p>This variable has been implemented in <code>5.6.20-25.7</code>. Controls cluster-wide causality checks on certain statements. Checks ensure that the statement is executed on a node that is fully synced with the cluster.</p> <p>Note</p> <p>Causality checks of any type can result in increased latency.</p> <p>The type of statements to undergo checks is determined by bitmask:</p> <ul> <li> <p><code>0</code>: Do not run causality checks for any statements. This is the default.</p> </li> <li> <p><code>1</code>: Perform checks for <code>READ</code> statements (including <code>SELECT</code>, <code>SHOW</code>, and <code>BEGIN</code> or <code>START TRANSACTION</code>).</p> </li> <li> <p><code>2</code>: Perform checks for <code>UPDATE</code> and <code>DELETE</code> statements.</p> </li> <li> <p><code>3</code>: Perform checks for <code>READ</code>, <code>UPDATE</code>, and <code>DELETE</code> statements.</p> </li> <li> <p><code>4</code>: Perform checks for <code>INSERT</code> and <code>REPLACE</code> statements.</p> </li> <li> <p><code>5</code>: Perform checks for <code>READ</code>, <code>INSERT</code>, and <code>REPLACE</code> statements.</p> </li> <li> <p><code>6</code>: Perform checks for <code>UPDATE</code>, <code>DELETE</code>, <code>INSERT</code>, and <code>REPLACE</code> statements.</p> </li> <li> <p><code>7</code>: Perform checks for <code>READ</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>INSERT</code>, and <code>REPLACE</code> statements.</p> </li> </ul> <p>Note</p> <p>Setting <code>wsrep_sync_wait</code> to <code>1</code> is the equivalent of setting the deprecated <code>wsrep_causal_reads</code> to <code>ON</code>.</p>"},{"location":"xtradb-cluster-version-numbers.html","title":"Percona XtraDB Cluster 5.7 version numbers","text":"<p>A version number identifies the product release. The product contains the latest Generally Available (GA) features at the time of that release. Percona XtraDB Cluster assigns a set of unique numbers for each version in increasing order. The numbers are a combination of the Percona Server for MySQL version and internal version numbers denoting the build.</p> 5.7.40 31 63 2 Base version WSREP API version Minor build Custom build <p>Percona uses semantic version numbering, which follows the pattern of base version, minor build, and an optional custom build. Percona assigns unique, non-negative integers in increasing order for each minor build release. The version number combines the base Percona Server for MySQL version number, the minor build version, and the custom build version, if needed.</p> <p>The version numbers for Percona XtraDB Cluster 5.7.40-31.63 define the following information:</p> <ul> <li> <p>Base version - the leftmost set of numbers indicate the Percona Server for MySQL version used as a base. An increase in base version resets the minor build version and the custom build version to 0.</p> </li> <li> <p>WSREP API version - the version of the WSREP API</p> </li> <li> <p>Minor build version - an internal number that denotes which version. When this number increases by one, the custom build fix is reset to 0.</p> </li> <li> <p>Custom build version - an optional number assigned to custom builds used for bug fixes. The software features, unless they\u2019re included in the bug fix, don\u2019t change.</p> </li> </ul>"},{"location":"diagnostics/innodb_fragmentation_count.html","title":"InnoDB Page Fragmentation Counters","text":"<p>InnoDB page fragmentation is caused by random insertion or deletion from a secondary index. This means that the physical ordering of the index pages on the disk is not same as the index ordering of the records on the pages. As a consequence this means that some pages take a lot more space and that queries which require a full table scan can take a long time to finish.</p> <p>To provide more information about the InnoDB page fragmentation Percona Server now provides the following counters as status variables: <code>Innodb_scan_pages_contiguous</code>, <code>Innodb_scan_pages_disjointed</code>, <code>Innodb_scan_data_size</code>, <code>Innodb_scan_deleted_recs_size</code>, and <code>Innodb_scan_pages_total_seek_distance</code>.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#version-specific-information","title":"Version Specific Information","text":"<p>The feature has been implemented in <code>5.7.20-18</code>.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#status-variables","title":"Status Variables","text":""},{"location":"diagnostics/innodb_fragmentation_count.html#innodb_scan_pages_contiguous","title":"<code>Innodb_scan_pages_contiguous</code>","text":"Option Description Data type: Numeric Scope: Session <p>This variable shows the number of contiguous page reads inside a query.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#innodb_scan_pages_disjointed","title":"<code>Innodb_scan_pages_disjointed</code>","text":"Option Description Data type: Numeric Scope: Session <p>This variable shows the number of disjointed page reads inside a query.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#innodb_scan_data_size","title":"<code>Innodb_scan_data_size</code>","text":"Option Description Data type: Numeric Scope: Session <p>This variable shows the size of data in all InnoDB pages read inside a query (in bytes) - calculated as the sum of <code>page_get_data_size(page)</code> for every page scanned.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#innodb_scan_deleted_recs_size","title":"<code>Innodb_scan_deleted_recs_size</code>","text":"Option Description Data type: Numeric Scope: Session <p>This variable shows the size of deleted records (marked as <code>deleted</code> in <code>page_delete_rec_list_end()</code>) in all InnoDB pages read inside a query (in bytes) - calculated as the sum of <code>page_header_get_field(page, PAGE_GARBAGE)</code> for every page scanned.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#innodb_scan_pages_total_seek_distance","title":"<code>Innodb_scan_pages_total_seek_distance</code>","text":"Option Description Data type: Numeric Scope: Session <p>This variable shows the total seek distance when moving between pages.</p>"},{"location":"diagnostics/innodb_fragmentation_count.html#related-reading","title":"Related Reading","text":"<ul> <li> <p>InnoDB: look after fragmentation</p> </li> <li> <p>Defragmenting a Table</p> </li> </ul>"},{"location":"diagnostics/libcoredumper.html","title":"Using libcoredumper","text":"<p>This feature is Tech Preview quality.</p> <p>This feature was implemented in Percona Server 5.7.31-34 and has been tested against the supported operating systems for this version. The tool is experimental and may not be tested against newer operating systems in the future.</p> <p>The documented moment of a computer when either the computer or an application crashed is a core dump file. Developers examine the dump as one of the tasks when searching for the cause of a failure.</p> <p>The <code>libcoredumper</code> is a free and Open Source fork of <code>google-coredumper</code>, enhanced to work on newer Linux versions, and GCC and CLANG.</p> <p>You should test before putting this tool into production.</p>"},{"location":"diagnostics/libcoredumper.html#enabling-the-libcoredumper","title":"Enabling the <code>libcoredumper</code>","text":"<p>Enable core dumps for troubleshooting purposes.</p> <p>To enable the <code>libcoredumper</code>, add the <code>coredumper</code> variable to the <code>mysqld</code> section of <code>my.cnf</code>. This variable is independent of the older <code>core-file</code> variable.</p> <p>The variable can have the following possible values:</p> Value Description Blank The core dump is saved under MySQL datadir and named <code>core</code>. A path ending with / The core dump is saved under the specified directory and named <code>core</code>. Full path with a filename The core dump is saved under the specified directory and with the specified filename <p>Restart the server.</p>"},{"location":"diagnostics/libcoredumper.html#verifying-the-libcoredumper-is-active","title":"Verifying the <code>libcoredumper</code> is Active","text":"<p>MySQL writes to the log when generating a core file and delegates the core dump operation to the Linux kernel. An example of the log message is the following:</p> <pre><code>Writing a core file\n</code></pre> <p>MySQL using the <code>libcoredumper</code> to generate the file creates the following message in the log:</p> <pre><code>Writing a core file using lib coredumper\n</code></pre> <p>Every core file adds a crash timestamp instead of a PID for the following reasons:</p> <ul> <li>Lets you correlate the core file with a crash. MySQL prints a UTC timestamp on the crash log.</li> </ul> <pre><code>10:02:09 UTC - mysqld got signal 11;\n</code></pre> <ul> <li>Lets you keep multiple core files.</li> </ul> <p>Note</p> <p>For example, operators and containers run as PID 1. If the process ID identified the core file, each container crash generates a core dump that overwrites the previous core file.</p>"},{"location":"diagnostics/libcoredumper.html#disabling-the-libcoredumper","title":"Disabling the libcoredumper","text":"<p>You can disable the libcoredumper. A core file may contain sensitive data and takes disk space.</p> <p>To disable the <code>libcoredumper</code> you must do the following:</p> <ul> <li> <p>In the <code>mysqld</code> section of my.cnf, remove the <code>libcoredumper</code> variable.</p> </li> <li> <p>Restart the server.</p> </li> </ul>"},{"location":"diagnostics/stacktrace.html","title":"Stack Trace","text":"<p>Developers use the stack trace in the debug process, either an interactive investigation or during the post-mortem. No configuration is required to generate a stack trace.</p> <p>Implemented in Percona Server for MySQL 5.7.31-34, the stack trace adds the following:</p> Name Description Prints binary BuildID The Strip utility removes unneeded sections and debugging information to reduce the size. This method is standard with containers where the size of the image is essential. The BuildID lets you resolve the stack trace when the Strip utility removes the binary symbols table. Print the server version information The version information establishes the starting point for analysis. Some applications, such as MySQL, only print this information to a log on startup, and when the crash occurs, the size of the log may be large, rotated, or truncated."},{"location":"features/highavailability.html","title":"High Availability","text":"<p>In a basic setup with 3 nodes, Percona XtraDB Cluster will continue to function if you take any of the nodes down. At any point in time, you can shut down any node to perform maintenance or make configuration changes. Even in unplanned situations (like a node crashing or if it becomes unavailable over the network), the Percona XtraDB Cluster will continue to work and you\u2019ll be able to run queries on working nodes.</p> <p>If there were changes to data while a node was down, there are two options that the node may use when it joins the cluster again:</p> <ul> <li>State Snapshot Transfer (SST) is when all data is copied   from one node to another.</li> </ul> <p>SST is usually used when a new node joins the cluster   and receives all data from an existing node.   There are three methods of SST available in Percona XtraDB Cluster:</p> <ul> <li> <p>mysqldump</p> </li> <li> <p>rsync</p> </li> <li> <p>xtrabackup.</p> </li> </ul> <p>The downside of <code>mysqldump</code> and <code>rsync</code> is that your cluster   becomes READ-ONLY while data is being copied   (SST applies the FLUSH TABLES WITH READ LOCK command).</p> <p>SST using <code>xtrabackup</code> does not require the READ LOCK command   for the entire syncing process, only for syncing .frm files (the same as with a regular backup).</p> <ul> <li>Incremental State Transfer (IST) is when only incremental changes   are copied from one node to another.</li> </ul> <p>Even without locking your cluster in read-only state, SST may be intrusive   and disrupt normal operation of your services.   IST lets you avoid that.   If a node goes down for a short period of time,   it can fetch only those changes that happened while it was down.   IST is implemeted using a caching mechanism on nodes.   Each node contains a cache, ring-buffer (the size is configurable)   of last N changes, and the node is able to transfer part of this cache.   Obviously, IST can be done only if the amount of changes needed to transfer   is less than N. If it exceeds N, then the joining node has to perform SST.</p> <p>You can monitor the current state of a node using the following command:</p> <pre><code>SHOW STATUS LIKE 'wsrep_local_state_comment';\n</code></pre> <p>When a node is in <code>Synced (6)</code> state, it is part of the cluster   and ready to handle traffic.</p>"},{"location":"features/multimaster-replication.html","title":"Multi-Source Replication","text":"<p>Multi-source replication means that you can write to any node and be sure that the write will be consistent for all nodes in the cluster. This is different from regular MySQL replication, where you have to apply writes to source to ensure that it will be synced.</p> <p>With multi-source replication any write is either committed on all nodes or not committed at all. The following diagram shows how it works for two nodes, but the same logic is applied with any number of nodes in the cluster:</p> <p></p> <p>All queries are executed locally on the node, and there is special handling only on <code>COMMIT</code>. When the <code>COMMIT</code> query is issued, the transaction has to pass certification on all nodes. If it does not pass, you will receive <code>ERROR</code> as the response for that query. After that, the transaction is applied on the local node.</p> <p>Response time of <code>COMMIT</code> includes the following:</p> <ul> <li> <p>Network round-trip time</p> </li> <li> <p>Certification time</p> </li> <li> <p>Local applying</p> </li> </ul> <p>Note</p> <p>Applying the transaction on remote nodes does not affect the response time of <code>COMMIT</code>, because it happens in the background after the response on certification. </p> <p>There are two important consequences of this architecture:</p> <ul> <li> <p>Several appliers can be used in parallel.   This enables truly parallel replication.   A replica can have many parallel threads configured   using the <code>wsrep_slave_threads</code> variable.</p> </li> <li> <p>There might be a small period of time when a replica is out of sync.   This happens because the source may apply events faster than the replica.   And if you do read from the replica,   you may read the data that has not changed yet.   You can see that from the diagram.</p> </li> </ul> <p>However, this behavior can be changed   by setting the <code>wsrep_causal_reads=ON</code> variable.   In this case, the read on the replica will wait until the event is applied   (this will obviously increase the response time of the read).   The gap between the replica and the source is the reason   why this replication is called virtually synchronous replication,   and not real synchronous replication.</p> <p>The described behavior of <code>COMMIT</code> also has another serious implication. If you run write transactions to two different nodes, the cluster will use an optimistic locking model. This means a transaction will not check on possible locking conflicts during the individual queries, but rather on the <code>COMMIT</code> stage, and you may get <code>ERROR</code> response on <code>COMMIT</code>.</p> <p>This is mentioned because it is one of the incompatibilities with regular InnoDB that you might experience. With InnoDB, <code>DEADLOCK</code> and <code>LOCK TIMEOUT</code> errors usually happen in response to a particular query, but not on <code>COMMIT</code>. It is good practice to check the error codes after a <code>COMMIT</code> query, but there are still many applications that do not do that.</p> <p>If you plan to use multi-source replication and run write transactions on several nodes, you may need to make sure you handle the responses on <code>COMMIT</code> queries.</p>"},{"location":"features/pxc-strict-mode.html","title":"PXC Strict Mode","text":"<p>PXC Strict Mode (<code>pxc_strict_mode</code>) is designed to help control behavior of cluster when an experimental/unsupported feature is used. It performs a number of validations at startup and during runtime.</p> <p>Depending on the actual mode you select, upon encountering a failed validation, the server will either throw an error (halting startup or denying the operation), or log a warning and continue running as normal.  The following modes are available:</p> <ul> <li> <p><code>DISABLED</code>: Do not perform strict mode validations and run as normal; no error or warning is logged for use of experimental/unsupported feature.</p> </li> <li> <p><code>PERMISSIVE</code>: If a vaidation fails, log a warning and continue running as normal.</p> </li> <li> <p><code>ENFORCING</code>: If a validation fails during startup, halt the server and throw an error. If a validation fails during runtime, deny the operation and throw an error.</p> </li> <li> <p><code>MASTER</code>: The same as <code>ENFORCING</code> except that explicit table locking is allowed: the validation of explicit table locking is not performed. This mode can be used with clusters in which write operations are isolated to a single node.</p> </li> </ul> <p>Important</p> <p>Setting <code>pxc_strict_mode</code> from <code>DISABLED</code> or <code>PERMISSIVE</code> to either <code>ENFORCING</code> or <code>MASTER</code> requires that the following conditions are met:</p> <ul> <li><code>wsrep_replicate_myisam=OFF</code></li> <li><code>binlog_format=ROW</code></li> <li><code>log_output=FILE/NONE</code></li> <li>transaction isolation level != SERIALIZABLE </li> </ul> <p>By default, PXC Strict Mode is set to <code>ENFORCING</code>, except if the node is acting as a standalone server (wsrep_provider=none) or the node is bootstrapping, then PXC Strict Mode defaults to <code>DISABLED</code>.</p> <p>It is recommended to keep PXC Strict Mode set to <code>ENFORCING</code>, because in this case whenever Percona XtraDB Cluster encounters an experimental feature or an unsupported operation, the server will deny it. This will force you to re-evaluate your Percona XtraDB Cluster configuration without risking the consistency of your data.</p> <p>If you are planning to set PXC Strict Mode to anything else than <code>ENFORCING</code>, you should be aware of the limitations and effects that this may have on data integrity. For more information, see Validations.</p> <p>To set the mode, use the <code>pxc_strict_mode</code> variable in the configuration file or the <code>--pxc-strict-mode</code> option during <code>mysqld</code> startup.</p> <p>Important</p> <p>It is better to start the server with the necessary mode (the default <code>ENFORCING</code> is highly recommended).  However, you can dynamically change it during runtime.  For example, to set PXC Strict Mode to <code>PERMISSIVE</code>, run the following command:</p> <pre><code>mysql&gt; SET GLOBAL pxc_strict_mode=PERMISSIVE;\n</code></pre> <p>To further ensure data consistency, it is important to have all nodes in the cluster running with the same configuration, including the value of <code>pxc_strict_mode</code> variable. </p>"},{"location":"features/pxc-strict-mode.html#validations","title":"Validations","text":"<p>PXC Strict Mode validations are designed to ensure optimal operation for common cluster setups that do not require experimental features and do not rely on operations not supported by Percona XtraDB Cluster.</p> <p>Warning</p> <p>If an unsupported operation is performed on a node with <code>pxc_strict_mode</code> set to <code>DISABLED</code> or <code>PERMISSIVE</code>, it will not be validated on nodes where it is replicated to, even if the destination node has <code>pxc_strict_mode</code> set to <code>ENFORCING</code>. </p> <p>This section describes the purpose and consequences of each validation.</p>"},{"location":"features/pxc-strict-mode.html#storage-engine","title":"Storage engine","text":"<p>Percona XtraDB Cluster supports only transactional storage engine (XtraDB or InnoDB) as PXC needs capability of the storage engine to rollback any given transaction. Storage engines, such as MyISAM, MEMORY, CSV are not supported.</p> <ul> <li> <p>Data manipulation statements that perform writing to table (for example, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, etc.)</p> </li> <li> <p>The following administrative statements: <code>CHECK</code>, <code>OPTIMIZE</code>, <code>REPAIR</code>, and <code>ANALYZE</code></p> </li> <li> <p><code>TRUNCATE TABLE</code> and <code>ALTER TABLE</code></p> </li> </ul> Strict Mode At startup At runtime DISABLED No validation is performed Allow write/DML, ALTER, TRUNCATE and ADMIN (check, optimize, repair, analyze) operations on all persistent tables (including one that resides in non-transactional storage engine). PERMISSIVE No validation is performed. All operations are permitted, but a warning is logged when an undesirable operation is performed on an unsupported table. ENFORCING or MASTER No validation is performed. write/DML, ALTER, TRUNCATE, and ADMIN operations on each persistent table that is not implemented using a supported storage engine logs an error. <p>In order to balance backward compatibility and existing application, Percona XtraDB Cluster allows table created with a non-transactional storage engine to co-exist but DML, ALTER, TRUNCATE and ADMIN (ANALYZE, CHECK, etc\u2026.) operations on such tables are blocked in ENFORCING mode.</p> <p>Altering unsupported table from non-transactional storage engine to a transactional storage engine is allowed.</p> <p>As operation checks are applicable only to persistent tables, temporary tables are not replicated by Galera Cluster so pxc-strict-mode enforcement is not applicable to temporary table. Same is applicable to performance-schema. (Check is also not applied for system tables located in the mysql database.)</p>"},{"location":"features/pxc-strict-mode.html#myisam-replication","title":"MyISAM replication","text":"<p>Percona XtraDB Cluster provides experimental support for replication of tables that use the MyISAM storage engine.  Due to the non-transactional nature of MyISAM, it is not likely to ever be fully supported in Percona XtraDB Cluster.</p> <p>MyISAM replication is controlled using the <code>wsrep_replicate_myisam</code> variable, which is set to <code>OFF</code> by default.  Due to its unreliability, MyISAM replication should not be enabled if you want to ensure data consistency.</p> Strict Mode At startup At runtime DISABLED No validation is performed. You can set <code>wsrep_replicate_myisam</code> to any value. PERMISSIVE If <code>wsrep_replicate_myisam</code> is set to <code>ON</code>, a warning is logged and startup continues. It is permitted to change <code>wsrep_replicate_myisam</code>  to any value, but if you set it to <code>ON</code>, a warning is logged. ENFORCING or MASTER If <code>wsrep_replicate_myisam</code> is set to <code>ON</code>, an error is logged and startup is aborted. Any attempt to change <code>wsrep_replicate_myisam</code> to <code>ON</code> fails and an error is logged. Setting it to OFF is welcome operation and doesn\u2019t result in an error. <p>Note</p> <p>The <code>wsrep_replicate_myisam</code> variable controls replication for MyISAM tables, and this validation only checks whether it is allowed. Undesirable operations for MyISAM tables are restricted using the Storage engine validation. </p>"},{"location":"features/pxc-strict-mode.html#binary-log-format","title":"Binary log format","text":"<p>Percona XtraDB Cluster supports only the default row-based binary logging format.  Setting the <code>binlog_format</code> variable to anything but <code>ROW</code> at startup is not allowed, because this changes the global scope, which must be set to <code>ROW</code>.  Validation is performed only at runtime and against session scope.</p> Strict Mode At startup At runtime DISABLED No check is enforced. You can set <code>binlog_format</code> to any value. PERMISSIVE No check is enforced. It is permitted to change <code>binlog_format</code> to any value, but if you set it to anything other than <code>ROW</code>, a warning is logged. ENFORCING or MASTER No check is enforced. At runtime, any attempt to change <code>binlog_format</code> to anything other than <code>ROW</code> fails and an error is logged. Setting it to ROW is welcome operation and doesn\u2019t result in an error. <p>Note</p> <p>Setting binlog_format at global level to STATEMENT/MIXED is not allowed under any mode and even during startup (startup setting are global setting).</p>"},{"location":"features/pxc-strict-mode.html#tables-without-the-primary-key","title":"Tables without the primary key","text":"<p>Percona XtraDB Cluster cannot properly propagate certain write operations to tables that do not have primary keys defined.  Undesirable operations include data manipulation statements that perform writing to table (especially <code>DELETE</code>).</p> <p>Note</p> <p>This type of validation is not applicable to temporary tables, system tables(tables located in mysql database), and performance-schema.</p> <p>Depending on the selected mode, the following happens:</p> Strict Mode At startup At DISABLED No validation is performed. All operations are permitted. PERMISSIVE No validation is performed. All operations are permitted, but a warning is logged when an undesirable operation is performed on a table without an explicit primary key defined. ENFORCING or MASTER No validation is performed. Any undesirable operation performed on a table without an explicit primary key is denied and an error is logged."},{"location":"features/pxc-strict-mode.html#log-output","title":"Log output","text":"<p>Percona XtraDB Cluster does not support tables in the MySQL database as the destination for log output. By default, log entries are written to a file.  This validation checks the value of the <code>log_output</code> variable.</p> <p>Depending on the selected mode, the following happens:</p> Strict Mode At startup At runtime DISABLED No validation is performed. You can set <code>log_output</code> to any value. PERMISSIVE If <code>log_output</code> is set only to <code>TABLE</code>, a warning is logged and startup continues. It is permitted to change <code>log_output</code> to any value, but if you set it only to <code>TABLE</code>, a warning is logged. Setting it to FILE/NONE is welcome operation and doesn\u2019t result in a warning. ENFORCING or MASTER If <code>log_output</code> is set only to <code>TABLE</code>, an error is logged and startup is aborted. Any attempt to change <code>log_output</code> only to <code>TABLE</code> fails and an error is logged. Setting it to FILE/NONE is welcome operation and doesn\u2019t result in a warning."},{"location":"features/pxc-strict-mode.html#explicit-table-locking","title":"Explicit table locking","text":"<p>Percona XtraDB Cluster has only experimental support for explicit table locking operations, The following undesirable operations lead to explicit table locking and are covered by this validation:</p> <ul> <li> <p><code>LOCK TABLES</code></p> </li> <li> <p><code>GET_LOCK()</code> and <code>RELEASE_LOCK()</code></p> </li> <li> <p><code>FLUSH TABLES &lt;tables&gt; WITH READ LOCK</code></p> </li> <li> <p>Setting the <code>SERIALIZABLE</code> transaction level</p> </li> </ul> <p>Depending on the selected mode, the following happens:</p> Strict Mode At startup At runtime DISABLED No validation is performed. All operations are permitted. PERMISSIVE No validation is performed. All operations are permitted, but a warning is logged when an undesirable operation is performed. ENFORCING No validation is performed. Any undesirable operation is denied and an error is logged."},{"location":"features/pxc-strict-mode.html#auto-increment-lock-mode","title":"Auto-increment lock mode","text":"<p>The lock mode for generating auto-increment values must be interleaved to ensure that each node generates a unique (but non-sequential) identifier.</p> <p>This validation checks the value of the <code>innodb_autoinc_lock_mode</code> variable. By default, the variable is set to <code>1</code> (consecutive lock mode), but it should be set to <code>2</code> (interleaved lock mode).</p> <p>Note</p> <p>This validation is not performed during runtime, because the <code>innodb_autoinc_lock_mode</code> variable cannot be set dynamically.</p> <p>Depending on the strict mode selected, the following happens:</p> Strict Mode At startup At runtime DISABLED No validation is performed. This option is not dynamic, no validation is required during runtime. PERMISSIVE If <code>innodb_autoinc_lock_mode</code> is not set to <code>2</code>, a warning is logged and startup continues. This option is not dynamic, no validation is required during runtime. ENFORCING or MASTER If <code>innodb_autoinc_lock_mode</code> is not set to <code>2</code>, an error is logged and startup is aborted. This option is not dynamic, no validation is required during runtime."},{"location":"features/pxc-strict-mode.html#combining-schema-and-data-changes-in-a-single-statement","title":"Combining schema and data changes in a single statement","text":"<p>Percona XtraDB Cluster does not support <code>CREATE TABLE ... AS SELECT</code> (CTAS) statements, because they combine both schema and data changes.</p> <p>Depending on the strict mode selected, the following happens:</p> Strict Mode At startup At runtime DISABLED No validation is performed. All operations are permitted. PERMISSIVE No validation is performed. All operations are permitted, but a warning is logged when a CTAS operation is performed. ENFORCING No validation is performed. Any CTAS operation is denied and an error is logged. <p>Note</p> <p>CTAS operations for temporary tables are permitted even in strict mode.</p>"},{"location":"features/pxc-strict-mode.html#discarding-and-importing-tablespaces","title":"Discarding and Importing Tablespaces","text":"<p><code>DISCARD TABLESPACE</code> and <code>IMPORT TABLESPACE</code> are not replicated using <code>TOI (Total Order Isolation)</code>. This can lead to data inconsistency if executed on only one node.</p> <p>Depending on the strict mode selected, the following happens:</p> Strict Mode At startup At runtime DISABLED No validation is performed. All operations are permitted. PERMISSIVE No validation is performed. All operations are permitted, but a warning is logged when you discard or import a tablespace. ENFORCING No validation is performed. Discarding or importing a tablespace is denied and an error is logged."},{"location":"features/pxc-strict-mode.html#xa-transactions","title":"XA transactions","text":"<p>XA transaction are not supported by PXC/Galera and with new MySQL-5.7 semantics using xa statement causes reuse of XID which is being used by Galera causing conflicts.  XA statements are completely blocked irrespective of the value of <code>pxc-strict-mode</code>.</p>"},{"location":"features/pxc-strict-mode.html#major-version-check","title":"Major version check","text":"<p>This validation checks that the protocol version is the same as the server major version. This validation protects the cluster against writes attempted on already upgraded nodes.</p> <p>The following output shows the error message: </p> <pre><code>    ERROR 1105 (HY000): Percona-XtraDB-Cluster prohibits use of multiple major versions while accepting write workload with pxc_strict_mode = ENFORCING or MASTER\n</code></pre>"},{"location":"flexibility/binlogging_replication_improvements.html","title":"Binlogging and replication improvements","text":"<p>Due to continuous development, Percona Server incorporated a number of improvements related to replication and binary logs handling. This resulted in replication specifics, which distinguishes it from MySQL.</p>"},{"location":"flexibility/binlogging_replication_improvements.html#temporary-tables-and-mixed-logging-format","title":"Temporary tables and mixed logging format","text":""},{"location":"flexibility/binlogging_replication_improvements.html#summary-of-the-fix","title":"Summary of the fix:","text":"<p>As soon as some statement involving temporary table was met when using mixed binlog format, MySQL was switching to row-based logging of all statements the end of the session or until all temporary tables used in this session are dropped. It is inconvenient in case of long lasting connections, including replication-related ones. Percona Server fixes the situation by switching between statement-based and row-based logging as and when necessary.</p>"},{"location":"flexibility/binlogging_replication_improvements.html#version-specific-information","title":"Version Specific Information","text":"<ul> <li>The fix has been ported form Percona Server for MySQL 5.6 in <code>5.7.10-1</code>.</li> </ul>"},{"location":"flexibility/binlogging_replication_improvements.html#details","title":"Details:","text":"<p>Mixed binary logging format supported by Percona Server means that server runs in statement-based logging by default, but switches to row-based logging when replication would be unpredictable - in the case of a nondeterministic SQL statement that may cause data divergence if reproduced on a replica server. The switch is done upon any condition from the long list, and one of these conditions is the use of temporary tables.</p> <p>Temporary tables are never logged using row-based format, but any statement, that touches a temporary table, is logged in row mode. This way all the side effects that temporary tables may produce on non-temporary ones are intercepted.</p> <p>There is no need to use row logging format for any other statements solely because of the temp table presence. However MySQL was undertaking such an excessive precaution: once some statement with temporary table had appeared and the row-based logging was used, MySQL logged unconditionally all subsequent statements in row format.</p> <p>Percona Server have implemented more accurate behavior: instead of switching to row-based logging until the last temporary table is closed, the usual rules of row vs statement format apply, and presence of currently opened temporary tables is no longer considered. This change was introduced with the fix of a bug #151 (upstream #72475).</p>"},{"location":"flexibility/binlogging_replication_improvements.html#temporary-table-drops-and-binloging-on-gtid-enabled-server","title":"Temporary table drops and binloging on GTID-enabled server","text":""},{"location":"flexibility/binlogging_replication_improvements.html#summary-of-the-fix_1","title":"Summary of the fix:","text":"<p>MySQL logs DROP statements for all temporary tables irrelative of the logging mode under which these tables were created. This produces binlog writes and errand GTIDs on replicas with row and mixed logging. Percona Server fixes this by tracking the binlog format at temporary table create time and using it to decide whether a DROP should be logged or not.</p>"},{"location":"flexibility/binlogging_replication_improvements.html#version-specific-information_1","title":"Version Specific Information","text":"<ul> <li>The fix has been ported form Percona Server for MySQL 5.6 in <code>5.7.17-11</code>.</li> </ul>"},{"location":"flexibility/binlogging_replication_improvements.html#details_1","title":"Details:","text":"<p>Even with read_only mode enabled, the server permits some operations, including ones with temporary tables. With the previous fix, temporary table operations are not binlogged in row or mixed mode. But MySQL doesn\u2019t track what was the logging mode when temporary table was created, and therefore unconditionally logs <code>DROP</code> statements for all temporary tables. These <code>DROP</code> statements receive <code>IF EXISTS</code> addition, which is intended to make them harmless.</p> <p>Percona Server have fixed this with the bug fixes #964, upstream #83003, and upstream #85258. Moreover, after all the binlogging fixes discussed so far nothing involving temporary tables is logged to binary log in row or mixed format, and so there is no need to consider <code>CREATE/DROP TEMPORARY TABLE</code> unsafe for use in stored functions, triggers, and multi-statement transactions in row/mixed format. Therefore an additional fix was introduced to mark creation and drop of temporary tables as unsafe inside transactions in statement-based replication only (bug fixed #1816, upstream #89467)).</p>"},{"location":"flexibility/binlogging_replication_improvements.html#safety-of-statements-with-a-limit-clause","title":"Safety of statements with a <code>LIMIT</code> clause","text":""},{"location":"flexibility/binlogging_replication_improvements.html#summary-of-the-fix_2","title":"Summary of the fix:","text":"<p>MySQL considers all <code>UPDATE/DELETE/INSERT ... SELECT</code> statements with <code>LIMIT</code> clause to be unsafe, no matter wether they are really producing non-deterministic result or not, and switches from statement-based logging to row-based one. Percona Server is more accurate, it acknowledges such instructions as safe when they include <code>ORDER BY PK</code> or <code>WHERE</code> condition. This fix has been ported from the upstream bug report #42415 (#44).</p>"},{"location":"flexibility/binlogging_replication_improvements.html#version-specific-information_2","title":"Version Specific Information","text":"<ul> <li>The fix has been ported form Percona Server for MySQL 5.6 in <code>5.7.10.1</code>.</li> </ul>"},{"location":"flexibility/binlogging_replication_improvements.html#performance-improvement-on-relay-log-position-update","title":"Performance improvement on relay log position update","text":""},{"location":"flexibility/binlogging_replication_improvements.html#summary-of-the-fix_3","title":"Summary of the fix:","text":"<p>MySQL always updated relay log position in multi-source replications setups regardless of whether the committed transaction has already been executed or not. Percona Server omitts relay log position updates for the already logged GTIDs.</p>"},{"location":"flexibility/binlogging_replication_improvements.html#version-specific-information_3","title":"Version Specific Information","text":"<ul> <li>The fix has been implemented in Percona Server for MySQL <code>5.7.18-14</code>.</li> </ul>"},{"location":"flexibility/binlogging_replication_improvements.html#details_2","title":"Details","text":"<p>Particularly, such unconditional relay log position updates caused additional fsync operations in case of <code>relay-log-info-repository=TABLE</code>, and with the higher number of channels transmitting such duplicate (already executed) transactions the situation became proportionally worse. Bug fixed #1786 (upstream #85141).</p>"},{"location":"flexibility/binlogging_replication_improvements.html#performance-improvement-on-source-and-connection-status-updates","title":"Performance improvement on source and connection status updates","text":""},{"location":"flexibility/binlogging_replication_improvements.html#summary-of-the-fix_4","title":"Summary of the fix:","text":"<p>Replica nodes configured to update source status and connection information only on log file rotation did not experience the expected reduction in load. MySQL was additionaly updating this information in case of multi-source replication when replica had to skip the already executed GTID event.</p>"},{"location":"flexibility/binlogging_replication_improvements.html#version-specific-information_4","title":"Version Specific Information","text":"<ul> <li>The fix has been implemented in Percona Server for MySQL <code>5.7.20-19</code>.</li> </ul>"},{"location":"flexibility/binlogging_replication_improvements.html#details_3","title":"Details","text":"<p>The configuration with <code>master_info_repository=TABLE</code> and <code>sync_master_info=0</code> makes replica to update source status and connection information in this table on log file rotation and not after each sync_master_info event, but it didn\u2019t work on multi-source replication setups. Heartbeats sent to the replica to skip GTID events which it had already executed previously, were evaluated as relay log rotation events and reacted with <code>mysql.slave_master_info</code> table sync. This inaccuracy could produce huge (up to 5 times on some setups) increase in write load on the replica, before this problem was fixed in Percona Server. Bug fixed #1812 (upstream #85158).</p>"},{"location":"flexibility/innodb_fts_improvements.html","title":"InnoDB Full-Text Search improvements","text":""},{"location":"flexibility/innodb_fts_improvements.html#ignoring-stopword-list","title":"Ignoring Stopword list","text":"<p>By default all Full-Text Search indexes check the stopwords list, to see if any indexed elements contain one of the words on that list.</p> <p>Using this list for n-gram indexes isn\u2019t always suitable, as an example, any item that contains <code>a</code> or <code>i</code> will be ignored. Another word that can\u2019t be searched is <code>east</code>, this one will find no matches because <code>a</code> is on the FTS stopword list.</p> <p>To resolve this issue, in Percona Server for MySQL <code>5.7.20-18</code> a new <code>innodb_ft_ignore_stopwords</code> variable has been implemented which controls whether InnoDB Full-Text Search should ignore stopword list.</p> <p>Although this variable is introduced to resolve n-gram issues, it affects all Full-Text Search indexes as well.</p> <p>Being a stopword doesn\u2019t just mean to be a one of the predefined words from the list. Tokens shorter than innodb_ft_min_token_size or longer than innodb_ft_max_token_size are also considered stopwords. Therefore, when <code>innodb_ft_ignore_stopwords</code> is set to <code>ON</code> even for non-ngram FTS, <code>innodb_ft_min_token_size</code> / <code>innodb_ft_max_token_size</code> will be ignored meaning that in this case very short and very long words will also be indexed.</p>"},{"location":"flexibility/innodb_fts_improvements.html#system-variables","title":"System Variables","text":""},{"location":"flexibility/innodb_fts_improvements.html#innodb_ft_ignore_stopwords","title":"<code>innodb_ft_ignore_stopwords</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Session, Global Dynamic: Yes Data type: Boolean Default Value: <code>OFF</code> <p>When enabled, this variable will instruct InnoDB Full Text Search parser to ignore the stopword list when building/updating an FTS index.</p>"},{"location":"flexibility/innodb_fts_improvements.html#punctuation-marks-in-full-text-search","title":"Punctuation Marks in Full-Text Search","text":"<p>By default, full text search is unable to find words with various punctuation characters in boolean search mode, although those characters are indexed with ngram parser. A new variable <code>ft_query_extra_word_chars</code> was introduced in Percona Server <code>5.7.21-20</code> to solve this issue.</p> <p>When it\u2019s enabled, all the non-whitespace symbols are considered to be word symbols by FTS query parser, except for the boolean search syntax symbols (which are specified by ft_boolean_syntax variable). The latter ones are also considered to be word symbols inside double quotes. This only applies for the query tokenizer, and the indexing tokenizer is not changed in any way. Because of this, the double quote symbol itself is never considered a word symbol, as no existing indexing tokenizer does so, thus searching for it would never return documents.</p>"},{"location":"flexibility/innodb_fts_improvements.html#system-variables_1","title":"System Variables","text":""},{"location":"flexibility/innodb_fts_improvements.html#ft_query_extra_word_chars","title":"<code>ft_query_extra_word_chars</code>","text":"Option Description Command Line: Yes Config File: Yes Scope: Session, Global Dynamic: Yes Data type: Boolean Default Value: <code>OFF</code> <p>When enabled, this variable will make all non-whitespace symbols (including punctuation marks) to be treated as word symbols in full-text search queries.</p>"},{"location":"howtos/3nodesec2.html","title":"How to set up a three-node cluster in EC2 environment","text":"<p>This manual assumes you are running three EC2 instances with Red Hat Enterprise Linux 7 64-bit.</p> <ul> <li> <p><code>node1</code>: <code>10.93.46.58</code></p> </li> <li> <p><code>node2</code>: <code>10.93.46.59</code></p> </li> <li> <p><code>node3</code>: <code>10.93.46.60</code></p> </li> </ul>"},{"location":"howtos/3nodesec2.html#recommendations-on-launching-ec2-instances","title":"Recommendations on launching EC2 instances","text":"<ol> <li> <p>Select instance types that support Enhanced Networking functionality. Good network performance critical for synchronous replication used in Percona XtraDB Cluster.</p> </li> <li> <p>When adding instance storage volumes, choose the ones with good I/O performance:</p> <ul> <li> <p>instances with NVMe are preferred</p> </li> <li> <p>GP2 SSD are preferred to GP3 SSD volume types due to I/O latency</p> </li> <li> <p>over sized GP2 SSD are preferred to IO1 volume types due to cost</p> </li> </ul> </li> <li> <p>Attach Elastic network interfaces with static IPs or assign Elastic IP addresses to your instances. Thereby private IP addresses are preserved on instances in case of reboot or restart. This is required as each Percona XtraDB Cluster member includes the <code>wsrep_cluster_address</code> option in its configuration which points to other cluster members.</p> </li> <li> <p>Launch instances in different availability zones to avoid cluster downtime in case one of the zones experiences power loss or network connectivity issues.</p> <p>See also</p> <p>Amazon EC2 Documentation: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html</p> </li> </ol> <p>To set up Percona XtraDB Cluster:</p> <ol> <li> <p>Remove any Percona XtraDB Cluster 5.5, Percona Server 5.5, and Percona Server 5.6 packages.</p> </li> <li> <p>Install Percona XtraDB Cluster as described in Installing Percona XtraDB Cluster on Red Hat Enterprise Linux and CentOS.</p> </li> <li> <p>Create data directories:</p> <pre><code>mkdir -p /mnt/data\nmysql_install_db --datadir=/mnt/data --user=mysql\n</code></pre> </li> <li> <p>Stop the firewall service:</p> <pre><code>service iptables stop\n</code></pre> <p>Note</p> <p>Alternatively, you can keep the firewall running, but open ports 3306, 4444, 4567, 4568. For example to open port 4567 on 192.168.0.1:</p> <pre><code>iptables -A INPUT -i eth0 -p tcp -m tcp --source 192.168.0.1/24 --dport 4567 -j ACCEPT\n</code></pre> </li> <li> <p>Create <code>/etc/my.cnf</code> files:</p> <p>Contents of the configuration file on the first node:</p> <pre><code>[mysqld]\ndatadir=/mnt/data\nuser=mysql\n\nbinlog_format=ROW\n\nwsrep_provider=/usr/lib64/libgalera_smm.so\nwsrep_cluster_address=gcomm://10.93.46.58,10.93.46.59,10.93.46.60\n\nwsrep_slave_threads=2\nwsrep_cluster_name=trimethylxanthine\nwsrep_sst_method=rsync\nwsrep_node_name=node1\n\ninnodb_autoinc_lock_mode=2\n</code></pre> <p>For the second and third nodes change the following lines:</p> <pre><code>wsrep_node_name=node2\n\nwsrep_node_name=node3\n</code></pre> </li> <li> <p>Start and bootstrap Percona XtraDB Cluster on the first node:</p> <pre><code>[root@node1 ~]# /etc/init.d/mysql bootstrap-pxc\n</code></pre> <p>You should see the following output:</p> <pre><code>2014-01-30 11:52:35 23280 [Note] /usr/sbin/mysqld: ready for connections.\nVersion: '5.6.15-56'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  Percona XtraDB Cluster (GPL), Release 25.3, Revision 706, wsrep_25.3.r4034\n</code></pre> </li> <li> <p>Start the second and third nodes:</p> <pre><code>[root@node2 ~]# /etc/init.d/mysql start\n</code></pre> <p>You should see the following output:</p> <pre><code>2014-01-30 09:52:42 26104 [Note] WSREP: Flow-control interval: [28, 28]\n2014-01-30 09:52:42 26104 [Note] WSREP: Restored state OPEN -&gt; JOINED (2)\n2014-01-30 09:52:42 26104 [Note] WSREP: Member 2 (percona1) synced with group.\n2014-01-30 09:52:42 26104 [Note] WSREP: Shifting JOINED -&gt; SYNCED (TO: 2)\n2014-01-30 09:52:42 26104 [Note] WSREP: New cluster view: global state: 4827a206-876b-11e3-911c-3e6a77d54953:2, view# 7: Primary, number of nodes: 3, my index: 2, protocol version 2\n2014-01-30 09:52:42 26104 [Note] WSREP: SST complete, seqno: 2\n2014-01-30 09:52:42 26104 [Note] Plugin 'FEDERATED' is disabled.\n2014-01-30 09:52:42 26104 [Note] InnoDB: The InnoDB memory heap is disabled\n2014-01-30 09:52:42 26104 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins\n2014-01-30 09:52:42 26104 [Note] InnoDB: Compressed tables use zlib 1.2.3\n2014-01-30 09:52:42 26104 [Note] InnoDB: Using Linux native AIO\n2014-01-30 09:52:42 26104 [Note] InnoDB: Not using CPU crc32 instructions\n2014-01-30 09:52:42 26104 [Note] InnoDB: Initializing buffer pool, size = 128.0M\n2014-01-30 09:52:42 26104 [Note] InnoDB: Completed initialization of buffer pool\n2014-01-30 09:52:43 26104 [Note] InnoDB: Highest supported file format is Barracuda.\n2014-01-30 09:52:43 26104 [Note] InnoDB: 128 rollback segment(s) are active.\n2014-01-30 09:52:43 26104 [Note] InnoDB: Waiting for purge to start\n2014-01-30 09:52:43 26104 [Note] InnoDB:  Percona XtraDB (https://www.percona.com) 5.6.15-rel62.0 started; log sequence number 1626341\n2014-01-30 09:52:43 26104 [Note] RSA private key file not found: /var/lib/mysql//private_key.pem. Some authentication plugins will not work.\n2014-01-30 09:52:43 26104 [Note] RSA public key file not found: /var/lib/mysql//public_key.pem. Some authentication plugins will not work.\n2014-01-30 09:52:43 26104 [Note] Server hostname (bind-address): '*'; port: 3306\n2014-01-30 09:52:43 26104 [Note] IPv6 is available.\n2014-01-30 09:52:43 26104 [Note]   - '::' resolves to '::';\n2014-01-30 09:52:43 26104 [Note] Server socket created on IP: '::'.\n2014-01-30 09:52:43 26104 [Note] Event Scheduler: Loaded 0 events\n2014-01-30 09:52:43 26104 [Note] /usr/sbin/mysqld: ready for connections.\nVersion: '5.6.15-56'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  Percona XtraDB Cluster (GPL), Release 25.3, Revision 706, wsrep_25.3.r4034\n2014-01-30 09:52:43 26104 [Note] WSREP: inited wsrep sidno 1\n2014-01-30 09:52:43 26104 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.\n2014-01-30 09:52:43 26104 [Note] WSREP: REPL Protocols: 5 (3, 1)\n2014-01-30 09:52:43 26104 [Note] WSREP: Assign initial position for certification: 2, protocol version: 3\n2014-01-30 09:52:43 26104 [Note] WSREP: Service thread queue flushed.\n2014-01-30 09:52:43 26104 [Note] WSREP: Synchronized with group, ready for connections\n</code></pre> <p>When all nodes are in SYNCED state, your cluster is ready.</p> </li> <li> <p>You can try connecting to MySQL on any node and create a database:</p> <pre><code>$ mysql -uroot\n&gt; CREATE DATABASE hello_tom;\n</code></pre> <p>The new database will be propagated to all nodes.</p> </li> </ol>"},{"location":"howtos/centos_howto.html","title":"Configuring Percona XtraDB Cluster on CentOS","text":"<p>This tutorial describes how to install and configure three Percona XtraDB Cluster nodes on CentOS 6.8 servers, using the packages from Percona repositories.</p> <ul> <li> <p>Node 1</p> <ul> <li> <p>Host name: <code>percona1</code></p> </li> <li> <p>IP address: <code>192.168.70.71</code></p> </li> </ul> </li> <li> <p>Node 2</p> <ul> <li> <p>Host name: <code>percona2</code></p> </li> <li> <p>IP address: <code>192.168.70.72</code></p> </li> </ul> </li> <li> <p>Node 3</p> <ul> <li> <p>Host name: <code>percona3</code></p> </li> <li> <p>IP address: <code>192.168.70.73</code></p> </li> </ul> </li> </ul>"},{"location":"howtos/centos_howto.html#prerequisites","title":"Prerequisites","text":"<p>The procedure described in this tutorial requires the following:</p> <ul> <li> <p>All three nodes have CentOS 6.8 installed.</p> </li> <li> <p>The firewall on all nodes is configured to allow connecting to ports 3306, 4444, 4567 and 4568.</p> </li> <li> <p>SELinux on all nodes is disabled.</p> </li> </ul>"},{"location":"howtos/centos_howto.html#step-1-installing-pxc","title":"Step 1. Installing PXC","text":"<p>Install Percona XtraDB Cluster on all three nodes as described in Installing Percona XtraDB Cluster on Red Hat Enterprise Linux and CentOS.</p>"},{"location":"howtos/centos_howto.html#step-2-configuring-the-first-node","title":"Step 2. Configuring the first node","text":"<p>Individual nodes should be configured to be able to bootstrap the cluster. For more information about bootstrapping the cluster, see Bootstrapping the First Node.</p> <ol> <li> <p>Make sure that the configuration file <code>/etc/my.cnf</code> on the first node (<code>percona1</code>) contains the following:</p> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib64/libgalera_smm.so\n\n# Cluster connection URL contains the IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.71,192.168.70.72,192.168.70.73\n\n# In order for Galera to work correctly binlog format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node 1 address\nwsrep_node_address=192.168.70.71\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n# Cluster name\nwsrep_cluster_name=my_centos_cluster\n\n# Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cret\"\n</code></pre> </li> <li> <p>Start the first node with the following command:</p> <pre><code>[root@percona1 ~]# /etc/init.d/mysql bootstrap-pxc\n</code></pre> <p>Note</p> <p>In case you\u2019re running CentOS 7, the bootstrap service should be used instead:</p> <pre><code>[root@percona1 ~]# systemctl start mysql@bootstrap.service\n</code></pre> <p>The previous command will start the cluster with initial <code>wsrep_cluster_address</code> variable set to <code>gcomm://</code>. If the node or MySQL are restarted later, there will be no need to change the configuration file.</p> </li> <li> <p>After the first node has been started, cluster status can be checked with the following command:</p> <pre><code>mysql&gt; show status like 'wsrep%'\n</code></pre> <p>The following output shows that the cluster has been successfully bootstrapped:</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 1                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> <p>Note</p> <p>It is not recommended to leave an empty password for the root account. Password can be changed as follows:</p> <pre><code>mysql@percona1&gt; UPDATE mysql.user SET password=PASSWORD(\"Passw0rd\") where user='root';\nmysql@percona1&gt; FLUSH PRIVILEGES;\n</code></pre> <p>To perform State Snapshot Transfer using XtraBackup, set up a new user with proper privileges:</p> <pre><code>mysql@percona1&gt; CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 's3cret';\nmysql@percona1&gt; GRANT PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sstuser'@'localhost';\nmysql@percona1&gt; FLUSH PRIVILEGES;\n</code></pre> <p>Note</p> <p>MySQL root account can also be used for performing SST, but it is more secure to use a different (non-root) user for this.</p> </li> </ol>"},{"location":"howtos/centos_howto.html#step-3-configuring-the-second-node","title":"Step 3. Configuring the second node","text":"<ol> <li> <p>Make sure that the configuration file <code>/etc/my.cnf</code> on the second node (<code>percona2</code>) contains the following:</p> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib64/libgalera_smm.so\n\n# Cluster connection URL contains IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.71,192.168.70.72,192.168.70.73\n\n# In order for Galera to work correctly binlog format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node 2 address\nwsrep_node_address=192.168.70.72\n\n# Cluster name\nwsrep_cluster_name=my_centos_cluster\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n# Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cret\"\n</code></pre> </li> <li> <p>Start the second node with the following command:</p> <pre><code>[root@percona2 ~]# /etc/init.d/mysql start\n</code></pre> </li> <li> <p>After the server has been started, it should receive SST automatically. This means that the second node won\u2019t have empty root password anymore. In order to connect to the cluster and check the status, the root password from the first node should be used. Cluster status can be checked on both nodes. The following is an example of status from the second node (<code>percona2</code>):</p> <pre><code>mysql&gt; show status like 'wsrep%'\n</code></pre> <p>The following output shows that the new node has been successfully added to the cluster:</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 2                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> </li> </ol>"},{"location":"howtos/centos_howto.html#step-4-configuring-the-third-node","title":"Step 4. Configuring the third node","text":"<ol> <li> <p>Make sure that the MySQL configuration file <code>/etc/my.cnf</code> on the third node (<code>percona3</code>) contains the following:</p> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib64/libgalera_smm.so\n\n# Cluster connection URL contains IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.71,192.168.70.72,192.168.70.73\n\n# In order for Galera to work correctly binlog format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node #3 address\nwsrep_node_address=192.168.70.73\n\n# Cluster name\nwsrep_cluster_name=my_centos_cluster\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n# Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cret\"\n</code></pre> </li> <li> <p>Start the third node with the following command:</p> <pre><code>[root@percona3 ~]# /etc/init.d/mysql start\n</code></pre> </li> <li> <p>After the server has been started, it should receive SST automatically. Cluster status can be checked on all three nodes. The following is an example of status from the third node (<code>percona3</code>):</p> <pre><code>mysql&gt; show status like 'wsrep%'\n</code></pre> <p>The following output confirms that the third node has joined the cluster:</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 3                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> </li> </ol>"},{"location":"howtos/centos_howto.html#testing-replication","title":"Testing replication","text":"<p>To test replication, lets create a new database on second node, create a table for that database on the third node, and add some records to the table on the first node.</p> <ol> <li> <p>Create a new database on the second node:</p> <pre><code>mysql@percona2&gt; CREATE DATABASE percona;\n</code></pre> <p>The following output confirms that a new database has been created:</p> <pre><code>Query OK, 1 row affected (0.01 sec)\n</code></pre> </li> <li> <p>Switch to a newly created database:</p> <pre><code>mysql@percona3&gt; USE percona;\n</code></pre> <p>The following output confirms that a database has been changed:</p> <pre><code>Database changed\n</code></pre> </li> <li> <p>Create a table on the third node:</p> <pre><code>mysql@percona3&gt; CREATE TABLE example (node_id INT PRIMARY KEY, node_name VARCHAR(30));\n</code></pre> <p>The following output confirms that a table has been created:</p> <pre><code>Query OK, 0 rows affected (0.05 sec)\n</code></pre> </li> <li> <p>Insert records on the first node:</p> <pre><code>mysql@percona1&gt; INSERT INTO percona.example VALUES (1, 'percona1');\n</code></pre> <p>The following output confirms that the records have been inserted:</p> <pre><code>Query OK, 1 row affected (0.02 sec)\n</code></pre> </li> <li> <p>Retrieve all the rows from that table on the second node:</p> <pre><code>mysql@percona2&gt; SELECT * FROM percona.example;\n</code></pre> <p>The following output confirms that all the rows have been retrieved:</p> <pre><code>+---------+-----------+\n| node_id | node_name |\n+---------+-----------+\n|       1 | percona1  |\n+---------+-----------+\n1 row in set (0.00 sec)\n</code></pre> <p>This simple procedure should ensure that all nodes in the cluster are synchronized and working as intended.</p> </li> </ol>"},{"location":"howtos/crash-recovery.html","title":"Crash Recovery","text":"<p>Unlike the standard MySQL replication, a Percona XtraDB Cluster cluster acts like one logical entity, which controls the status and consistency of each node as well as the status of the whole cluster. This allows maintaining the data integrity more efficiently than with traditional asynchronous replication without losing safe writes on multiple nodes at the same time.</p> <p>However, there are scenarios where the database service can stop with no node being able to serve requests.</p>"},{"location":"howtos/crash-recovery.html#scenario-node-a-is-gracefully-stopped","title":"Scenario: Node A is gracefully stopped","text":"<p>In a three node cluster (node A, Node B, node C), one node (node A, for example) is gracefully stopped: for the purpose of maintenance, configuration change, etc.</p> <p>In this case, the other nodes receive a \u201cgood bye\u201d message from the stopped node and the cluster size is reduced; some properties like quorum calculation or auto increment are automatically changed. As soon as node A is started again, it joins the cluster based on its <code>wsrep_cluster_address</code> variable in <code>my.cnf</code>.</p> <p>If the writeset cache (<code>gcache.size</code>) on nodes B and/or C still has all the transactions executed while node A was down, joining is possible via IST. If IST is impossible due to missing transactions in donor\u2019s gcache, the fallback decision is made by the donor and SST is started automatically.</p>"},{"location":"howtos/crash-recovery.html#scenario-two-nodes-are-gracefully-stopped","title":"Scenario: Two nodes are gracefully stopped","text":"<p>Similar to Scenario: Node A is gracefully stopped, the cluster size is reduced to 1 \u2014 even the single remaining node C forms the primary component and is able to serve client requests. To get the nodes back into the cluster, you just need to start them.</p> <p>However, when a new node joins the cluster, node C will be switched to the \u201cDonor/Desynced\u201d state as it has to provide the state transfer at least to the first joining node. It is still possible to read/write to it during that process, but it may be much slower, which depends on how large amount of data should be sent during the state transfer. Also, some load balancers may consider the donor node as not operational and remove it from the pool. So, it is best to avoid the situation when only one node is up.</p> <p>If you restart node A and then node B, you may want to make sure note B does not use node A as the state transfer donor: node A may not have all the needed writesets in its gcache. Specify node C node as the donor in your configuration file and start the mysql service:</p> <pre><code>$ systemctl start mysql\n</code></pre> <p>See also</p> <p>Galera Documentation: wsrep_sst_donor option</p>"},{"location":"howtos/crash-recovery.html#scenario-all-three-nodes-are-gracefully-stopped","title":"Scenario: All three nodes are gracefully stopped","text":"<p>The cluster is completely stopped and the problem is to initialize it again. It is important that a PXC node writes its last executed position to the <code>grastate.dat</code> file.</p> <p>By comparing the seqno number in this file, you can see which is the most advanced node (most likely the last stopped). The cluster must be bootstrapped using this node, otherwise nodes that had a more advanced position will have to perform the full SST to join the cluster initialized from the less advanced one. As a result, some transactions will be lost). To bootstrap the first node, invoke the startup script like this on Debian or Ubuntu:</p> <pre><code>$ /etc/init.d/mysql bootstrap-pxc\n</code></pre> <p>If you are using RedHat or CentOS, use the following script:</p> <pre><code>$ systemctl start mysql@bootstrap.service\n</code></pre> <p>Note</p> <p>Even though you bootstrap from the most advanced node, the other nodes have a lower sequence number. They will still have to join via the full SST because the Galera Cache is not retained on restart.</p> <p>For this reason, it is recommended to stop writes to the cluster before its full shutdown, so that all nodes can stop at the same position. See also <code>pc.recovery</code>.</p>"},{"location":"howtos/crash-recovery.html#scenario-one-node-disappears-from-the-cluster","title":"Scenario: One node disappears from the cluster","text":"<p>This is the case when one node becomes unavailable due to power outage, hardware failure, kernel panic, mysqld crash, kill -9 on mysqld pid, etc.</p> <p>Two remaining nodes notice the connection to node A is down and start trying to re-connect to it. After several timeouts, node A is removed from the cluster. The quorum is saved (2 out of 3 nodes are up), so no service disruption happens. After it is restarted, node A joins automatically (as described in Scenario: Node A is gracefully stopped).</p>"},{"location":"howtos/crash-recovery.html#scenario-two-nodes-disappear-from-the-cluster","title":"Scenario: Two nodes disappear from the cluster","text":"<p>Two nodes are not available and the remaining node (node C) is not able to form the quorum alone. The cluster has to switch to a non-primary mode, where MySQL refuses to serve any SQL queries. In this state, the mysqld process on node C is still running and can be connected to but any statement related to data fails with an error</p> <pre><code>&gt; SELECT * FROM test.sbtest1;\n</code></pre> <pre><code>ERROR 1047 (08S01): WSREP has not yet prepared node for application use\n</code></pre> <p>Reads are possible until node C decides that it cannot access node A and node B. New writes are forbidden.</p> <p>As soon as the other nodes become available, the cluster is formed again automatically. If node B and node C were just network-severed from node A, but they can still reach each other, they will keep functioning as they still form the quorum.</p> <p>If node A and node B crashed, you need to enable the primary component on node C manually, before you can bring up node A and node B. The command to do this is:</p> <pre><code>&gt; SET GLOBAL wsrep_provider_options='pc.bootstrap=true';\n</code></pre> <p>This approach only works if the other nodes are down before doing that! Otherwise, you end up with two clusters having different data.</p> <p>See also</p> <p>Adding Nodes to Cluster</p>"},{"location":"howtos/crash-recovery.html#scenario-all-nodes-went-down-without-a-proper-shutdown-procedure","title":"Scenario: All nodes went down without a proper shutdown procedure","text":"<p>This scenario is possible in case of a datacenter power failure or when hitting a MySQL or Galera bug. Also, it may happen as a result of data consistency being compromised where the cluster detects that each node has different data. The <code>grastate.dat</code> file is not updated and does not contain a valid sequence number (seqno). It may look like this:</p> <pre><code>$ cat /var/lib/mysql/grastate.dat\n# GALERA saved state\nversion: 2.1\nuuid: 220dcdcb-1629-11e4-add3-aec059ad3734\nseqno: -1\nsafe_to_bootstrap: 0\n</code></pre> <p>In this case, you cannot be sure that all nodes are consistent with each other. We cannot use safe_to_bootstrap variable to determine the node that has the last transaction committed as it is set to 0 for each node. An attempt to bootstrap from such a node will fail unless you start <code>mysqld</code> with the <code>--wsrep-recover</code> parameter:</p> <pre><code>$ mysqld --wsrep-recover\n</code></pre> <p>Search the output for the line that reports the recovered position after the node UUID (1122 in this case):</p> <pre><code>...\n... [Note] WSREP: Recovered position: 220dcdcb-1629-11e4-add3-aec059ad3734:1122\n...\n</code></pre> <p>The node where the recovered position is marked by the greatest number is the best bootstrap candidate. In its <code>grastate.dat</code> file, set the safe_to_bootstrap variable to 1. Then, bootstrap from this node.</p> <p>Note</p> <p>After a shutdown, you can boostrap from the node which is marked as safe in the <code>grastate.dat</code> file.</p> <pre><code>...\nsafe_to_bootstrap: 1\n...\n</code></pre> <p>See also</p> <p>Galera Documentation Introducing the Safe-To-Bootstrap feature in Galera Cluster</p> <p>In recent Galera versions, the option <code>pc.recovery</code> (enabled by default) saves the cluster state into a file named <code>gvwstate.dat</code> on each member node. As the name of this option suggests (pc \u2013 primary component), it saves only a cluster being in the PRIMARY state. An example content of : file may look like this:</p> <pre><code>cat /var/lib/mysql/gvwstate.dat\nmy_uuid: 76de8ad9-2aac-11e4-8089-d27fd06893b9\n#vwbeg\nview_id: 3 6c821ecc-2aac-11e4-85a5-56fe513c651f 3\nbootstrap: 0\nmember: 6c821ecc-2aac-11e4-85a5-56fe513c651f 0\nmember: 6d80ec1b-2aac-11e4-8d1e-b2b2f6caf018 0\nmember: 76de8ad9-2aac-11e4-8089-d27fd06893b9 0\n#vwend\n</code></pre> <p>We can see a three node cluster with all members being up. Thanks to this new feature, the nodes will try to restore the primary component once all the members start to see each other. This makes the PXC cluster automatically recover from being powered down without any manual intervention! In the logs we will see:</p>"},{"location":"howtos/crash-recovery.html#scenario-the-cluster-loses-its-primary-state-due-to-split-brain","title":"Scenario: The cluster loses its primary state due to split brain","text":"<p>For the purpose of this example, let\u2019s assume we have a cluster that consists of an even number of nodes: six, for example. Three of them are in one location while the other three are in another location and they lose network connectivity.  It is best practice to avoid such topology: if you cannot have an odd number of real nodes, you can use an additional arbitrator (garbd) node or set a higher pc.weight to some nodes. But when the split brain happens any way, none of the separated groups can maintain the quorum: all nodes must stop serving requests and both parts of the cluster will be continuously trying to re-connect.</p> <p>If you want to restore the service even before the network link is restored, you can make one of the groups primary again using the same command as described in Scenario: Two nodes disappear from the cluster</p> <pre><code>&gt; SET GLOBAL wsrep_provider_options='pc.bootstrap=true';\n</code></pre> <p>After this, you are able to work on the manually restored part of the cluster, and the other half should be able to automatically re-join using IST as soon as the network link is restored.</p> <p>Warning</p> <p>If you set the bootstrap option on both the separated parts, you will end up with two living cluster instances, with data likely diverging away from each other. Restoring a network link in this case will not make them re-join until the nodes are restarted and members specified in configuration file are connected again.</p> <p>Then, as the Galera replication model truly cares about data consistency: once the inconsistency is detected, nodes that cannot execute row change statement due to a data difference \u2013 an emergency shutdown will be performed and the only way to bring the nodes back to the cluster is via the full SST</p> <p>Based on material from Percona Database Performance Blog</p> <p>This article is based on the blog post Galera replication - how to recover a PXC cluster by Przemys\u0142aw Malkowski: https://www.percona.com/blog/2014/09/01/galera-replication-how-to-recover-a-pxc-cluster/ </p>"},{"location":"howtos/garbd_howto.html","title":"Setting up Galera Arbitrator","text":"<p>Galera Arbitrator is a member of Percona XtraDB Cluster that is used for voting in case you have a small number of servers (usually two) and don\u2019t want to add any more resources. Galera Arbitrator does not need a dedicated server. It can be installed on a machine running some other application. Just make sure it has good network connectivity.</p> <p>Galera Arbitrator is a member of the cluster that participates in the voting, but not in actual replication (although it receives the same data as other nodes). Also, it is not included in flow control calculations.</p> <p>This document will show how to add Galera Arbitrator node to an existing cluster.</p> <p>Note</p> <p>For more information on how to set up a cluster you can read in the Configuring Percona XtraDB Cluster on Ubuntu or Configuring Percona XtraDB Cluster on CentOS manuals.</p>"},{"location":"howtos/garbd_howto.html#installation","title":"Installation","text":"<p>Galera Arbitrator can be installed from Percona\u2019s repository by running:</p> <pre><code>root@ubuntu:~# apt install percona-xtradb-cluster-garbd-5.7\n</code></pre> <p>on Debian/Ubuntu distributions, or:</p> <pre><code>[root@centos ~]# yum install Percona-XtraDB-Cluster-garbd-57\n</code></pre> <p>on CentOS/RHEL distributions.</p>"},{"location":"howtos/garbd_howto.html#configuration","title":"Configuration","text":"<p>To configure Galera Arbitrator on Ubuntu/Debian you need to edit the <code>/etc/default/garbd</code> file. On CentOS/RHEL configuration can be found in <code>/etc/sysconfig/garb</code> file.</p> <p>Configuration file should look like this after installation:</p> <pre><code># Copyright (C) 2012 Codership Oy\n# This config file is to be sourced by garb service script.\n\n# REMOVE THIS AFTER CONFIGURATION\n\n# A comma-separated list of node addresses (address[:port]) in the cluster\n# GALERA_NODES=\"\"\n\n# Galera cluster name, should be the same as on the rest of the nodes.\n# GALERA_GROUP=\"\"\n\n# Optional Galera internal options string (e.g. SSL settings)\n# see https://galeracluster.com/documentation-webpages/galeraparameters.html\n# GALERA_OPTIONS=\"\"\n\n# Log file for garbd. Optional, by default logs to syslog\n# Deprecated for CentOS7, use journalctl to query the log for garbd\n# LOG_FILE=\"\"\n</code></pre> <p>To set it up you\u2019ll need to add the information about the cluster you\u2019ve set up. This example is using cluster information from the Configuring Percona XtraDB Cluster on Ubuntu.</p> <pre><code># Copyright (C) 2012 Codership Oy\n# This config file is to be sourced by garb service script.\n\n# A comma-separated list of node addresses (address[:port]) in the cluster\nGALERA_NODES=\"192.168.70.61:4567, 192.168.70.62:4567, 192.168.70.63:4567\"\n\n# Galera cluster name, should be the same as on the rest of the nodes.\nGALERA_GROUP=\"my_ubuntu_cluster\"\n\n# Optional Galera internal options string (e.g. SSL settings)\n# see https://galeracluster.com/documentation-webpages/galeraparameters.html\n# GALERA_OPTIONS=\"\"\n\n# Log file for garbd. Optional, by default logs to syslog\n# Deprecated for CentOS7, use journalctl to query the log for garbd\n# LOG_FILE=\"\"\n</code></pre> <p>Note</p> <p>Please note that you need to remove the <code># REMOVE THIS AFTER CONFIGURATION</code> line before you can start the service.</p> <p>You can now start the Galera Arbitrator daemon (<code>garbd</code>) by running:</p> <ul> <li>On Debian or Ubuntu:</li> </ul> <pre><code>root@server:~# service garbd start\n</code></pre> <pre><code>[ ok ] Starting /usr/bin/garbd: :.\n</code></pre> <ul> <li>On Red Hat Enterprise Linux or CentOS:</li> </ul> <pre><code>root@server:~# service garb start\n</code></pre> <pre><code>[ ok ] Starting /usr/bin/garbd: :.\n</code></pre> <p>You can additionally check the <code>arbitrator</code> status by running:</p> <ul> <li>On Debian or Ubuntu:</li> </ul> <pre><code>root@server:~# service garbd status\n</code></pre> <pre><code>[ ok ] garb is running.\n</code></pre> <ul> <li>On Red Hat Enterprise Linux or CentOS:</li> </ul> <pre><code>root@server:~# service garb status\n</code></pre> <pre><code>[ ok ] garb is running.\n</code></pre>"},{"location":"howtos/haproxy.html","title":"Load balancing with HAProxy","text":"<p>This manual describes how to configure HAProxy to work with Percona XtraDB Cluster.</p> <p>The following is an example of the configuration file for HAProxy:</p> <pre><code># this config requires haproxy-1.4.20\n\nglobal\n        log 127.0.0.1   local0\n        log 127.0.0.1   local1 notice\n        maxconn 4096\n        uid 99\n        gid 99\n        daemon\n        #debug\n        #quiet\n\ndefaults\n        log     global\n        mode    http\n        option  tcplog\n        option  dontlognull\n        retries 3\n        redispatch\n        maxconn 2000\n        contimeout      5000\n        clitimeout      50000\n        srvtimeout      50000\n\nlisten mysql-cluster 0.0.0.0:3306\n    mode tcp\n    balance roundrobin\n    option mysql-check user root\n\n    server db01 10.4.29.100:3306 check\n    server db02 10.4.29.99:3306 check\n    server db03 10.4.29.98:3306 check\n</code></pre> <p>With this configuration, HAProxy will balance the load between three nodes. In this case, it only checks if <code>mysqld</code> listens on port 3306, but it doesn\u2019t take into an account the state of the node. So it could be sending queries to the node that has <code>mysqld</code> running even if it\u2019s in <code>JOINING</code> or <code>DISCONNECTED</code> state.</p> <p>To check the current status of a node we need a more complex check. This idea was taken from codership-team google groups.</p> <p>To implement this setup, you will need two scripts:</p> <ul> <li> <p>clustercheck (located in <code>/usr/local/bin</code>) and a config for <code>xinetd</code></p> </li> <li> <p>mysqlchk (located in <code>/etc/xinetd.d</code>) on each node</p> </li> </ul> <p>Both scripts are available in binaries and source distributions of Percona XtraDB Cluster.</p> <p>Change the <code>/etc/services</code> file by adding the following line on each node:</p> <pre><code>mysqlchk        9200/tcp                # mysqlchk\n</code></pre> <p>The following is an example of the HAProxy configuration file in this case:</p> <pre><code># this config needs haproxy-1.4.20\n\nglobal\n        log 127.0.0.1   local0\n        log 127.0.0.1   local1 notice\n        maxconn 4096\n        uid 99\n        gid 99\n        #daemon\n        debug\n        #quiet\n\ndefaults\n        log     global\n        mode    http\n        option  tcplog\n        option  dontlognull\n        retries 3\n        redispatch\n        maxconn 2000\n        contimeout      5000\n        clitimeout      50000\n        srvtimeout      50000\n\nlisten mysql-cluster 0.0.0.0:3306\n    mode tcp\n    balance roundrobin\n    option  httpchk\n\n    server db01 10.4.29.100:3306 check port 9200 inter 12000 rise 3 fall 3\n    server db02 10.4.29.99:3306 check port 9200 inter 12000 rise 3 fall 3\n    server db03 10.4.29.98:3306 check port 9200 inter 12000 rise 3 fall 3\n</code></pre>"},{"location":"howtos/proxysql-v1.html","title":"Using ProxySQL v1 with <code>proxysql-admin</code>","text":"<p>ProxySQL Version 1.4 does not natively support Percona XtraDB Cluster and <code>proxysql-admin</code> tool requires custom bash scripts to keep track of PXC status: <code>proxysql_galera_checker</code> and <code>proxysql_node_monitor</code>.</p>"},{"location":"howtos/proxysql-v1.html#installing-proxysql-v1","title":"Installing ProxySQL v1","text":"<p>If that is what you used to install PXC or any other Percona software, run the corresponding command:</p> <ul> <li>On Debian or Ubuntu:</li> </ul> <p><code>shell   $ sudo apt install proxysql</code></p> <ul> <li>On Red Hat Enterprise Linux or CentOS:</li> </ul> <pre><code>$ sudo yum install proxysql\n</code></pre> <p>Alternatively, you can download packages from https://www.percona.com/downloads/proxysql/.</p> <p>To start ProxySQL, run the following command:</p> <pre><code>$ sudo service proxysql start\n</code></pre> <p>!!! warning</p> <pre><code>  Do not run ProxySQL with default credentials in production.\n\n  Before starting the `proxysql` service,\n  you can change the defaults in the `/etc/proxysql.cnf` file\n  by changing the `admin_credentials` variable.\n  For more information, see [Global Variables](https://github.com/sysown/proxysql/blob/master/doc/global_variables.md).\n</code></pre>"},{"location":"howtos/proxysql-v1.html#automatic-configuration","title":"Automatic Configuration","text":"<p>The <code>proxysql</code> package from Percona includes the <code>proxysql-admin</code> tool for configuring Percona XtraDB Cluster nodes with ProxySQL.</p> <p>Note</p> <p>The ProxySQL Admin is specially developed by Percona to    automate this configuration. Bug reports and feature proposals are welcome    in the ProxySQL Admin issue tracking system.</p> <p>Note</p> <p>The <code>proxysql-admin</code> tool can only be used for initial ProxySQL configuration.</p> <p>To view usage information, run <code>proxysql-admin</code> without any options:</p> <pre><code>Usage: [ options ]\nOptions:\n--config-file=&lt;config-file&gt;        Read login credentials from a configuration file\n                                   (command line options override any configuration file login credentials)\n--proxysql-datadir=&lt;datadir&gt;       Specify the proxysql data directory location\n--proxysql-username=user_name      ProxySQL service username\n--proxysql-password[=password]     ProxySQL service password\n--proxysql-port=port_num           ProxySQL service port number\n--proxysql-hostname=host_name      ProxySQL service hostname\n--cluster-username=user_name       Percona XtraDB Cluster node username\n--cluster-password[=password]      Percona XtraDB Cluster node password\n--cluster-port=port_num            Percona XtraDB Cluster node port number\n--cluster-hostname=host_name       Percona XtraDB Cluster node hostname\n--cluster-app-username=user_name   Percona XtraDB Cluster node application username\n--cluster-app-password[=password]  Percona XtraDB Cluster node application passwrod\n--without-cluster-app-user         Configure Percona XtraDB Cluster without application user\n--monitor-username=user_name       Username for monitoring Percona XtraDB Cluster nodes through ProxySQL\n--monitor-password[=password]      Password for monitoring Percona XtraDB Cluster nodes through ProxySQL\n--use-existing-monitor-password    Do not prompt for a new monitor password if one is provided.\n--node-check-interval=3000         Interval for monitoring node checker script (in milliseconds)\n                                   (default: 3000)\n--mode=[loadbal|singlewrite]       ProxySQL read/write configuration mode\n                                   currently supporting: 'loadbal' and 'singlewrite'\n                                   (default: 'singlewrite')\n--write-node=host_name:port        Writer node to accept write statments.\n                                   This option is supported only when using --mode=singlewrite\n                                   Can accept comma delimited list with the first listed being\n                                   the highest priority.\n--include-slaves=host_name:port    Add specified replica node(s) to ProxySQL, these nodes will go\n                                   into the reader hostgroup and will only be put into\n                                   the writer hostgroup if all cluster nodes are down (this\n                                   depends on the value of --use-slave-as-writer).\n                                   Replicas must be read only.  Can accept a comma delimited list.\n                                   If this is used make sure 'read_only=1' is in the replica's my.cnf\n--use-slave-as-writer=&lt;yes/no&gt;     If this value is 'yes', then a replica may be used as a writer\n                                   if the entire cluster is down. If 'no', then a replica\n                                   will not be used as a writer. This option is required\n                                   if '--include-slaves' is used.\n--writer-is-reader=&lt;value&gt;         Defines if the writer node also accepts writes.\n                                   Possible values are 'always', 'never', and 'ondemand'.\n                                   'ondemand' means that the writer node only accepts reads\n                                   if there are no other readers.\n                                   (default: 'ondemand')\n--max-connections=&lt;NUMBER&gt;         Value for max_connections in the mysql_servers table.\n                                   This is the maximum number of connections that\n                                   ProxySQL will open to the backend servers.\n                                   (default: 1000)\n--debug                            Enables additional debug logging.\n--help                             Dispalys this help text.\n\nThese options are the possible operations for proxysql-admin.\nOne of the options below must be provided.\n--adduser                          Adds the Percona XtraDB Cluster application user to the ProxySQL database\n--disable, -d                      Remove any Percona XtraDB Cluster configurations from ProxySQL\n--enable, -e                       Auto-configure Percona XtraDB Cluster nodes into ProxySQL\n--quick-demo                       Setup a quick demo with no authentication\n--syncusers                        Sync user accounts currently configured in MySQL to ProxySQL\n                                   May be used with --enable.\n                                   (deletes ProxySQL users not in MySQL)\n--sync-multi-cluster-users         Sync user accounts currently configured in MySQL to ProxySQL\n                                   May be used with --enable.\n                                   (doesn't delete ProxySQL users not in MySQL)\n--version, -v                      Print version info\n</code></pre> <p>Note</p> <p>Before using the <code>proxysql-admin</code> tool, ensure that ProxySQL and    Percona XtraDB Cluster nodes you want to add are running. For security purposes, please ensure to change the default user settings in the ProxySQL    configuration file.</p>"},{"location":"howtos/proxysql-v1.html#preparing-configuration-file","title":"Preparing Configuration File","text":"<p>It is recommended to provide connection and authentication information in the ProxySQL configuration file (<code>/etc/proxysql-admin.cnf</code>), instead of specifying it on the command line.</p> <p>By default, the configuration file contains the following:</p> <pre><code># proxysql admin interface credentials.\nexport PROXYSQL_DATADIR='/var/lib/proxysql'\nexport PROXYSQL_USERNAME='admin'\nexport PROXYSQL_PASSWORD='admin'\nexport PROXYSQL_HOSTNAME='localhost'\nexport PROXYSQL_PORT='6032'\n\n# PXC admin credentials for connecting to pxc-cluster-node.\nexport CLUSTER_USERNAME='admin'\nexport CLUSTER_PASSWORD='admin'\nexport CLUSTER_HOSTNAME='localhost'\nexport CLUSTER_PORT='3306'\n\n# proxysql monitoring user. proxysql admin script will create this user in pxc to monitor pxc-nodes.\nexport MONITOR_USERNAME='monitor'\nexport MONITOR_PASSWORD='monit0r'\n\n# Application user to connect to pxc-node through proxysql\nexport CLUSTER_APP_USERNAME='proxysql_user'\nexport CLUSTER_APP_PASSWORD='passw0rd'\n\n# ProxySQL read/write hostgroup\nexport WRITE_HOSTGROUP_ID='10'\nexport READ_HOSTGROUP_ID='11'\n\n# ProxySQL read/write configuration mode.\nexport MODE=\"singlewrite\"\n\n# Writer-is-reader configuration\nexport WRITER_IS_READER=\"ondemand\"\n\n# max_connections default (used only when INSERTing a new mysql_servers entry)\nexport MAX_CONNECTIONS=\"1000\"\n</code></pre> <p>Note</p> <p>It is recommended to change default ProxySQL credentials    before running ProxySQL in production.    Make sure that you provide ProxySQL location and credentials    in the configuration file.</p> <p>Provide superuser credentials for one of the Percona XtraDB Cluster nodes.    The <code>proxysql-admin</code> script will detect    other nodes in the cluster automatically.</p>"},{"location":"howtos/proxysql-v1.html#enabling-proxysql","title":"Enabling ProxySQL","text":"<p>Use the <code>--enable</code> option to automatically configure a Percona XtraDB Cluster node into ProxySQL. The <code>proxysql-admin</code> tool will do the following:</p> <ul> <li> <p>Add Percona XtraDB Cluster node into the ProxySQL database</p> </li> <li> <p>Add the <code>proxysql_galera_checker</code> monitoring script into the ProxySQL <code>scheduler</code> table if it is not available. This script checks for desynced nodes and temporarily deactivates them. It also calls the <code>proxysql_node_monitor</code> script, which checks cluster node membership and re-configures ProxySQL if the membership changes.</p> </li> <li> <p>Create two new Percona XtraDB Cluster users with the <code>USAGE</code> privilege on the node and add them to ProxySQL configuration, if they are not already configured. ProxySQL uses one user for monitoring cluster nodes, and the other one is used for communicating with the cluster. Make sure to use super user credentials from Cluster to setup the default users.</p> </li> </ul> <p>!!! warning</p> <pre><code>  Running more then one copy of `proxysql_galera_check` in the same runtime\n  environment simultaneously is not supported and may lead to undefined\n  behavior.\n\n  To avoid this problem, Galera process identification prevents a duplicate\n  script execution in most cases. However, in some rare cases, it may be\n  possible to circumvent this check if you run more then one copy of\n  `proxysql_galera_check`.\n</code></pre> <p>The following example shows how to add a Percona XtraDB Cluster node   using the ProxySQL configuration file   with all necessary connection and authentication information:</p> <pre><code>$ proxysql-admin --config-file=/etc/proxysql-admin.cnf --enable\n</code></pre> <p>The output</p> <pre><code>This script will assist with configuring ProxySQL for use with\nPercona XtraDB Cluster (currently only PXC in combination with ProxySQL is supported)\n\nProxySQL read/write configuration mode is singlewrite\n\nConfiguring the ProxySQL monitoring user.  ProxySQL monitor user name as per\ncommand line/config-file is monitor\n\nUser 'monitor'@'127.%' has been added with USAGE privileges\n\nConfiguring the Percona XtraDB Cluster application user to connect through ProxySQL\nPercona XtraDB Cluster application user name as per command line/config-file is proxysql_user\n\nPercona XtraDB Cluster application user 'proxysql_user'@'127.%' has been added with ALL privileges, this user is created for testing purposes\nAdding the Percona XtraDB Cluster server nodes to ProxySQL\n\nWrite node info\n\n+-----------+--------------+-------+--------+\n| hostname  | hostgroup_id | port  | weight |\n+-----------+--------------+-------+--------+\n| 127.0.0.1 | 10           | 26100 | 1000   |\n+-----------+--------------+-------+--------+\n\nProxySQL configuration completed!\n\nProxySQL has been successfully configured to use with Percona XtraDB Cluster\n\nYou can use the following login credentials to connect your application through ProxySQL\n\n$ mysql --user=proxysql_user -p --host=localhost --port=6033 --protocol=tcp\n</code></pre> <pre><code>mysql&gt; select hostgroup_id,hostname,port,status,comment from mysql_servers;\n</code></pre> <p>The output</p> <pre><code>      +--------------+-----------+-------+--------+---------+\n      | hostgroup_id | hostname  | port  | status | comment |\n      +--------------+-----------+-------+--------+---------+\n      | 11           | 127.0.0.1 | 25400 | ONLINE | READ    |\n      | 10           | 127.0.0.1 | 25000 | ONLINE | WRITE   |\n      | 11           | 127.0.0.1 | 25100 | ONLINE | READ    |\n      | 11           | 127.0.0.1 | 25200 | ONLINE | READ    |\n      | 11           | 127.0.0.1 | 25300 | ONLINE | READ    |\n      +--------------+-----------+-------+--------+---------+\n      5 rows in set (0.00 sec)\n</code></pre>"},{"location":"howtos/proxysql-v1.html#disabling-proxysql","title":"Disabling ProxySQL","text":"<p>Use the <code>--disable</code> option to remove a Percona XtraDB Cluster node\u2019s configuration from ProxySQL. The <code>proxysql-admin</code> tool will do the following:</p> <ul> <li> <p>Remove Percona XtraDB Cluster node from the ProxySQL database</p> </li> <li> <p>Stop the ProxySQL monitoring daemon for this node</p> </li> <li> <p>Remove the application user for this cluster</p> </li> <li> <p>Remove any query rules set up for this cluster</p> </li> </ul> <p>The following example shows how to disable ProxySQL   and remove the Percona XtraDB Cluster node:</p> <pre><code>$ proxysql-admin --config-file=/etc/proxysql-admin.cnf --disable\n</code></pre> <p>The examle of the output:</p> <pre><code>ProxySQL configuration removed!\n</code></pre>"},{"location":"howtos/proxysql-v1.html#additional-options","title":"Additional Options","text":"<p>The following extra options can be used:</p> <ul> <li><code>--adduser</code></li> </ul> <p>Add Percona XtraDB Cluster application user to ProxySQL database.</p> <pre><code>$ proxysql-admin --config-file=/etc/proxysql-admin.cnf --adduser\n</code></pre> <p>The examle of the output:</p> <pre><code>Adding Percona XtraDB Cluster application user to ProxySQL database\nEnter Percona XtraDB Cluster application user name: cluster_user\nEnter Percona XtraDB Cluster application user password: cluster_passw0Rd\nAdded Percona XtraDB Cluster application user to ProxySQL database!\n</code></pre> <ul> <li><code>--syncusers</code></li> </ul> <p>Sync user accounts currently configured in Percona XtraDB Cluster to ProxySQL database   except users with no password and the <code>admin</code> user.</p> <p>!!! note</p> <pre><code>  This option also deletes users\n  that are not in Percona XtraDB Cluster from ProxySQL database.\n</code></pre> <ul> <li><code>--sync-multi-cluster-users</code></li> </ul> <p>This option works in the same way as \u2013syncusers but it does not delete ProxySQL   users that are not present in the Percona XtraDB Cluster. It is to be used when   syncing proxysql instances that manage multiple clusters.</p> <ul> <li><code>--node-check-interval</code></li> </ul> <p>This option configures the interval for monitoring via the   <code>proxysql_galera_checker</code> script (in milliseconds).</p> <pre><code>$ proxysql-admin --config-file=/etc/proxysql-admin.cnf \\\n --node-check-interval=5000 --enable\n</code></pre> <ul> <li><code>--mode</code></li> </ul> <p>Set the read/write mode for Percona XtraDB Cluster nodes in ProxySQL database,   based on the hostgroup.   Supported modes are <code>loadbal</code> and <code>singlewrite</code>.</p> <pre><code>* `singlewrite` is the default mode,\n  it will accept writes only on one single node\n  (based on the info you provide in `--write-node`).\n  Remaining nodes will accept only read statements.\n\n  Servers can be separated by commas, for example:\n\n  ```text\n  10.0.0.51:3306,10.0.0.52:3306\n  ```\n\n  In the previous example, `10.0.0.51:3306` will be in the writer hostgroup\n  if it is ONLINE.\n  If it is OFFLINE, then `10.0.0.52:3306` will go into the writer hostgroup.\n  And if that node also goes down, then one of the remaining nodes\n  will be randomly chosen for the writer hostgroup.\n  The configuration file is deleted when `--disable` is used.\n\n* `singlewrite` mode setup:\n\n  ```text\n  $ sudo grep \"MODE\" /etc/proxysql-admin.cnf\n  export MODE=\"singlewrite\"\n  $ sudo proxysql-admin --config-file=/etc/proxysql-admin.cnf --write-node=127.0.0.1:25000 --enable\n  ProxySQL read/write configuration mode is singlewrite\n  [..]\n  ProxySQL configuration completed!\n  ```\n\n  To check the configuration you can run:\n\n  ```sql\n  mysql&gt; SELECT hostgroup_id,hostname,port,status,comment FROM mysql_servers;\n  ```\n\n  The example of the output is the following:\n\n  ```text\n  +--------------+-----------+-------+--------+---------+\n  | hostgroup_id | hostname  | port  | status | comment |\n  +--------------+-----------+-------+--------+---------+\n  | 11           | 127.0.0.1 | 25400 | ONLINE | READ    |\n  | 10           | 127.0.0.1 | 25000 | ONLINE | WRITE   |\n  | 11           | 127.0.0.1 | 25100 | ONLINE | READ    |\n  | 11           | 127.0.0.1 | 25200 | ONLINE | READ    |\n  | 11           | 127.0.0.1 | 25300 | ONLINE | READ    |\n  +--------------+-----------+-------+--------+---------+\n  5 rows in set (0.00 sec)\n  ```\n\n* The `loadbal` mode uses a set of evenly weighted read/write nodes.\n\n  `loadbal` mode setup:\n\n  ```text\n  $ sudo proxysql-admin --config-file=/etc/proxysql-admin.cnf --mode=loadbal --enable\n\n  This script will assist with configuring ProxySQL (currently only Percona XtraDB cluster in combination with ProxySQL is supported)\n\n  ProxySQL read/write configuration mode is loadbal\n  [..]\n  ProxySQL has been successfully configured to use with Percona XtraDB Cluster\n\n  You can use the following login credentials to connect your application through ProxySQL\n\n  mysql --user=proxysql_user --password=*****  --host=127.0.0.1 --port=6033 --protocol=tcp\n  ```\n\n  To check the configuration you can run:\n\n  ```sql\n  mysql&gt; SELECT hostgroup_id,hostname,port,status,comment FROM mysql_servers;\n  ```\n\n  The example of the output is the following:\n\n  ```text\n  +--------------+-----------+-------+--------+-----------+\n  | hostgroup_id | hostname  | port  | status | comment   |\n  +--------------+-----------+-------+--------+-----------+\n  | 10           | 127.0.0.1 | 25400 | ONLINE | READWRITE |\n  | 10           | 127.0.0.1 | 25000 | ONLINE | READWRITE |\n  | 10           | 127.0.0.1 | 25100 | ONLINE | READWRITE |\n  | 10           | 127.0.0.1 | 25200 | ONLINE | READWRITE |\n  | 10           | 127.0.0.1 | 25300 | ONLINE | READWRITE |\n  +--------------+-----------+-------+--------+-----------+\n  5 rows in set (0.01 sec)\n  ```\n</code></pre> <ul> <li><code>--quick-demo</code></li> </ul> <p>This option is used to setup dummy ProxySQL configuration.</p> <pre><code>$ sudo  proxysql-admin  --enable --quick-demo\n\nYou have selected the dry test run mode. WARNING: This will create a test user (with all privileges) in the Percona XtraDB Cluster &amp; ProxySQL installations.\n\nYou may want to delete this user after you complete your testing!\n\nWould you like to proceed with '--quick-demo' [y/n] ? y\n\nSetting up proxysql test configuration!\n\nDo you want to use the default ProxySQL credentials (admin:admin:6032:127.0.0.1) [y/n] ? y\nDo you want to use the default Percona XtraDB Cluster credentials (root::3306:127.0.0.1) [y/n] ? n\n\nEnter the Percona XtraDB Cluster username (super user): root\nEnter the Percona XtraDB Cluster user password:\nEnter the Percona XtraDB Cluster port: 25100\nEnter the Percona XtraDB Cluster hostname: localhost\n\nProxySQL read/write configuration mode is singlewrite\n\nConfiguring ProxySQL monitoring user..\n\nUser 'monitor'@'127.%' has been added with USAGE privilege\n\nConfiguring the Percona XtraDB Cluster application user to connect through ProxySQL\n\nPercona XtraDB Cluster application user 'pxc_test_user'@'127.%' has been added with ALL privileges, this user is created for testing purposes\n\nAdding the Percona XtraDB Cluster server nodes to ProxySQL\n\nProxySQL configuration completed!\n\nProxySQL has been successfully configured to use with Percona XtraDB Cluster\n\nYou can use the following login credentials to connect your application through ProxySQL\n\nmysql --user=pxc_test_user  --host=127.0.0.1 --port=6033 --protocol=tcp\n</code></pre> <ul> <li><code>--include-slaves=host_name:port</code></li> </ul> <p>This option helps to include specified replica node(s) to ProxySQL database.   These nodes will go into the reader hostgroup and will only be put into the   writer hostgroup if all cluster nodes are down. Replicas must be read only. Can   accept comma delimited list. If this is used, make sure <code>read_only=1</code> is   included into the replica\u2019s <code>my.cnf</code> configuration file.</p> <p>!!! note</p> <pre><code>  With `loadbal` mode replica hosts only accept read/write requests\n  when all cluster nodes are down.\n</code></pre>"},{"location":"howtos/proxysql-v1.html#proxysql-status-script","title":"ProxySQL Status script","text":"<p>There is a simple script to dump ProxySQL configuration and statistics:</p> <pre><code>Usage:\n\nproxysql-status admin admin 127.0.0.1 6032\n</code></pre>"},{"location":"howtos/proxysql-v2.html","title":"The proxysql-admin Tool with ProxySQL 2.0.x","text":"<p>The ProxySQL and ProxySQL-Admin documentation provides information on installing and running ProxySQL.</p> <p>ProxySQL is a tool that performs like a proxy between Percona XtraDB Cluster and your client application. ProxySQL manages a connection pool, which caches your connections and keeps the connections open for future requests. ProxySQL is designed to run continuously without being restarted.</p> <p>Without a connection pool, each SQL request opens a connections to the remote node. When the SQL request is complete, the connection is closed. A new one is opened on the next SQL request.</p> <p>ProxySQL maintains the connection pool. The pool allows a certain number of connections to remain open. A connection is reused or closed if not reused within a period. You connect to the proxy and the tool forwards your requests to the cluster.</p> <p>ProxySQL runs as a daemon watched by a monitoring process which can restart ProxySQL in case of an unexpected exit to minimize downtime. The daemon accepts incoming traffic from MySQL clients and forwards the traffic to backend MySQL servers.</p> <p>The configuration options include runtime parameters, server grouping, and traffic-related parameters. Many of the settings can be done at runtime using queries that are similar to SQL statements.</p>"},{"location":"howtos/proxysql.html","title":"Load balancing with ProxySQL","text":"<p>ProxySQL is a high-performance SQL proxy.  ProxySQL runs as a daemon watched by a monitoring process.  The process monitors the daemon and restarts it in case of a crash to minimize downtime.</p> <p>The daemon accepts incoming traffic from MySQL clients and forwards it to backend MySQL servers.</p> <p>The proxy is designed to run continuously without needing to be restarted.  Most configuration can be done at runtime using queries similar to SQL statements. These include runtime parameters, server grouping, and traffic-related settings.</p> <p>Note</p> <p>For more information about ProxySQL, see ProxySQL documentation.</p> <p>ProxySQL is available from the Percona software repositories in two versions. ProxySQL v1 does not natively support Percona XtraDB Cluster and requires custom bash scripts to keep track of the status of Percona XtraDB Cluster nodes using the ProxySQL scheduler.</p> <p>ProxySQL v2 natively supports Percona XtraDB Cluster. With this version, <code>proxysql-admin</code> tool does not require custom scripts to keep track of Percona XtraDB Cluster status.</p> <ul> <li> <p>Using ProxySQL v1 with <code>proxysql-admin</code></p> </li> <li> <p>Installing ProxySQL v1</p> </li> <li> <p>Automatic Configuration</p> <ul> <li> <p>Preparing Configuration File</p> </li> <li> <p>Enabling ProxySQL</p> </li> <li> <p>Disabling ProxySQL</p> </li> <li> <p>Additional Options</p> </li> <li> <p>ProxySQL Status script</p> </li> </ul> </li> <li> <p>The proxysql-admin Tool with ProxySQL 2.0.x</p> </li> </ul>"},{"location":"howtos/proxysql.html#manual-configuration","title":"Manual Configuration","text":"<p>This tutorial describes how to configure ProxySQL with three Percona XtraDB Cluster nodes.</p> Node Host Name IP address Node 1 pxc1 192.168.70.61 Node 2 pxc2 192.168.70.62 Node 3 pxc3 192.168.70.63 Node 4 proxysql 192.168.70.64 <p>ProxySQL can be configured either using the <code>/etc/proxysql.cnf</code> file or through the admin interface. Using the admin interface is preferable, because it allows you to change the configuration dynamically (without having to restart the proxy).</p> <p>To connect to the ProxySQL admin interface, you need a <code>mysql</code> client. You can either connect to the admin interface from Percona XtraDB Cluster nodes that already have the <code>mysql</code> client installed (Node 1, Node 2, Node 3) or install the client on Node 4 and connect locally. For this tutorial, install Percona XtraDB Cluster on Node 4:</p> <ul> <li>On Debian or Ubuntu:</li> </ul> <pre><code>root@proxysql:~# apt install percona-xtradb-cluster-client-5.7\n</code></pre> <ul> <li>On Red Hat Enterprise Linux or CentOS:</li> </ul> <pre><code>[root@proxysql ~]# yum install Percona-XtraDB-Cluster-client-57\n</code></pre> <p>To connect to the admin interface, use the credentials, host name and port specified in the global variables.</p> <p>Warning</p> <p>Do not use default credentials in production!</p> <p>The following example shows how to connect to the ProxySQL admin interface with default credentials:</p> <pre><code>root@proxysql:~# mysql -u admin -padmin -h 127.0.0.1 -P 6032\n</code></pre> <p>The example of the output is the following:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 2\nServer version: 5.1.30 (ProxySQL Admin Module)\n\nCopyright (c) 2009-2016 Percona LLC and/or its affiliates\nCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql@proxysql&gt;\n</code></pre> <p>To see the ProxySQL databases and tables use the following commands:</p> <pre><code>mysql@proxysql&gt; SHOW DATABASES;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+-----+---------+-------------------------------+\n| seq | name    | file                          |\n+-----+---------+-------------------------------+\n| 0   | main    |                               |\n| 2   | disk    | /var/lib/proxysql/proxysql.db |\n| 3   | stats   |                               |\n| 4   | monitor |                               |\n+-----+---------+-------------------------------+\n4 rows in set (0.00 sec)\n</code></pre> <pre><code>mysql@proxysql&gt; SHOW TABLES;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------------------------------+\n| tables                               |\n+--------------------------------------+\n| global_variables                     |\n| mysql_collations                     |\n| mysql_query_rules                    |\n| mysql_replication_hostgroups         |\n| mysql_servers                        |\n| mysql_users                          |\n| runtime_global_variables             |\n| runtime_mysql_query_rules            |\n| runtime_mysql_replication_hostgroups |\n| runtime_mysql_servers                |\n| runtime_scheduler                    |\n| scheduler                            |\n+--------------------------------------+\n12 rows in set (0.00 sec)\n</code></pre> <p>For more information about admin databases and tables, see Admin Tables</p> <p>Note</p> <p>ProxySQL has 3 areas where the configuration can reside:</p> <ul> <li> <p>MEMORY (your current working place)</p> </li> <li> <p>RUNTIME (the production settings)</p> </li> <li> <p>DISK (durable configuration, saved inside an SQLITE database)</p> </li> </ul> <p>When you change a parameter, you change it in MEMORY area.   That is done by design to allow you to test the changes   before pushing to production (RUNTIME), or save them to disk.</p>"},{"location":"howtos/proxysql.html#adding-cluster-nodes-to-proxysql","title":"Adding cluster nodes to ProxySQL","text":"<p>To configure the backend Percona XtraDB Cluster nodes in ProxySQL, insert corresponding records into the <code>mysql_servers</code> table.</p> <p>Note</p> <p>ProxySQL uses the concept of hostgroups to group cluster nodes.   This enables you to balance the load in a cluster by   routing different types of traffic to different groups.   There are many ways you can configure hostgroups   (for example source and replicas, read and write load, etc.)   and a every node can be a member of multiple hostgroups.</p> <p>This example adds three Percona XtraDB Cluster nodes to the default hostgroup (<code>0</code>), which receives both write and read traffic:</p> <pre><code>mysql@proxysql&gt; INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'192.168.70.61',3306);\nmysql@proxysql&gt; INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'192.168.70.62',3306);\nmysql@proxysql&gt; INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'192.168.70.63',3306);\n</code></pre> <p>To see the nodes:</p> <pre><code>mysql@proxysql&gt; SELECT * FROM mysql_servers;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+\n| hostgroup_id | hostname      | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |\n+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+\n| 0            | 192.168.70.61 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |\n| 0            | 192.168.70.62 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |\n| 0            | 192.168.70.63 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |\n+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+\n3 rows in set (0.00 sec)\n</code></pre>"},{"location":"howtos/proxysql.html#creating-proxysql-monitoring-user","title":"Creating ProxySQL Monitoring User","text":"<p>To enable monitoring of Percona XtraDB Cluster nodes in ProxySQL, create a user with <code>USAGE</code> privilege on any node in the cluster and configure the user in ProxySQL.</p> <p>The following example shows how to add a monitoring user on Node 2:</p> <pre><code>mysql@pxc2&gt; CREATE USER 'proxysql'@'%' IDENTIFIED BY 'ProxySQLPa55';\nmysql@pxc2&gt; GRANT USAGE ON *.* TO 'proxysql'@'%';\n</code></pre> <p>The following example shows how to configure this user on the ProxySQL node:</p> <pre><code>mysql@proxysql&gt; UPDATE global_variables SET variable_value='proxysql'\n              WHERE variable_name='mysql-monitor_username';\nmysql@proxysql&gt; UPDATE global_variables SET variable_value='ProxySQLPa55'\n              WHERE variable_name='mysql-monitor_password';\n</code></pre> <p>To load this configuration at runtime, issue a <code>LOAD</code> command. To save these changes to disk (ensuring that they persist after ProxySQL shuts down), issue a <code>SAVE</code> command.</p> <pre><code>mysql@proxysql&gt; LOAD MYSQL VARIABLES TO RUNTIME;\nmysql@proxysql&gt; SAVE MYSQL VARIABLES TO DISK;\n</code></pre> <p>To ensure that monitoring is enabled, check the monitoring logs:</p> <pre><code>mysql@proxysql&gt; SELECT * FROM monitor.mysql_server_connect_log ORDER BY time_start_us DESC LIMIT 6;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+---------------+------+------------------+----------------------+---------------+\n| hostname      | port | time_start_us    | connect_success_time | connect_error |\n+---------------+------+------------------+----------------------+---------------+\n| 192.168.70.61 | 3306 | 1469635762434625 | 1695                 | NULL          |\n| 192.168.70.62 | 3306 | 1469635762434625 | 1779                 | NULL          |\n| 192.168.70.63 | 3306 | 1469635762434625 | 1627                 | NULL          |\n| 192.168.70.61 | 3306 | 1469635642434517 | 1557                 | NULL          |\n| 192.168.70.62 | 3306 | 1469635642434517 | 2737                 | NULL          |\n| 192.168.70.63 | 3306 | 1469635642434517 | 1447                 | NULL          |\n+---------------+------+------------------+----------------------+---------------+\n6 rows in set (0.00 sec)\n</code></pre> <pre><code>mysql&gt; SELECT * FROM monitor.mysql_server_ping_log ORDER BY time_start_us DESC LIMIT 6;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+---------------+------+------------------+-------------------+------------+\n| hostname      | port | time_start_us    | ping_success_time | ping_error |\n+---------------+------+------------------+-------------------+------------+\n| 192.168.70.61 | 3306 | 1469635762416190 | 948               | NULL       |\n| 192.168.70.62 | 3306 | 1469635762416190 | 803               | NULL       |\n| 192.168.70.63 | 3306 | 1469635762416190 | 711               | NULL       |\n| 192.168.70.61 | 3306 | 1469635702416062 | 783               | NULL       |\n| 192.168.70.62 | 3306 | 1469635702416062 | 631               | NULL       |\n| 192.168.70.63 | 3306 | 1469635702416062 | 542               | NULL       |\n+---------------+------+------------------+-------------------+------------+\n6 rows in set (0.00 sec)\n</code></pre> <p>The previous examples show that ProxySQL is able to connect and ping the nodes you added.</p> <p>To enable monitoring of these nodes, load them at runtime:</p> <pre><code>mysql@proxysql&gt; LOAD MYSQL SERVERS TO RUNTIME;\n</code></pre>"},{"location":"howtos/proxysql.html#creating-proxysql-client-user","title":"Creating ProxySQL Client User","text":"<p>ProxySQL must have users that can access backend nodes to manage connections.</p> <p>To add a user, insert credentials into <code>mysql_users</code> table:</p> <pre><code>mysql@proxysql&gt; INSERT INTO mysql_users (username,password) VALUES ('sbuser','sbpass');\n</code></pre> <p>The example of the output is the following:</p> <pre><code>Query OK, 1 row affected (0.00 sec)\n</code></pre> <p>Note</p> <p>ProxySQL currently doesn\u2019t encrypt passwords.</p> <p>Load the user into runtime space and save these changes to disk (ensuring that they persist after ProxySQL shuts down):</p> <pre><code>mysql@proxysql&gt; LOAD MYSQL USERS TO RUNTIME;\nmysql@proxysql&gt; SAVE MYSQL USERS TO DISK;\n</code></pre> <p>To confirm that the user has been set up correctly, you can try to log in:</p> <pre><code>root@proxysql:~# mysql -u sbuser -psbpass -h 127.0.0.1 -P 6033\n</code></pre> <p>The example of the output is the following:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 1491\nServer version: 5.1.30 (ProxySQL)\n\nCopyright (c) 2009-2016 Percona LLC and/or its affiliates\nCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n</code></pre> <p>To provide read/write access to the cluster for ProxySQL, add this user on one of the Percona XtraDB Cluster nodes:</p> <pre><code>mysql@pxc3&gt; CREATE USER 'sbuser'@'192.168.70.64' IDENTIFIED BY 'sbpass';\n</code></pre> <pre><code>Query OK, 0 rows affected (0.01 sec)\n\n```sql\nmysql@pxc3&gt; GRANT ALL ON *.* TO 'sbuser'@'192.168.70.64';\n</code></pre> <pre><code>Query OK, 0 rows affected (0.00 sec)\n</code></pre>"},{"location":"howtos/proxysql.html#adding-galera-support-in-proxysql-v1","title":"Adding Galera Support in ProxySQL v1","text":"<p>ProxySQL v2 supports monitoring the status Percona XtraDB Cluster nodes. ProxySQL v1 cannot detect a node which is not in <code>Synced</code> state.  To monitor the status of Percona XtraDB Cluster nodes in ProxySQL v1, use the <code>proxysql_galera_checker</code> script.  The script is located here: <code>/usr/bin/proxysql_galera_checker</code>.</p> <p>To use this script, load it into ProxySQL v1 Scheduler.</p> <p>The following example shows how you can load the script for default ProxySQL v1 configuration:</p> <pre><code>INSERT INTO scheduler (active,interval_ms,filename,arg1,comment)\nVALUES (1,10000,'/usr/bin/proxysql_galera_checker','--config-file=/etc/proxysql-admin.cnf\n--write-hg=10 --read-hg=11 --writer-count=1 --mode=singlewrite\n--priority=192.168.100.20:3306,192.168.100.40:3306,192.168.100.10:3306,192.168.100.30:3306\n--log=/var/lib/proxysql/cluster_one_proxysql_galera_check.log','cluster_one');\n</code></pre> <p>This scheduler script accepts the following options in the <code>arg1</code> argument:</p> Option Name Required Description <code>--config-file</code> Configuration File Yes Specify <code>proxysql-admin</code> configuration file. <code>--write-hg</code> <code>HOSTGROUP WRITERS</code> No Specify ProxySQL write hostgroup. <code>--read-hg</code> <code>HOSTGROUP READERS</code> No Specify ProxySQL read hostgroup. <code>--writer-count</code> <code>NUMBER WRITERS</code> No Specify write nodes count. <code>0</code> for <code>loadbal</code> mode and <code>1</code> for <code>singlewrite</code> mode. <code>--mode</code> <code>MODE</code> No Specify ProxySQL read/write configuration mode. <code>--priority</code> <code>WRITER PRIORITY</code> No Specify write nodes priority. <code>--log</code> <code>LOG FILE</code> No Specify <code>proxysql_galera_checker</code> log file. <p>Note</p> <p>Specify cluster name in comment column.</p> <p>To load the scheduler changes into the runtime space:</p> <pre><code>mysql@proxysql&gt; LOAD SCHEDULER TO RUNTIME;\n</code></pre> <p>To make sure that the script has been loaded, check the <code>runtime_scheduler</code> table:</p> <p><pre><code>mysql@proxysql&gt; SELECT * FROM scheduler\\G;\n</code></pre> The example of the output is the following:</p> <pre><code>*************************** 1. row ***************************\n         id: 1\n     active: 1\ninterval_ms: 10000\n   filename: /bin/proxysql_galera_checker\n       arg1: --config-file=/etc/proxysql-admin.cnf --write-hg=10 --read-hg=11\n             --writer-count=1 --mode=singlewrite\n             --priority=192.168.100.20:3306,192.168.100.40:3306,192.168.100.10:3306,192.168.100.30:3306\n             --log=/var/lib/proxysql/cluster_one_proxysql_galera_check.log\n       arg2: NULL\n       arg3: NULL\n       arg4: NULL\n       arg5: NULL\n    comment: cluster_one\n1 row in set (0.00 sec)\n</code></pre> <p>To check the status of available nodes, run the following command:</p> <pre><code>mysql@proxysql&gt; SELECT hostgroup_id,hostname,port,status FROM mysql_servers;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------+---------------+------+--------+\n| hostgroup_id | hostname      | port | status |\n+--------------+---------------+------+--------+\n| 0            | 192.168.70.61 | 3306 | ONLINE |\n| 0            | 192.168.70.62 | 3306 | ONLINE |\n| 0            | 192.168.70.63 | 3306 | ONLINE |\n+--------------+---------------+------+--------+\n3 rows in set (0.00 sec)\n</code></pre> <p>Note</p> <p>Each node can have the following status:</p> <ul> <li> <p><code>ONLINE</code>: backend node is fully operational.</p> </li> <li> <p><code>SHUNNED</code>: backend node is temporarily taken out of use,   because either too many connection errors hapenned in a short time,   or replication lag exceeded the allowed threshold.</p> </li> <li> <p><code>OFFLINE_SOFT</code>: new incoming connections aren\u2019t accepted,   while existing connections are kept until they become inactive.   In other words, connections are kept in use   until the current transaction is completed.   This allows to gracefully detach a backend node.</p> </li> <li> <p><code>OFFLINE_HARD</code>: existing connections are dropped,   and new incoming connections aren\u2019t accepted.   This is equivalent to deleting the node from a hostgroup,   or temporarily taking it out of the hostgroup for maintenance.</p> </li> </ul>"},{"location":"howtos/proxysql.html#testing-cluster-with-sysbench","title":"Testing Cluster with sysbench","text":"<p>You can install <code>sysbench</code> from Percona software repositories:</p> <ul> <li>For Debian or Ubuntu:</li> </ul> <pre><code>root@proxysql:~# apt install sysbench\n</code></pre> <ul> <li>For Red Hat Enterprise Linux or CentOS</li> </ul> <pre><code>[root@proxysql ~]# yum install sysbench\n</code></pre> <p>Note</p> <p><code>sysbench</code> requires ProxySQL client user credentials that you creted in Creating ProxySQL Client User.</p> <ul> <li>Create the database that will be used for testing on one of the Percona XtraDB Cluster nodes:</li> </ul> <pre><code>mysql@pxc1&gt; CREATE DATABASE sbtest;\n</code></pre> <ul> <li>Populate the table with data for the benchmark on the ProxySQL node:</li> </ul> <pre><code>root@proxysql:~# sysbench --report-interval=5 --num-threads=4 \\\n--num-requests=0 --max-time=20 \\\n--test=/usr/share/doc/sysbench/tests/db/oltp.lua \\\n--mysql-user='sbuser' --mysql-password='sbpass' \\\n--oltp-table-size=10000 --mysql-host=127.0.0.1 --mysql-port=6033 \\\nprepare\n</code></pre> <ul> <li>Run the benchmark on the ProxySQL node:</li> </ul> <pre><code>root@proxysql:~# sysbench --report-interval=5 --num-threads=4 \\\n  --num-requests=0 --max-time=20 \\\n  --test=/usr/share/doc/sysbench/tests/db/oltp.lua \\\n  --mysql-user='sbuser' --mysql-password='sbpass' \\\n  --oltp-table-size=10000 --mysql-host=127.0.0.1 --mysql-port=6033 \\\n  run\n</code></pre> <p>ProxySQL stores collected data in the <code>stats</code> schema:</p> <pre><code>mysql@proxysql&gt; SHOW TABLES FROM stats;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------------------------+\n| tables                         |\n+--------------------------------+\n| stats_mysql_query_rules        |\n| stats_mysql_commands_counters  |\n| stats_mysql_processlist        |\n| stats_mysql_connection_pool    |\n| stats_mysql_query_digest       |\n| stats_mysql_query_digest_reset |\n| stats_mysql_global             |\n+--------------------------------+\n</code></pre> <p>For example, to see the number of commands that run on the cluster:</p> <pre><code>mysql@proxysql&gt; SELECT * FROM stats_mysql_commands_counters;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+-------------------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+\n| Command           | Total_Time_us | Total_cnt | cnt_100us | cnt_500us | cnt_1ms | cnt_5ms | cnt_10ms | cnt_50ms | cnt_100ms | cnt_500ms | cnt_1s | cnt_5s | cnt_10s | cnt_INFs |\n+-------------------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+\n| ALTER_TABLE       | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| ANALYZE_TABLE     | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| BEGIN             | 2212625       | 3686      | 55        | 2162      | 899     | 569     | 1        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| CHANGE_MASTER     | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| COMMIT            | 21522591      | 3628      | 0         | 0         | 0       | 1765    | 1590     | 272      | 1         | 0         | 0      | 0      | 0       | 0        |\n| CREATE_DATABASE   | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| CREATE_INDEX      | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n...\n| DELETE            | 2904130       | 3670      | 35        | 1546      | 1346    | 723     | 19       | 1        | 0         | 0         | 0      | 0      | 0       | 0        |\n| DESCRIBE          | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n...\n| INSERT            | 19531649      | 3660      | 39        | 1588      | 1292    | 723     | 12       | 2        | 0         | 1         | 0      | 1      | 2       | 0        |\n...\n| SELECT            | 35049794      | 51605     | 501       | 26180     | 16606   | 8241    | 70       | 3        | 4         | 0         | 0      | 0      | 0       | 0        |\n| SELECT_FOR_UPDATE | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n...\n| UPDATE            | 6402302       | 7367      | 75        | 2503      | 3020    | 1743    | 23       | 3        | 0         | 0         | 0      | 0      | 0       | 0        |\n| USE               | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n| SHOW              | 19691         | 2         | 0         | 0         | 0       | 0       | 1        | 1        | 0         | 0         | 0      | 0      | 0       | 0        |\n| UNKNOWN           | 0             | 0         | 0         | 0         | 0       | 0       | 0        | 0        | 0         | 0         | 0      | 0      | 0       | 0        |\n+-------------------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+\n45 rows in set (0.00 sec)\n</code></pre>"},{"location":"howtos/proxysql.html#automatic-fail-over","title":"Automatic Fail-over","text":"<p>ProxySQL will automatically detect if a node is not available or not synced with the cluster.</p> <p>You can check the status of all available nodes by running:</p> <pre><code>mysql@proxysql&gt; SELECT hostgroup_id,hostname,port,status FROM mysql_servers;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------+---------------+------+--------+\n| hostgroup_id | hostname      | port | status |\n+--------------+---------------+------+--------+\n| 0            | 192.168.70.61 | 3306 | ONLINE |\n| 0            | 192.168.70.62 | 3306 | ONLINE |\n| 0            | 192.168.70.63 | 3306 | ONLINE |\n+--------------+---------------+------+--------+\n3 rows in set (0.00 sec)\n</code></pre> <p>To test problem detection and fail-over mechanism, shut down Node 3:</p> <pre><code>root@pxc3:~# service mysql stop\n</code></pre> <p>ProxySQL will detect that the node is down and update its status to <code>OFFLINE_SOFT</code>:</p> <pre><code>mysql@proxysql&gt; SELECT hostgroup_id,hostname,port,status FROM mysql_servers;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------+---------------+------+--------------+\n| hostgroup_id | hostname      | port | status       |\n+--------------+---------------+------+--------------+\n| 0            | 192.168.70.61 | 3306 | ONLINE       |\n| 0            | 192.168.70.62 | 3306 | ONLINE       |\n| 0            | 192.168.70.63 | 3306 | OFFLINE_SOFT |\n+--------------+---------------+------+--------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>Now start Node 3 again:</p> <pre><code>root@pxc3:~# service mysql start\n</code></pre> <p>The script will detect the change and mark the node as <code>ONLINE</code>:</p> <pre><code>mysql@proxysql&gt; SELECT hostgroup_id,hostname,port,status FROM mysql_servers;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------+---------------+------+--------+\n| hostgroup_id | hostname      | port | status |\n+--------------+---------------+------+--------+\n| 0            | 192.168.70.61 | 3306 | ONLINE |\n| 0            | 192.168.70.62 | 3306 | ONLINE |\n| 0            | 192.168.70.63 | 3306 | ONLINE |\n+--------------+---------------+------+--------+\n3 rows in set (0.00 sec)\n</code></pre>"},{"location":"howtos/proxysql.html#assisted-maintenance-mode","title":"Assisted Maintenance Mode","text":"<p>Usually, to take a node down for maintenance, you need to identify that node, update its status in ProxySQL to <code>OFFLINE_SOFT</code>, wait for ProxySQL to divert traffic from this node, and then initiate the shutdown or perform maintenance tasks. Percona XtraDB Cluster includes a special maintenance mode for nodes that enables you to take a node down without adjusting ProxySQL manually. This mode is controlled using the <code>pxc_maint_mode</code> variable, which is monitored by ProxySQL and can be set to one of the following values:</p> <ul> <li> <p><code>DISABLED</code>: This is the default state that tells ProxySQL to route traffic to the node as usual.</p> </li> <li> <p><code>SHUTDOWN</code>: This state is set automatically when you initiate node shutdown.</p> </li> </ul> <p>You may need to shut down a node when upgrading the OS, adding resources, changing hardware parts, relocating the server, etc.</p> <p>When you initiate node shutdown, Percona XtraDB Cluster does not send the signal immediately. Instead, it changes the state to <code>pxc_maint_mode=SHUTDOWN</code> and waits for a predefined period, which is determined by the value of the <code>pxc_maint_transition_period</code>. After detecting that the maintenance mode is set to <code>SHUTDOWN</code>, ProxySQL changes the status of this node to <code>OFFLINE_SOFT</code>, which stops creating new connections for the node. After the transition period ends, any long-running transactions that are still active are aborted.</p> <ul> <li><code>MAINTENANCE</code>: You can change to this state if you need to perform maintenace on a node without shutting it down.</li> </ul> <p>You may need to isolate the node for some time, so that it does not receive traffic from ProxySQL while you resize the buffer pool, truncate the undo log, defragment, or check disks, etc.</p> <p>To do this, manually set <code>pxc_maint_mode=MAINTENANCE</code>. Control is not returned to the user for the predefined period set by <code>pxc-maint_transaction_period</code>, 10 seconds by default. ProxySQL marks the node as OFFLINE, and avoids opening new connections for any DML transactions. ProxySQL does not terminate existing connections.</p> <p>Once control is returned, you can perform maintenance activity. </p> <p>Note</p> <p>Any data changes will still be replicated across the cluster.</p> <p>After you finish maintenance, set the mode back to <code>DISABLED</code>. When ProxySQL detects this, it starts routing traffic to the node again.</p>"},{"location":"howtos/singlebox.html","title":"How to set up a three-node cluster on a single box","text":"<p>This tutorial describes how to set up a 3-node cluster on a single physical box.</p> <p>For the purposes of this tutorial, assume the following:</p> <ul> <li> <p>The local IP address is <code>192.168.2.21</code>.</p> </li> <li> <p>Percona XtraDB Cluster is extracted from binary tarball into <code>/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64</code></p> </li> </ul> <p>To set up the cluster:</p> <ul> <li> <p>Create three MySQL configuration files for the corresponding nodes:</p> </li> <li> <p><code>/etc/my.4000.cnf</code></p> <pre><code>[mysqld]\nport = 4000\nsocket=/tmp/mysql.4000.sock\ndatadir=/data/bench/d1\nbasedir=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64\nuser=mysql\nlog_error=error.log\nbinlog_format=ROW\nwsrep_cluster_address='gcomm://192.168.2.21:5030,192.168.2.21:6030'\nwsrep_provider=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64/lib/libgalera_smm.so\nwsrep_sst_receive_address=192.168.2.21:4020\nwsrep_node_incoming_address=192.168.2.21\nwsrep_slave_threads=2\nwsrep_cluster_name=trimethylxanthine\nwsrep_provider_options = \"gmcast.listen_addr=tcp://192.168.2.21:4030;\"\nwsrep_sst_method=rsync\nwsrep_node_name=node4000\ninnodb_autoinc_lock_mode=2\n</code></pre> </li> <li> <p><code>/etc/my.5000.cnf</code></p> <pre><code>[mysqld]\nport = 5000\nsocket=/tmp/mysql.5000.sock\ndatadir=/data/bench/d2\nbasedir=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64\nuser=mysql\nlog_error=error.log\nbinlog_format=ROW\nwsrep_cluster_address='gcomm://192.168.2.21:4030,192.168.2.21:6030'\nwsrep_provider=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64/lib/libgalera_smm.so\nwsrep_sst_receive_address=192.168.2.21:5020\nwsrep_node_incoming_address=192.168.2.21\nwsrep_slave_threads=2\nwsrep_cluster_name=trimethylxanthine\nwsrep_provider_options = \"gmcast.listen_addr=tcp://192.168.2.21:5030;\"\nwsrep_sst_method=rsync\nwsrep_node_name=node5000\ninnodb_autoinc_lock_mode=2\n</code></pre> </li> <li> <p><code>/etc/my.6000.cnf</code></p> <pre><code>[mysqld]\nport = 6000\nsocket=/tmp/mysql.6000.sock\ndatadir=/data/bench/d3\nbasedir=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64\nuser=mysql\nlog_error=error.log\nbinlog_format=ROW\nwsrep_cluster_address='gcomm://192.168.2.21:4030,192.168.2.21:5030'\nwsrep_provider=/usr/local/Percona-XtraDB-Cluster-5.7.11-rel4beta-25.14.2.beta.Linux.x86_64/lib/libgalera_smm.so\nwsrep_sst_receive_address=192.168.2.21:6020\nwsrep_node_incoming_address=192.168.2.21\nwsrep_slave_threads=2\nwsrep_cluster_name=trimethylxanthine\nwsrep_provider_options = \"gmcast.listen_addr=tcp://192.168.2.21:6030;\"\nwsrep_sst_method=rsync\nwsrep_node_name=node6000\ninnodb_autoinc_lock_mode=2\n</code></pre> </li> <li> <p>Create three data directories for the nodes:</p> </li> <li> <p><code>/data/bench/d1</code></p> </li> <li> <p><code>/data/bench/d2</code></p> </li> <li> <p><code>/data/bench/d3</code></p> </li> <li> <p>Start the first node using the following command (from the Percona XtraDB Cluster install directory):</p> </li> </ul> <pre><code>$ bin/mysqld_safe --defaults-file=/etc/my.4000.cnf --wsrep-new-cluster\n</code></pre> <p>If the node starts correctly, you should see the following output:</p> <pre><code>111215 19:01:49 [Note] WSREP: Shifting JOINED -&gt; SYNCED (TO: 0)\n111215 19:01:49 [Note] WSREP: New cluster view: global state: 4c286ccc-2792-11e1-0800-94bd91e32efa:0, view# 1: Primary, number of nodes: 1, my index: 0, protocol version 1\n</code></pre> <p>To check the ports, run the following command:</p> <pre><code>$ netstat -anp | grep mysqld\n</code></pre> <p>The example of the output is the following:</p> <pre><code>tcp        0      0 192.168.2.21:4030           0.0.0.0:*                   LISTEN      21895/mysqld\ntcp        0      0 0.0.0.0:4000                0.0.0.0:*                   LISTEN      21895/mysqld\n</code></pre> <ul> <li>Start the second and third nodes:</li> </ul> <pre><code>bin/mysqld_safe --defaults-file=/etc/my.5000.cnf\nbin/mysqld_safe --defaults-file=/etc/my.6000.cnf\n</code></pre> <p>If the nodes start and join the cluster successful,   you should see the following output:</p> <pre><code>111215 19:22:26 [Note] WSREP: Shifting JOINER -&gt; JOINED (TO: 2)\n111215 19:22:26 [Note] WSREP: Shifting JOINED -&gt; SYNCED (TO: 2)\n111215 19:22:26 [Note] WSREP: Synchronized with group, ready for connections\n</code></pre> <p>To check the cluster size, run the following command:</p> <pre><code>$ mysql -h127.0.0.1 -P6000 -e \"show global status like 'wsrep_cluster_size';\"\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------------+-------+\n| Variable_name      | Value |\n+--------------------+-------+\n| wsrep_cluster_size | 3     |\n+--------------------+-------+\n</code></pre> <p>After that you can connect to any node and perform queries,   which will be automatically synchronized with other nodes.   For example, to create a database on the second node,   you can run the following command:</p> <pre><code>$ mysql -h127.0.0.1 -P5000 -e \"CREATE DATABASE hello_peter\"\n</code></pre>"},{"location":"howtos/ubuntu_howto.html","title":"Configuring Percona XtraDB Cluster on Ubuntu","text":"<p>This tutorial describes how to install and configure three Percona XtraDB Cluster nodes on Ubuntu 12.04.2 LTS servers, using the packages from Percona repositories.</p> <ul> <li> <p>Node 1</p> </li> <li> <p>Host name: <code>pxc1</code></p> </li> <li> <p>IP address: <code>192.168.70.61</code></p> </li> <li> <p>Node 2</p> </li> <li> <p>Host name: <code>pxc2</code></p> </li> <li> <p>IP address: <code>192.168.70.62</code></p> </li> <li> <p>Node 3</p> </li> <li> <p>Host name: <code>pxc3</code></p> </li> <li> <p>IP address: <code>192.168.70.63</code></p> </li> </ul>"},{"location":"howtos/ubuntu_howto.html#prerequisites","title":"Prerequisites","text":"<p>The procedure described in this tutorial requires he following:</p> <ul> <li> <p>All three nodes have Ubuntu 12.04.2 LTS installed.</p> </li> <li> <p>Firewall on all nodes is configured to allow connecting to ports 3306, 4444, 4567 and 4568.</p> </li> <li> <p>AppArmor profile for MySQL is disabled.</p> </li> </ul>"},{"location":"howtos/ubuntu_howto.html#step-1-installing-pxc","title":"Step 1. Installing PXC","text":"<p>Install Percona XtraDB Cluster on all three nodes as described in Installing Percona XtraDB Cluster on Debian or Ubuntu.</p> <p>Note</p> <p>Debian/Ubuntu installation prompts for root password. For this tutorial, set it to <code>Passw0rd</code>. After the packages have been installed, <code>mysqld</code> will start automatically. Stop <code>mysqld</code> on all three nodes using <code>/etc/init.d/mysql stop</code>.</p>"},{"location":"howtos/ubuntu_howto.html#step-2-configuring-the-first-node","title":"Step 2. Configuring the first node","text":"<p>Individual nodes should be configured to be able to bootstrap the cluster. For more information about bootstrapping the cluster, see Bootstrapping the First Node.</p> <ul> <li>Make sure that the configuration file <code>/etc/mysql/my.cnf</code> for the first node (<code>pxc1</code>) contains the following:</li> </ul> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib/libgalera_smm.so\n\n# Cluster connection URL contains the IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63\n\n# In order for Galera to work correctly, the binary log format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node #1 address\nwsrep_node_address=192.168.70.61\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n# Cluster name\nwsrep_cluster_name=my_ubuntu_cluster\n\n# Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cretPass\"\n</code></pre> <ul> <li>Start the first node with the following command:</li> </ul> <pre><code>[root@pxc1 ~]# /etc/init.d/mysql bootstrap-pxc\n</code></pre> <p>This command will start the first node and bootstrap the cluster.</p> <ul> <li>After the first node has been started, cluster status can be checked with the following command:</li> </ul> <pre><code>mysql&gt; show status like 'wsrep%';\n</code></pre> <p>This output shows that the cluster has been successfully bootstrapped.</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | b598af3e-ace3-11e2-0800-3e90eb9cd5d3 |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 1                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> <p>To perform State Snapshot Transfer using XtraBackup, set up a new user with proper privileges:</p> <pre><code>mysql@pxc1&gt; CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 's3cretPass';\nmysql@pxc1&gt; GRANT PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sstuser'@'localhost';\nmysql@pxc1&gt; FLUSH PRIVILEGES;\n</code></pre> <p>Note</p> <p>MySQL root account can also be used for performing SST, but it is more secure to use a different (non-root) user for this.</p>"},{"location":"howtos/ubuntu_howto.html#step-3-configuring-the-second-node","title":"Step 3. Configuring the second node","text":"<ul> <li>Make sure that the configuration file <code>/etc/mysql/my.cnf</code> on the second node (<code>pxc2</code>) contains the following:</li> </ul> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib/libgalera_smm.so\n\n# Cluster connection URL contains IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63\n\n# In order for Galera to work correctly binlog format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node #2 address\nwsrep_node_address=192.168.70.62\n\n# Cluster name\nwsrep_cluster_name=my_ubuntu_cluster\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n# Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cretPass\"\n</code></pre> <ul> <li>Start the second node with the following command:</li> </ul> <pre><code>[root@pxc2 ~]# /etc/init.d/mysql start\n</code></pre> <ul> <li>After the server has been started, it should receive SST automatically.   Cluster status can now be checked on both nodes.   The following is an example of status from the second node (<code>pxc2</code>):</li> </ul> <pre><code>mysql&gt; show status like 'wsrep%';\n</code></pre> <p>This output shows that the new node has been successfully added to the cluster. </p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | b598af3e-ace3-11e2-0800-3e90eb9cd5d3 |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 2                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre>"},{"location":"howtos/ubuntu_howto.html#step-4-configuring-the-third-node","title":"Step 4. Configuring the third node","text":"<ul> <li>Make sure that the MySQL configuration file <code>/etc/mysql/my.cnf</code> on the third node (<code>pxc3</code>) contains the following:</li> </ul> <pre><code>[mysqld]\n\ndatadir=/var/lib/mysql\nuser=mysql\n\n# Path to Galera library\nwsrep_provider=/usr/lib/libgalera_smm.so\n\n# Cluster connection URL contains IPs of node#1, node#2 and node#3\nwsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63\n\n# In order for Galera to work correctly binlog format should be ROW\nbinlog_format=ROW\n\n# MyISAM storage engine has only experimental support\ndefault_storage_engine=InnoDB\n\n# This InnoDB autoincrement locking mode is a requirement for Galera\ninnodb_autoinc_lock_mode=2\n\n# Node #3 address\nwsrep_node_address=192.168.70.63\n\n# Cluster name\nwsrep_cluster_name=my_ubuntu_cluster\n\n# SST method\nwsrep_sst_method=xtrabackup-v2\n\n#Authentication for SST method\nwsrep_sst_auth=\"sstuser:s3cretPass\"\n</code></pre> <ul> <li>Start the third node with the following command:</li> </ul> <pre><code>[root@pxc3 ~]# /etc/init.d/mysql start\n</code></pre> <ul> <li>After the server has been started, it should receive SST automatically.   Cluster status can be checked on all nodes.   The following is an example of status from the third node (<code>pxc3</code>):</li> </ul> <pre><code>mysql&gt; show status like 'wsrep%';\n</code></pre> <p>This output confirms that the third node has joined the cluster.</p> <pre><code>+----------------------------+--------------------------------------+\n| Variable_name              | Value                                |\n+----------------------------+--------------------------------------+\n| wsrep_local_state_uuid     | b598af3e-ace3-11e2-0800-3e90eb9cd5d3 |\n...\n| wsrep_local_state          | 4                                    |\n| wsrep_local_state_comment  | Synced                               |\n...\n| wsrep_cluster_size         | 3                                    |\n| wsrep_cluster_status       | Primary                              |\n| wsrep_connected            | ON                                   |\n...\n| wsrep_ready                | ON                                   |\n+----------------------------+--------------------------------------+\n40 rows in set (0.01 sec)\n</code></pre> <p>This output confirms that the third node has joined the cluster.</p>"},{"location":"howtos/ubuntu_howto.html#testing-replication","title":"Testing replication","text":"<p>To test replication, lets create a new database on the second node, create a table for that database on the third node, and add some records to the table on the first node.</p> <ul> <li>Create a new database on the second node:</li> </ul> <pre><code>mysql@pxc2&gt; CREATE DATABASE percona;\n</code></pre> <p>The following output confirms that a new database has been created:</p> <pre><code>Query OK, 1 row affected (0.01 sec)\n</code></pre> <ul> <li>Switch to a newly created database:</li> </ul> <pre><code>mysql@percona3&gt; USE percona;\n</code></pre> <p>The following output confirms that a database has been changed:</p> <pre><code>Database changed\n</code></pre> <ul> <li>Create a table on the third node:</li> </ul> <pre><code>mysql@pxc3&gt; CREATE TABLE example (node_id INT PRIMARY KEY, node_name VARCHAR(30));\n</code></pre> <p>The following output confirms that a table has been created:</p> <pre><code>Query OK, 0 rows affected (0.05 sec)\n</code></pre> <ul> <li>Insert records on the first node:</li> </ul> <pre><code>mysql@percona1&gt; INSERT INTO percona.example VALUES (1, 'percona1');\n</code></pre> <p>The following output confirms that the records have been inserted:</p> <pre><code>Query OK, 1 row affected (0.02 sec)\n</code></pre> <ul> <li>Retrieve all the rows from that table on the second node:</li> </ul> <pre><code>mysql@percona2&gt; SELECT * FROM percona.example;\n</code></pre> <p>The following output confirms that all the rows have been retrieved:</p> <pre><code>+---------+-----------+\n| node_id | node_name |\n+---------+-----------+\n|       1 | percona1  |\n+---------+-----------+\n1 row in set (0.00 sec)\n</code></pre> <p>This simple procedure should ensure that all nodes in the cluster   are synchronized and working as intended.</p>"},{"location":"howtos/upgrade_guide.html","title":"Upgrading Percona XtraDB Cluster","text":"<p>This guide describes the procedure for upgrading Percona XtraDB Cluster without downtime (rolling upgrade) to the latest 5.7 version. A \u201crolling upgrade\u201d means there is no need to take down the complete cluster during the upgrade.</p> <p>Both major upgrades (from 5.6 to 5.7 version) and minor ones (from 5.7.x to 5.7.y) can be done in this way. Rolling upgrades to 5.7 from versions older than 5.6 are not supported. Therefore if you are running Percona XtraDB Cluster version 5.5, it is recommended to shut down all nodes, then remove and re-create the cluster from scratch. Alternatively, you can perform a rolling upgrade from PXC 5.5 to 5.6, and then follow the current procedure to upgrade from 5.6 to 5.7.</p> <p>The following documents contain details about relevant changes in the 5.7 series of MySQL and Percona Server. Make sure you deal with any incompatible features and variables mentioned in these documents when upgrading to Percona XtraDB Cluster 5.7.</p> <ul> <li> <p>Changed in Percona Server 5.7</p> </li> <li> <p>Upgrading MySQL</p> </li> <li> <p>Upgrading from MySQL 5.6 to 5.7</p> </li> </ul>"},{"location":"howtos/upgrade_guide.html#major-upgrade","title":"Major upgrade","text":"<p>To upgrade the cluster, follow these steps for each node:</p> <ol> <li> <p>Make sure that all nodes are synchronized.</p> </li> <li> <p>Stop the <code>mysql</code> service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> <li> <p>Remove existing Percona XtraDB Cluster and Percona XtraBackup packages,    then install Percona XtraDB Cluster version 5.7 packages.    For more information, see Installing Percona XtraDB Cluster.</p> <p>For example, if you have Percona software repositories configured, you might use the following commands:</p> <ul> <li>On CentOS or RHEL:</li> </ul> <pre><code>$ sudo yum remove percona-xtrabackup* Percona-XtraDB-Cluster*\n$ sudo yum install Percona-XtraDB-Cluster-57\n</code></pre> <ul> <li>On Debian or Ubuntu:</li> </ul> <pre><code>$ sudo apt remove percona-xtrabackup* percona-xtradb-cluster*\n$ sudo apt install percona-xtradb-cluster-57\n</code></pre> </li> <li> <p>In case of Debian or Ubuntu, the <code>mysql</code> service starts automatically after install.     Stop the service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> <li> <p>Back up <code>grastate.dat</code>, so that you can restore it if it is corrupted or zeroed out due to network issue.</p> </li> <li> <p>Start the node outside the cluster (in standalone mode) by setting the <code>wsrep_provider</code> variable to <code>none</code>.</p> <p>For example:</p> <pre><code>sudo mysqld --skip-grant-tables --user=mysql --wsrep-provider='none'\n</code></pre> <p>Note</p> <p>As of Percona XtraDB Cluster 5.7.6, the <code>--skip-grant-tables</code> option is not required.</p> <p>Note</p> <p>To prevent any users from accessing this node while performing work on it, you may add \u2013skip-networking to the startup options and use a local socket to connect, or alternatively you may want to divert any incoming traffic from your application to other operational nodes.</p> </li> <li> <p>Open another session and run <code>mysql_upgrade</code>.</p> </li> <li> <p>When the upgrade is done, stop the <code>mysqld</code> process.    You can either run <code>sudo kill</code> on the <code>mysqld</code> process ID,    or <code>sudo mysqladmin shutdown</code> with the MySQL root user credentials.</p> <p>Note</p> <p>On CentOS, the <code>my.cnf</code> configuration file is renamed to <code>my.cnf.rpmsave</code>. Make sure to rename it back before joining the upgraded node back to the cluster. </p> </li> <li> <p>Now you can join the upgraded node back to the cluster.</p> <p>In most cases, starting the <code>mysql</code> service should run the node with your previous configuration:</p> <pre><code>$ sudo service mysql start\n</code></pre> <p>For more information, see Adding Nodes to Cluster.</p> <p>Note</p> <p>As of version 5.7, Percona XtraDB Cluster runs with PXC Strict Mode enabled by default. This will deny any unsupported operations and may halt the server upon encountering a failed validation.</p> <p>If you are not sure, it is recommended to first start the node with the <code>pxc_strict_mode</code> variable set to <code>PERMISSIVE</code> in the in the MySQL configuration file, <code>my.cnf</code>.</p> <p>After you check the log for any experimental or unsupported features and fix any encountered incompatibilities, you can set the variable back to <code>ENFORCING</code> at run time:</p> <pre><code>mysql&gt; SET pxc_strict_mode=ENFORCING;\n</code></pre> <p>Also switch back to <code>ENFORCING</code> may be done by restarting the node with updated <code>my.cnf</code>. </p> </li> <li> <p>Repeat this procedure for the next node in the cluster until you upgrade all nodes.</p> </li> </ol> <p>It is important that on rejoining, the node should synchronize using IST. For this, it is best not to leave the cluster node being upgraded offline for an extended period. More on this below.</p> <p>When performing any upgrade (major or minor), SST could be initiated by the joiner node after the upgrade if the server was offline for some time. After SST completes, the data directory structure needs to be upgraded (using mysql_upgrade) once more time to ensure compatibility with the newer version of binaries.</p> <p>Note</p> <p>In case of SST synchronization, the error log contains statements like \u201cCheck if state gap can be serviced using IST \u2026 State gap can\u2019t be serviced using IST. Switching to SST\u201d instead of \u201cReceiving IST: \u2026\u201d lines appropriate to  IST synchronization.</p>"},{"location":"howtos/upgrade_guide.html#minor-upgrade","title":"Minor upgrade","text":"<p>To upgrade the cluster, follow these steps for each node:</p> <ol> <li> <p>Make sure that all nodes are synchronized.</p> </li> <li> <p>Stop the <code>mysql</code> service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> <li> <p>Upgrade Percona XtraDB Cluster and Percona XtraBackup packages.    For more information, see Installing Percona XtraDB Cluster.</p> <p>For example, if you have Percona software repositories configured, you might use the following commands:</p> <ul> <li>On CentOS or RHEL:</li> </ul> <pre><code>$ sudo yum update Percona-XtraDB-Cluster-57\n</code></pre> <ul> <li>On Debian or Ubuntu:</li> </ul> <pre><code>$ sudo apt install --only-upgrade percona-xtradb-cluster-57\n</code></pre> </li> <li> <p>In case of Debian or Ubuntu,    the <code>mysql</code> service starts automatically after install.</p> <p>Stop the service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> <li> <p>Back up <code>grastate.dat</code>, so that you can restore it if it is corrupted or zeroed out due to network issue.</p> </li> <li> <p>Start the node outside the cluster (in standalone mode)    by setting the <code>wsrep_provider</code> variable to <code>none</code>.</p> <p>For example:</p> <pre><code>sudo mysqld --skip-grant-tables --user=mysql --wsrep-provider='none'\n</code></pre> <p>Note</p> <p>As of Percona XtraDB Cluster 5.7.6, the <code>--skip-grant-tables</code> option is not required.</p> <p>Note</p> <p>To prevent any users from accessing this node while performing work on it, you may add \u2013skip-networking to the startup options and use a local socket to connect, or alternatively you may want to divert any incoming traffic from your application to other operational nodes.</p> </li> <li> <p>Open another session and run <code>mysql_upgrade</code>.</p> </li> <li> <p>When the upgrade is done, stop the <code>mysqld</code> process.    You can either run <code>sudo kill</code> on the <code>mysqld</code> process ID,    or <code>sudo mysqladmin shutdown</code> with the MySQL root user credentials.</p> <p>Note</p> <p>On CentOS, the <code>my.cnf</code> configuration file is renamed to <code>my.cnf.rpmsave</code>. Make sure to rename it back before joining the upgraded node back to the cluster.</p> </li> <li> <p>Now you can join the upgraded node back to the cluster.</p> <p>In most cases, starting the <code>mysql</code> service should run the node with your previous configuration:</p> <pre><code>$ sudo service mysql start\n</code></pre> <p>For more information, see Adding Nodes to Cluster.</p> <p>Note</p> <p>As of version 5.7, Percona XtraDB Cluster runs with PXC Strict Mode enabled by default. This will deny any unsupported operations and may halt the server upon encountering a failed validation.</p> <p>If you are not sure, it is recommended to first start the node with the <code>pxc_strict_mode</code> variable set to <code>PERMISSIVE</code> in the in the MySQL configuration file, <code>my.cnf</code>.</p> <p>After you check the log for any experimental or unsupported features and fix any encountered incompatibilities, you can set the variable back to <code>ENFORCING</code> at run time:</p> <pre><code>mysql&gt; SET pxc_strict_mode=ENFORCING;\n</code></pre> <p>Also switch back to <code>ENFORCING</code> may be done by restarting the node with updated <code>my.cnf</code>.</p> </li> <li> <p>Repeat this procedure for the next node in the cluster until you upgrade all nodes.</p> </li> </ol>"},{"location":"howtos/upgrade_guide.html#dealing-with-istsst-synchronization-while-upgrading","title":"Dealing with IST/SST synchronization while upgrading","text":"<p>It is important that on rejoining, the node should synchronize using IST. For this, it is best not to leave the cluster node being upgraded offline for an extended period. More on this below.</p> <p>When performing any upgrade (major or minor), SST could be initiated by the joiner node after the upgrade if the server was offline for some time. After SST completes, the data directory structure needs to be upgraded (using mysql_upgrade) once more time to ensure compatibility with the newer version of binaries.</p> <p>Note</p> <p>In case of SST synchronization, the error log contains statements like \u201cCheck if state gap can be serviced using IST \u2026 State gap can\u2019t be serviced using IST. Switching to SST\u201d instead of \u201cReceiving IST: \u2026\u201d lines appropriate to  IST synchronization.</p> <p>The following additional steps should be made to upgrade the data directory structure after SST (after the normal major or minor upgrade steps):</p> <ol> <li> <p>Shutdown the node that rejoined the cluster using SST:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> <li> <p>Restart the node in standalone mode by setting the <code>wsrep_provider</code> variable to <code>none</code>, for example:</p> <pre><code>sudo mysqld --skip-grant-tables --user=mysql --wsrep-provider='none'\n</code></pre> </li> <li> <p>Run <code>mysql-upgrade</code></p> </li> <li> <p>Restart the node in cluster mode (e.g., by executing <code>sudo service mysql start</code> and make sure the cluster joins back using IST.</p> </li> </ol>"},{"location":"howtos/virt_sandbox.html","title":"Setting up PXC reference architecture with HAProxy","text":"<p>This manual describes how to set up Percona XtraDB Cluster in a virtualized test sandbox.</p> <p>The procedure assumes Amazon EC2 micro instances running CentOS 6. However, it should apply to any virtualization technology (for example, VirtualBox) with any Linux distribution.</p> <p>This manual requires three virtual machines for Percona XtraDB Cluster nodes, and one for HAProxy client, which redirects requests to the nodes. Running HAProxy on an application server, instead of having it as a dedicated entity, removes the unnecessary extra network roundtrip, because the load balancing layer in Percona XtraDB Cluster scales well with application servers.</p> <ol> <li> <p>Install Percona XtraDB Cluster on the three cluster nodes, as described in Installing Percona XtraDB Cluster on Red Hat Enterprise Linux and CentOS.</p> </li> <li> <p>Install HAProxy and <code>sysbench</code> on the client node:</p> <pre><code>yum -y install haproxy sysbench\n</code></pre> </li> <li> <p>Make sure that the <code>my.cnf</code> configuration file on the first node contains the following:</p> <pre><code>[mysqld]\nserver_id=1\nbinlog_format=ROW\nlog_bin=mysql-bin\nwsrep_cluster_address=gcomm://\nwsrep_provider=/usr/lib/libgalera_smm.so\ndatadir=/var/lib/mysql\n\nwsrep_slave_threads=2\nwsrep_cluster_name=pxctest\nwsrep_sst_method=xtrabackup\nwsrep_node_name=ip-10-112-39-98\n\nlog_slave_updates\n\ninnodb_autoinc_lock_mode=2\ninnodb_buffer_pool_size=400M\ninnodb_log_file_size=64M\n</code></pre> </li> <li> <p>Start the first node</p> </li> <li> <p>Adjust the <code>my.cnf</code> configuration files on the second and third nodes to contain the same configuration settings, except the following:</p> <ul> <li>Second node:</li> </ul> <pre><code>server_id=2\nwsrep_cluster_address=gcomm://10.116.39.76\nwsrep_node_name=ip-10-244-33-92\n</code></pre> <ul> <li>Third node:</li> </ul> <pre><code>server_id=3\nwsrep_cluster_address=gcomm://10.116.39.76\nwsrep_node_name=ip-10-194-10-179\n</code></pre> </li> </ol> <p>Note</p> <ul> <li> <p><code>server_id</code> can be any unique number</p> </li> <li> <p><code>wsrep_cluster_address</code> is the IP address of the first node</p> </li> <li> <p><code>wsrep_node_name</code> can be any unique name, for example, the output of the <code>hostname</code> command</p> </li> </ul> <ol> <li> <p>Start the second and third nodes.</p> <p>When a new node joins the cluster, SST is performed by taking a backup using XtraBackup, then copying it to the new node with <code>netcat</code>. After a successful SST, you should see the following in the error log:</p> <pre><code>120619 13:20:17 [Note] WSREP: State transfer required:\n     Group state: 77c9da88-b965-11e1-0800-ea53b7b12451:97\n     Local state: 00000000-0000-0000-0000-000000000000:-1\n120619 13:20:17 [Note] WSREP: New cluster view: global state: 77c9da88-b965-11e1-0800-ea53b7b12451:97, view# 18: Primary, number of nodes: 3, my index: 0, protocol version 2\n120619 13:20:17 [Warning] WSREP: Gap in state sequence. Need state transfer.\n120619 13:20:19 [Note] WSREP: Running: 'wsrep_sst_xtrabackup 'joiner' '10.195.206.117' '' '/var/lib/mysql/' '/etc/my.cnf' '20758' 2&gt;sst.err'\n120619 13:20:19 [Note] WSREP: Prepared |SST| request: xtrabackup|10.195.206.117:4444/xtrabackup_sst\n120619 13:20:19 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.\n120619 13:20:19 [Note] WSREP: Assign initial position for certification: 97, protocol version: 2\n120619 13:20:19 [Warning] WSREP: Failed to prepare for incremental state transfer: Local state UUID (00000000-0000-0000-0000-000000000000) does not match group state UUID (77c9da88-b965-11e1-0800-ea53b7b12451): 1 (Operation not permitted)\n     at galera/src/replicator_str.cpp:prepare_for_IST():439. IST will be unavailable.\n120619 13:20:19 [Note] WSREP: Node 0 (ip-10-244-33-92) requested state transfer from '*any*'. Selected 1 (ip-10-112-39-98)(SYNCED) as donor.\n120619 13:20:19 [Note] WSREP: Shifting PRIMARY -&gt; JOINER (TO: 102)\n120619 13:20:19 [Note] WSREP: Requesting state transfer: success, donor: 1\n120619 13:20:59 [Note] WSREP: 1 (ip-10-112-39-98): State transfer to 0 (ip-10-244-33-92) complete.\n120619 13:20:59 [Note] WSREP: Member 1 (ip-10-112-39-98) synced with group.\n120619 13:21:17 [Note] WSREP: |SST| complete, seqno: 105\n120619 13:21:17 [Note] Plugin 'FEDERATED' is disabled.\n120619 13:21:17 InnoDB: The InnoDB memory heap is disabled\n120619 13:21:17 InnoDB: Mutexes and rw_locks use GCC atomic builtins\n120619 13:21:17 InnoDB: Compressed tables use zlib 1.2.3\n120619 13:21:17 InnoDB: Using Linux native AIO\n120619 13:21:17 InnoDB: Initializing buffer pool, size = 400.0M\n120619 13:21:17 InnoDB: Completed initialization of buffer pool\n120619 13:21:18 InnoDB: highest supported file format is Barracuda.\n120619 13:21:18  InnoDB: Waiting for the background threads to start\n120619 13:21:19 Percona XtraDB (https://www.percona.com) 1.1.8-rel25.3 started; log sequence number 246661644\n120619 13:21:19 [Note] Recovering after a crash using mysql-bin\n120619 13:21:19 [Note] Starting crash recovery...\n120619 13:21:19 [Note] Crash recovery finished.\n120619 13:21:19 [Note] Server hostname (bind-address): '(null)'; port: 3306\n120619 13:21:19 [Note]   - '(null)' resolves to '0.0.0.0';\n120619 13:21:19 [Note]   - '(null)' resolves to '::';\n120619 13:21:19 [Note] Server socket created on IP: '0.0.0.0'.\n120619 13:21:19 [Note] Event Scheduler: Loaded 0 events\n120619 13:21:19 [Note] WSREP: Signalling provider to continue.\n120619 13:21:19 [Note] WSREP: Received |SST|: 77c9da88-b965-11e1-0800-ea53b7b12451:105\n120619 13:21:19 [Note] WSREP: |SST| received: 77c9da88-b965-11e1-0800-ea53b7b12451:105\n120619 13:21:19 [Note] WSREP: 0 (ip-10-244-33-92): State transfer from 1 (ip-10-112-39-98) complete.\n120619 13:21:19 [Note] WSREP: Shifting JOINER -&gt; JOINED (TO: 105)\n120619 13:21:19 [Note] /usr/sbin/mysqld: ready for connections.\nVersion: '5.5.24-log'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  Percona XtraDB Cluster (GPL), wsrep_23.6.r340\n120619 13:21:19 [Note] WSREP: Member 0 (ip-10-244-33-92) synced with group.\n120619 13:21:19 [Note] WSREP: Shifting JOINED -&gt; SYNCED (TO: 105)\n120619 13:21:20 [Note] WSREP: Synchronized with group, ready for connections\n</code></pre> <p>For debugging information about the SST, you can check the <code>sst.err</code> file and the error log.</p> <p>After SST finishes, you can check the cluster size as follows:</p> <pre><code>mysql&gt; show global status like 'wsrep_cluster_size';\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+--------------------+-------+\n| Variable_name      | Value |\n+--------------------+-------+\n| wsrep_cluster_size | 3     |\n+--------------------+-------+\n1 row in set (0.00 sec)\n</code></pre> </li> <li> <p>When all cluster nodes are started, configure HAProxy on the client node.    This will enable the application to connect to localhost    as if it were a single MySQL server, instead of a Percona XtraDB Cluster node.</p> <p>You can configure HAProxy to connect and write to all cluster nodes or to one node at a time. The former method can lead to rollbacks due to conflicting writes when optimistic locking at commit time is triggered, while the latter method avoids rollbacks.</p> <p>However, most good applications should be able to handle rollbacks, so either method is fine in this case.</p> <p>To configure HAProxy, add the following to <code>/etc/haproxy/haproxy.cfg</code>:</p> <pre><code>global\nlog 127.0.0.1 local0\nlog 127.0.0.1 local1 notice\nmaxconn 4096\nchroot /usr/share/haproxy\nuser haproxy\ngroup haproxy\ndaemon\n\ndefaults\nlog global\nmode http\noption tcplog\noption dontlognull\nretries 3\noption redispatch\nmaxconn 2000\ncontimeout 5000\nclitimeout 50000\nsrvtimeout 50000\n\nfrontend pxc-front\nbind *:3307\nmode tcp\ndefault_backend pxc-back\n\nfrontend stats-front\nbind *:80\nmode http\ndefault_backend stats-back\n\nfrontend pxc-onenode-front\nbind *:3306\nmode tcp\ndefault_backend pxc-onenode-back\n\nbackend pxc-back\nmode tcp\nbalance leastconn\noption httpchk\nserver c1 10.116.39.76:3306 check port 9200 inter 12000 rise 3 fall 3\nserver c2 10.195.206.117:3306 check port 9200 inter 12000 rise 3 fall 3\nserver c3 10.202.23.92:3306 check port 9200 inter 12000 rise 3 fall 3\n\nbackend stats-back\nmode http\nbalance roundrobin\nstats uri /haproxy/stats\nstats auth pxcstats:secret\n\nbackend pxc-onenode-back\nmode tcp\nbalance leastconn\noption httpchk\nserver c1 10.116.39.76:3306 check port 9200 inter 12000 rise 3 fall 3\nserver c2 10.195.206.117:3306 check port 9200 inter 12000 rise 3 fall 3 backup\nserver c3 10.202.23.92:3306 check port 9200 inter 12000 rise 3 fall 3 backup\n</code></pre> <p>In this configuration, three frontend-backend pairs are defined:</p> <ul> <li>The <code>stats</code> pair is for HAProxy statistics page (port 80).</li> </ul> <p>You can access it at <code>/haproxy/stats</code> using the credential   specified in the <code>stats auth</code> parameter.</p> <ul> <li>The <code>pxc</code> pair is for connecting to all three nodes (port 3307).</li> </ul> <p>In this case, the leastconn load balancing method is used,  instead of round-robin, which means connection is made to the backend  with the least connections established.</p> <ul> <li>The <code>pxc-onenode</code> pair is for connecting to one node at a time  (port 3306) to avoid rollbacks because of optimistic locking.</li> </ul> <p>If the node goes offline, HAProxy will connect to another one.</p> <p>Note</p> <p>MySQL is checked via <code>httpchk</code>. MySQL will not serve these requests by default. You have to set up the <code>clustercheck</code> utility, which is distributed with Percona XtraDB Cluster. This will enable HAProxy to check MySQL via HTTP.</p> <p>The <code>clustercheck</code> script is a simple shell script that accepts HTTP requests and checks the node via the <code>wsrep_local_state</code> variable. If the node\u2019s status is fine, it will send a response with HTTP code <code>200 OK</code>. Otherwise, it sends <code>503</code>.</p> <p>To create the <code>clustercheck</code> user, run the following:</p> <pre><code>mysql&gt; grant process on *.* to 'clustercheckuser'@'localhost' identified by 'clustercheckpassword!';\n</code></pre> <pre><code>Query OK, 0 rows affected (0.00 sec)\n</code></pre> <pre><code>mysql&gt; flush privileges;\n</code></pre> <pre><code>Query OK, 0 rows affected (0.00 sec)\n</code></pre> <p>If you want to use a different user name or password, you have to modify them in the <code>clustercheck</code> script.</p> <p>If you run the script on a running node, you should see the following:</p> <pre><code># clustercheck\nHTTP/1.1 200 OK\n\nContent-Type: Content-Type: text/plain\n</code></pre> <p>You can use <code>xinetd</code> to daemonize the script. If xinetd is not installed, you can install it with <code>yum</code>:</p> <pre><code># yum -y install xinetd\n</code></pre> <p>The service is configured in <code>/etc/xinetd.d/mysqlchk</code>:</p> <pre><code># default: on\n# description: mysqlchk\nservice mysqlchk\n{\n# this is a config for xinetd, place it in /etc/xinetd.d/\ndisable = no\nflags = REUSE\nsocket_type = stream\nport = 9200\nwait = no\nuser = nobody\nserver = /usr/bin/clustercheck\nlog_on_failure += USERID\nonly_from = 0.0.0.0/0\n# recommended to put the IPs that need\n# to connect exclusively (security purposes)\nper_source = UNLIMITED\n}\n</code></pre> <p>Add the new service to <code>/etc/services</code>:</p> <pre><code>mysqlchk 9200/tcp # mysqlchk\n</code></pre> <p>Clustercheck will now listen on port 9200 after <code>xinetd</code> restarts and HAProxy is ready to check MySQL via HTTP:</p> <pre><code># service xinetd restart\n</code></pre> </li> </ol> <p>If you did everything correctly, the statistics page for HAProxy should look like this:</p> <p></p>"},{"location":"howtos/virt_sandbox.html#testing-the-cluster-with-sysbench","title":"Testing the cluster with sysbench","text":"<p>After you set up Percona XtraDB Cluster in a sand box, you can test it using sysbench. This example shows how to do it with <code>sysbench</code> from the EPEL repository.</p> <ol> <li> <p>Create a database and a user for <code>sysbench</code>:</p> <pre><code>mysql&gt; create database sbtest;\n</code></pre> <pre><code>Query OK, 1 row affected (0.01 sec)\n</code></pre> <pre><code>mysql&gt; grant all on sbtest.* to 'sbtest'@'%' identified by 'sbpass';\n</code></pre> <pre><code>Query OK, 0 rows affected (0.00 sec)\n</code></pre> <pre><code>mysql&gt; flush privileges;\n</code></pre> <pre><code>Query OK, 0 rows affected (0.00 sec)\n</code></pre> </li> <li> <p>Populate the table with data for the benchmark:</p> <pre><code>sysbench --test=oltp --db-driver=mysql --mysql-engine-trx=yes --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-port=3307 --mysql-user=sbtest --mysql-password=sbpass --oltp-table-size=10000 prepare\n</code></pre> </li> <li> <p>Run the benchmark on port 3307:</p> <pre><code>sysbench --test=oltp --db-driver=mysql --mysql-engine-trx=yes --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-port=3307 --mysql-user=sbtest --mysql-password=sbpass --oltp-table-size=10000 --num-threads=8 run\n</code></pre> <p>You should see the following in HAProxy statistics for <code>pxc-back</code>:</p> <p></p> <p>Note the <code>Cur</code> column under <code>Session</code>:</p> <ul> <li> <p><code>c1</code> has 2 threads connected</p> </li> <li> <p><code>c2</code> and <code>c3</code> have 3 threads connected</p> </li> </ul> </li> <li> <p>Run the same benchmark on port 3306:</p> <pre><code>sysbench --test=oltp --db-driver=mysql --mysql-engine-trx=yes --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sbtest --mysql-password=sbpass --oltp-table-size=10000 --num-threads=8 run\n</code></pre> <p>You should see the following in HAProxy statistics for <code>pxc-onenode-back</code>:</p> <p></p> <p>All 8 threads are connected to the <code>c1</code> server. <code>c2</code> and <code>c3</code> are acting as backup nodes.</p> <p>If you are using HAProxy for MySQL you can break the privilege system\u2019s host part, because MySQL will think that the connections are always coming from the load balancer. You can work this around using T-Proxy patches and some iptables magic for the backwards connections. However in the setup described in this how-to this is not an issue, since each application server has it\u2019s own HAProxy instance, each application server connects to 127.0.0.1, so MySQL will see that connections are coming from the application servers. Just like in the normal case.</p> </li> </ol>"},{"location":"install/index.html","title":"Installing Percona XtraDB Cluster","text":"<p>Install Percona XtraDB Cluster on all hosts that you are planning to use as cluster nodes and ensure that you have root access to the MySQL server on each one.</p> <p>It is recommended to install Percona XtraDB Cluster from official Percona software repositories using the corresponding package manager for your system:</p> <ul> <li> <p>Debian or Ubuntu</p> </li> <li> <p>Red Hat or CentOS</p> </li> </ul>"},{"location":"install/index.html#installation-alternatives","title":"Installation Alternatives","text":"<p>Percona also provides a generic tarball with all required files and binaries for manual installation:</p> <ul> <li>Installing Percona XtraDB Cluster from Binary Tarball</li> </ul> <p>If you want to build Percona XtraDB Cluster from source, see Compiling and Installing from Source Code.</p> <p>If you want to run Percona XtraDB Cluster using Docker, see Running Percona XtraDB Cluster in a Docker Container.</p>"},{"location":"install/apt.html","title":"Installing Percona XtraDB Cluster on Debian or Ubuntu","text":"<p>Specific information on the supported platforms, products, and versions is described in Percona Software and Platform Lifecycle.</p> <p>The packages are available in the official Percona software repository and on the download page. It is recommended to install Percona XtraDB Cluster from the official repository using apt.</p>"},{"location":"install/apt.html#prerequisites","title":"Prerequisites","text":"<p>You need to have root access on the node where you will be installing Percona XtraDB Cluster (either logged in as a user with root privileges or be able to run commands with sudo).</p> <p>Make sure that the following ports are not blocked by firewall or used by other software. Percona XtraDB Cluster requires them for communication.</p> <ul> <li> <p>3306</p> </li> <li> <p>4444</p> </li> <li> <p>4567</p> </li> <li> <p>4568</p> </li> </ul> <p>Note</p> <p>To view the listening ports, enter the following command:</p> <pre><code>$ sudo ss -tunlp\n</code></pre>"},{"location":"install/apt.html#if-mysql-is-installed","title":"If MySQL Is Installed","text":"<p>If you previously had MySQL installed on the server, there might be an AppArmor profile which will prevent Percona XtraDB Cluster nodes from communicating with each other. The best solution is to remove the <code>apparmor</code> package entirely:</p> <pre><code>$ sudo apt remove apparmor\n</code></pre> <p>If you need to have AppArmor enabled due to security policies or for other reasons, it is possible to disable or extend the MySQL profile.</p>"},{"location":"install/apt.html#dependencies-on-ubuntu","title":"Dependencies on Ubuntu","text":"<p>When installing on a Ubuntu system, make sure that the <code>universe</code> repository is enabled to satisfy all essential dependencies.</p> <p>See also</p> <p>Ubuntu Documentation: Repositories</p>"},{"location":"install/apt.html#installing-from-repository","title":"Installing from Repository","text":"<ol> <li> <p>Configure Percona repositories as described in Percona Software Repositories Documentation.</p> </li> <li> <p>Install the Percona XtraDB Cluster server package:</p> <pre><code>$ sudo apt install percona-xtradb-cluster-57\n</code></pre> <p>Note</p> <p>Alternatively, you can install the <code>percona-xtradb-cluster-full-57</code> meta package, which contains the following additional packages:</p> <ul> <li> <p><code>percona-xtradb-cluster-test-5.7</code></p> </li> <li> <p><code>percona-xtradb-cluster-5.7-dbg</code></p> </li> <li> <p><code>percona-xtradb-cluster-garbd-3.x</code></p> </li> <li> <p><code>percona-xtradb-cluster-galera-3.x-dbg</code></p> </li> <li> <p><code>percona-xtradb-cluster-garbd-3.x-dbg</code></p> </li> <li> <p><code>libmysqlclient18</code></p> </li> </ul> <p>During installation, you will be prompted to provide a password for the <code>root</code> user on the database node.</p> </li> <li> <p>Stop the <code>mysql</code> service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> <p>Note</p> <p>All Debian-based distributions start services as soon as the corresponding package is installed. Before starting a Percona XtraDB Cluster node, it needs to be properly configured. For more information, see Configuring Nodes for Write-Set Replication.</p> </li> </ol>"},{"location":"install/apt.html#next-steps","title":"Next Steps","text":"<p>After you install Percona XtraDB Cluster and stop the <code>mysql</code> service, configure the node according to the procedure described in Configuring Nodes for Write-Set Replication.</p>"},{"location":"install/compile.html","title":"Compiling and Installing from Source Code","text":"<p>If you want to compile Percona XtraDB Cluster, you can find the source code on GitHub. Before you begin, make sure that the following packages are installed:</p> apt yum Git <code>git</code> <code>git</code> SCons <code>scons</code> <code>scons</code> GCC <code>gcc</code> <code>gcc</code> g++ <code>g++</code> <code>gcc-c++</code> OpenSSL <code>openssl</code> <code>openssl</code> Check <code>check</code> <code>check</code> CMake <code>cmake</code> <code>cmake</code> Bison <code>bison</code> <code>bison</code> Boost <code>libboost-all-dev</code> <code>boost-devel</code> Asio <code>libasio-dev</code> <code>asio-devel</code> Async I/O <code>libaio-dev</code> <code>libaio-devel</code> ncurses <code>libncurses5-dev</code> <code>ncurses-devel</code> Readline <code>libreadline-dev</code> <code>readline-devel</code> PAM <code>libpam-dev</code> <code>pam-devel</code> socat <code>socat</code> <code>socat</code> curl <code>libcurl-dev</code> <code>libcurl-devel</code> <p>You will likely have all or most of the packages already installed. If you are not sure, run one of the following commands to install any missing dependencies:</p> <ul> <li>For Debian or Ubuntu:</li> </ul> <pre><code>$ sudo apt install -y git scons gcc g++ openssl check cmake bison \\\nlibboost-all-dev libasio-dev libaio-dev libncurses5-dev libreadline-dev \\\nlibpam-dev socat libcurl-dev\n</code></pre> <p>The following output lists the missing dependencies:</p> <pre><code>.. libcurl-dev (not found on debian; used libcurl4-gnutls-dev\n.. zlib-dev is missing here. on debian worked with zlib1g-dev\n</code></pre> <ul> <li>For Red Hat Enterprise Linux or CentOS:</li> </ul> <pre><code>$ sudo yum install -y git scons gcc gcc-c++ openssl check cmake bison \\\nboost-devel asio-devel libaio-devel ncurses-devel readline-devel pam-devel \\\nsocat libcurl-devel\n</code></pre> <p>To compile Percona XtraDB Cluster from source code:</p> <ol> <li> <p>Clone the Percona XtraDB Cluster repository:</p> <pre><code>$ git clone https://github.com/percona/percona-xtradb-cluster.git\n</code></pre> </li> <li> <p>Check out the <code>5.7</code> branch:</p> <pre><code>$ cd percona-xtradb-cluster-galera\n$ git checkout 5.7\n</code></pre> </li> <li> <p>Initialize the submodule:</p> <pre><code>$ git submodule init wsrep/src &amp;&amp; git submodule update wsrep/src\n$ git submodule init percona-xtradb-cluster-galera &amp;&amp; git submodule update percona-xtradb-cluster-galera\n$ cd  percona-xtradb-cluster-galera\n$ git submodule init wsrep/src &amp;&amp; git submodule update wsrep/src\n&amp; git submodule init &amp;&amp; git submodule update\n$ cd ..\n</code></pre> </li> <li> <p>Run the build script <code>./build-ps/build-binary.sh</code>.     By default, it attempts building into the current directory. Specify     the target output directory, such as <code>./pxc-build</code>:</p> <pre><code>$ mkdir ./pxc-build\n$ ./build-ps/build-binary.sh ./pxc-build\n</code></pre> <p>When the compilation completes, <code>pxc-build</code> contains a tarball, such as <code>Percona-XtraDB-Cluster-5.7.25-rel28-31.35.1.Linux.x86_64.tar.gz</code>, that you can deploy on your system.</p> <p>Note</p> <p>The exact version and release numbers may differ. </p> </li> </ol>"},{"location":"install/docker.html","title":"Running Percona XtraDB Cluster in a Docker Container","text":""},{"location":"install/docker.html#mysql-57-post-eol-support-from-percona-docker-containers","title":"MySQL 5.7 Post-EOL Support from Percona Docker containers","text":"<p>You must request access to the MySQL 5.7 Post-EOL Support from Percona repository from Percona Support to be able to download the MySQL 5.7 Post-EOL Support from Percona Docker image. This request provides you with a client ID and an access token, which are required to download the binary tarball that contains the Docker image.</p> <p>After providing the access token, download the tar file. The following is an example of the download command. Provide a password before the download begins.</p> <pre><code>$ sudo docker load -i percona-xtradb-cluster-5.7.44-31.65.2.docker.tar\n</code></pre> <p>You can view the currently available Docker images on your local system. The following command lists these images. </p> <pre><code>$ sudo docker images\n</code></pre> <p>The result of the command contains the following information:</p> <ul> <li> <p>Repository name</p> </li> <li> <p>Tag - if the image is a specific version or latest</p> </li> <li> <p>Image ID - a unique identifier of the image</p> </li> <li> <p>Size - the size of the image on the disk</p> </li> </ul> Expected output <pre><code>Repository                      TAG            IMAGE ID       CREATED       SIZE\npercona/percona-xtradb-cluster  5.7           (image number) (when created) (size of file)\npercona/percona-xtradb-cluster  5.7.44-31.65.2 \n</code></pre> <p>After downloading, you can run the Docker image to set up a cluster.</p>"},{"location":"install/docker.html#docker-images-for-versions-that-are-not-mysql-57-post-eol-support-from-percona","title":"Docker images for versions that are not MySQL 5.7 Post-EOL Support from Percona","text":"<p>Docker images of Percona XtraDB Cluster are hosted publicly on Docker Hub at https://hub.docker.com/r/percona/percona-xtradb-cluster/.</p> <p>For more information about using Docker, see the Docker Docs.</p> <p>Be sure to install the latest official version of Docker for the latest features. The versions provided via <code>apt</code> and <code>yum</code> may lag behind the latest Docker features.</p> <p>By default, Docker pulls the image from Docker Hub if it is unavailable locally.</p>"},{"location":"install/docker.html#set-up-a-cluster","title":"Set up a cluster","text":"<p>The following procedure describes how to set up a simple 3-node cluster for evaluation and testing purposes, with all nodes running Percona XtraDB Cluster 5.7 in separate containers on one host:</p> <ol> <li> <p>Create a Docker network:</p> <pre><code>docker network create pxc-network\n</code></pre> </li> <li> <p>Bootstrap the cluster (create the first node):</p> <pre><code>docker run -d \\\n  -e MYSQL_ROOT_PASSWORD=root \\\n  -e CLUSTER_NAME=cluster1 \\\n  --name=node1 \\\n  --net=pxc-network \\\n  percona/percona-xtradb-cluster:5.7\n</code></pre> </li> <li> <p>Join the second node:</p> <pre><code>docker run -d \\\n  -e MYSQL_ROOT_PASSWORD=root \\\n  -e CLUSTER_NAME=cluster1 \\\n  -e CLUSTER_JOIN=node1 \\\n  --name=node2 \\\n  --net=pxc-network \\\n  percona/percona-xtradb-cluster:5.7\n</code></pre> </li> <li> <p>Join the third node:</p> <pre><code>docker run -d \\\n  -e MYSQL_ROOT_PASSWORD=root \\\n  -e CLUSTER_NAME=cluster1 \\\n  -e CLUSTER_JOIN=node1 \\\n  --name=node3 \\\n  --net=pxc-network \\\n  percona/percona-xtradb-cluster:5.7\n</code></pre> </li> </ol> <p>To ensure that the cluster is running:</p> <ol> <li> <p>Access the MySQL client. For example, on the first node:</p> <pre><code>$ sudo docker exec -it node1 /usr/bin/mysql -uroot -proot\n</code></pre> Expected output <pre><code>mysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 5.7.19-17-57-log Percona XtraDB Cluster (GPL), Release rel17, Revision c10027a, WSREP version 29.22, wsrep_29.22\n\nCopyright (c) 2009-2017 Percona LLC and/or its affiliates\nCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql@node1&gt;\n</code></pre> </li> <li> <p>View the wsrep status variables by running the following command:</p> <pre><code>mysql@node1&gt; show status like 'wsrep%';\n</code></pre> Expected output <pre><code>+------------------------------+-------------------------------------------------+\n| Variable_name                | Value                                           |\n+------------------------------+-------------------------------------------------+\n| wsrep_local_state_uuid       | 625318e2-9e1c-11e7-9d07-aee70d98d8ac            |\n    ...\n| wsrep_local_state_comment    | Synced                                          |\n...\n| wsrep_incoming_addresses     | 172.18.0.2:3306,172.18.0.3:3306,172.18.0.4:3306 |\n...\n| wsrep_cluster_conf_id        | 3                                               |\n| wsrep_cluster_size           | 3                                               |\n| wsrep_cluster_state_uuid     | 625318e2-9e1c-11e7-9d07-aee70d98d8ac            |\n| wsrep_cluster_status         | Primary                                         |\n| wsrep_connected              | ON                                              |\n...\n| wsrep_ready                  | ON                                              |\n+------------------------------+-------------------------------------------------+\n59 rows in set (0.02 sec)\n</code></pre> </li> </ol>"},{"location":"install/install-eol.html","title":"Install MySQL 5.7 Post-EOL Support from Percona releases","text":"<p>This document provides guidelines on installing Percona Xtradb Cluster packages from Percona repositories. For more information, see MySQL 5.7 Post-EOL Support from Percona.</p> <p>For instructions for binary tarballs, see Install MySQL 5.7 Post-EOL Support from Percona release from a binary tarball.</p>"},{"location":"install/install-eol.html#procedure","title":"Procedure","text":"<ol> <li> <p>Request access to the MySQL 5.7 Post-EOL Support from Percona repository from Percona Support to receive the client ID and the access token needed to download the packages.</p> </li> <li> <p>Configure the repository and install Percona Xtradb Cluster packages</p> On Debian and UbuntuOn RHEL and derivatives <ol> <li> <p>Download the Percona <code>gpg</code> key:</p> <pre><code>$ wget https://github.com/percona/percona-repositories/raw/main/deb/percona-keyring.gpg\n</code></pre> </li> <li> <p>Add the Percona <code>gpg</code> key to <code>trusted.gpg.d</code> directory:</p> <pre><code>$ sudo cp percona-keyring.gpg /etc/apt/trusted.gpg.d/\n</code></pre> </li> <li> <p>Create the <code>/etc/apt/sources.list.d/post-eol.list</code> configuration file with the following contents with your [CLIENTID] and [TOKEN].</p> <p>To get the <code>OPERATING_SYSTEM</code> value, run <code>lsb_release -sc</code>.</p> /etc/apt/sources.list.d/post-eol.list<pre><code>deb http://repo.percona.com/private/[CLIENTID]-[TOKEN]/pxc-57-eol/apt/ OPERATING_SYSTEM main\n</code></pre> </li> <li> <p>Update the local cache</p> <pre><code>$ sudo apt update\n</code></pre> </li> <li> <p>Install Percona Xtradb Cluster packages</p> <pre><code>$ sudo apt install -y percona-xtradb-cluster-5.7\n</code></pre> <p>Install other required packages.</p> </li> </ol> <ol> <li> <p>Create the <code>/etc/yum.repos.d/post-eol.repo</code> configuration file with the following contents with your [CLIENTID] and [TOKEN].</p> /etc/yum.repos.d/post-eol.repo<pre><code>baseurl=http://repo.percona.com/private/[Clientid]-[Token]/pxc-57-eol/yum/release/$releasever/RPMS/x86_64\nenabled=1\ngpgkey = https://repo.percona.com/yum/PERCONA-PACKAGING-KEY\n</code></pre> </li> <li> <p>Install Percona Xtradb Cluster for MySQL packages</p> <pre><code>$ sudo yum install -y percona-xtradb-cluster-5.7\n</code></pre> </li> </ol> </li> </ol>"},{"location":"install/tarball.html","title":"Installing Percona XtraDB Cluster from Binary Tarball","text":"<p>Percona provides generic tarballs with all required files and binaries for manual installation. Download the appropriate tarball package from https://www.percona.com/downloads/Percona-XtraDB-Cluster-57</p>"},{"location":"install/tarball.html#download-a-mysql-57-post-eol-support-from-percona-binary-tarball","title":"Download a MySQL 5.7 Post-EOL Support from Percona binary tarball","text":"<p>You can download the binary tarball for Percona Server for MySQL release in the MySQL 5.7 Post-EOL Support from Percona program using your <code>CLIENTID</code> and <code>TOKEN</code>.</p> Type Name Description Full Percona-XtraDB-Cluster-&lt;release&gt;/private/[CLIENTID]-[TOKEN]/Percona-XtraDB-Cluster-5.7/Percona-XtraDB-Cluster-&lt;release&gt;/binary/tarball/Percona-XtraDB-Cluster-&lt;release&gt;-Linux.x86_64.glibc2.17.tar.gz Contains binaries, libraries, test files, and debug symbols Minimal Percona-XtraDB-Cluster-&lt;release&gt;/private/[CLIENTID]-[TOKEN]/Percona-XtraDB-Cluster-5.7/Percona-XtraDB-Cluster-&lt;release&gt;-Linux.x86_64.glibc2.12-minimal.tar.gz Contains binaries, and libraries but does not include test files, or debug symbols. <p>Fetch and extract the correct binary tarball using your <code>CLIENTID</code> and <code>TOKEN</code>. For example, for Oracle Linux 9, use the following command:</p> <pre><code> $ wget https://repo.percona.com/private/[CLIENTID-[TOKEN]/Percona-XtraDB-Cluster-5.7/Percona-XtraDB-Cluster-5.7.44-31.65.3/binary/tarball/Percona-XtraDB-Cluster-5.7.44-31.65.3-Linux.x86_64.glibc2.17.tar.gz \n</code></pre> <p>In Percona XtraDB Cluster 5.7.31-31.45 and later, the multiple binary tarballs available in the Linux - Generic section are replaced with the following:</p> Named Type Description Percona-XtraDB-Cluster-5.7.xx-relxx-xx-Linux.x86_64.glibc2.12.tar.gz Full Contains binaries, libraries, test files, and debug symbols Percona-XtraDB-Cluster-5.7.xx-relxx-xx-Linux.x86_64.glibc2.12-minimal.tar.gz Minimal Contains binaries, and libraries but does not include test files, or debug symbols <p>Both binary tarballs support all distributions.</p> <p>For installations before Percona XtraDB Cluster 5.7.31-31.45, the Linux - Generic section contains multiple tarballs which are based on the OpenSSL library available in your distribution:</p> <ul> <li> <p><code>ssl100</code>: for Debian before 9 and Ubuntu before 14.04 versions</p> </li> <li> <p><code>ssl101</code>: for CentOS 6 and CentOS 7</p> </li> <li> <p><code>ssl102</code>: for Debian 9 and Ubuntu versions starting from 14.04</p> </li> </ul> <p>Note</p> <p>In CentOS version 7.04 and later, the OpenSSL library is <code>ssl102</code>.</p> <p>For example, you can use <code>curl</code> as follows:</p> <pre><code>curl -O https://www.percona.com/downloads/Percona-XtraDB-Cluster-57/Percona-XtraDB-Cluster-5.7.31-31.45/binary/tarball/Percona-XtraDB-Cluster-5.7.31-rel34-31.45.1.Linux.x86_64.glibc2.tar.gz\n</code></pre>"},{"location":"install/yum.html","title":"Installing Percona XtraDB Cluster on Red Hat Enterprise Linux and CentOS","text":"<p>Specific information on the supported platforms, products, and versions is described in Percona Software and Platform Lifecycle.</p> <p>The packages are available in the official Percona software repository and on the download page. It is recommended to install Percona XtraDB Cluster from the official repository using yum.</p>"},{"location":"install/yum.html#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>You need to have root access on the node where you will be installing Percona XtraDB Cluster (either logged in as a user with root privileges or be able to run commands with sudo).</p> <p>Note</p> <p>Make sure that the following ports are not blocked by firewall or used by other software. Percona XtraDB Cluster requires them for communication.</p> <ul> <li> <p>3306</p> </li> <li> <p>4444</p> </li> <li> <p>4567</p> </li> <li> <p>4568</p> </li> </ul> <p>Note</p> <p>The SELinux security module can constrain access to data for Percona XtraDB Cluster. The best solution is to change the mode from <code>enforcing</code>  to <code>permissive</code> by running the following command:</p> <pre><code>setenforce 0\n</code></pre> <p>This only changes the mode at runtime. To run SELinux in permissive mode after a reboot, set <code>SELINUX=permissive</code> in the <code>/etc/selinux/config</code> configuration file.</p>"},{"location":"install/yum.html#installing-from-percona-repository","title":"Installing from Percona Repository","text":"<ol> <li> <p>Configure Percona repositories as described in Percona Software Repositories Documentation.</p> </li> <li> <p>Install the Percona XtraDB Cluster packages:</p> <pre><code>$ sudo yum install Percona-XtraDB-Cluster-57\n</code></pre> <p>Note</p> <p>Alternatively you can install the <code>Percona-XtraDB-Cluster-full-57</code> meta package, which contains the following additional packages:</p> <ul> <li> <p><code>Percona-XtraDB-Cluster-devel-57</code></p> </li> <li> <p><code>Percona-XtraDB-Cluster-test-57</code></p> </li> <li> <p><code>Percona-XtraDB-Cluster-debuginfo-57</code></p> </li> <li> <p><code>Percona-XtraDB-Cluster-galera-3-debuginfo</code></p> </li> <li> <p><code>Percona-XtraDB-Cluster-shared-57</code></p> </li> </ul> </li> <li> <p>Start the Percona XtraDB Cluster server:</p> <pre><code>$ sudo service mysql start\n</code></pre> </li> <li> <p>Copy the automatically generated temporary password for the superuser account:</p> <pre><code>$ sudo grep 'temporary password' /var/log/mysqld.log\n</code></pre> </li> <li> <p>Use this password to log in as <code>root</code>:</p> <pre><code>$ mysql -u root -p\n</code></pre> </li> <li> <p>Change the password for the superuser account and log out. For example:</p> <pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'rootPass';\n</code></pre> <p>The example of the output is the following:</p> <pre><code>Query OK, 0 rows affected (0.00 sec)\n\nmysql&gt; exit\nBye\n</code></pre> </li> <li> <p>Stop the <code>mysql</code> service:</p> <pre><code>$ sudo service mysql stop\n</code></pre> </li> </ol>"},{"location":"install/yum.html#next-steps","title":"Next Steps","text":"<p>After you install Percona XtraDB Cluster and change the superuser account password, configure the node according to the procedure described in Configuring Nodes for Write-Set Replication.</p>"},{"location":"management/configure-timeoutstartsec.html","title":"Configure Systemd TimeoutStartSec","text":"<p>A node may fail to load with <code>$ systemctl start mysql.service</code> if the node has a large buffer pool or must synchronize a large amount of data. </p> <p>A resolution is to either increase the setting for the <code>mysql</code> service <code>TimeoutStartSec</code> option to a higher number or disable the option.</p> <p>Check the current timeout with the following:</p> <pre><code>$ systemctl show mysql.service -p TimeoutStartUSec\n</code></pre> Expected output <pre><code>TimeoutStartUSec=10min\n</code></pre> <p>The following command opens an editor and allows you to edit the value:</p> <pre><code>$ sudo systemctl edit mysql.service\n</code></pre> <p>In the text editor, add the following to overwrite the <code>TimeoutStartSec</code> configuration:</p> <pre><code>[Service]\nTimeoutStartSec=900s\n</code></pre> <p>After systemctl is reloaded, the option value changes to 15 minutes.</p> Expected output <pre><code>TimeoutStartUSec=15min\n</code></pre> <p>To disable the option, change the value to <code>0</code>:</p> <pre><code>[Service]\nTimeoutStartSec=0\n</code></pre> <p>After systemctl is reloaded, the option is disabled.</p> Expected output <pre><code>TimeoutStartUSec=infinity\n</code></pre> <p>For the edited change to take effect, run the following command:</p> <pre><code>$ sudo systemctl daemon-reload\n</code></pre> <p>After <code>systemctl</code> has been reloaded, verify your change with <code>systemctl show mysql.service -p TimeoutStartUSec</code>.</p>"},{"location":"management/data_at_rest_encryption.html","title":"Data at Rest Encryption","text":"<p>This feature is considered tech preview quality.</p>"},{"location":"management/data_at_rest_encryption.html#introduction","title":"Introduction","text":"<p>The \u201cData-at-rest\u201d enables data at rest encryption of the InnoDB (file-per-table) tablespace by encrypting the physical database files. The data is automatically encrypted prior to writing to storage and automatically decrypted when read. If unauthorized users access the data files, they cannot read the contents. Data-in-transit can be encrypted using an SSL connection (details are available in the encrypt traffic documentation). Data-at-rest encryption is supported in Percona XtraDB Cluster for file-per-table tablespace and temporary files.</p> <p>Note</p> <p>The Percona Server for MySQL 5.7 data at rest encryption is similar to the MySQL 5.7 data-at-rest encryption. First, review the available encryption features for Percona Server for MySQL 5.7. Percona Server for MySQL 8.0 provides encryption features and options not available in the 5.7 version.</p> Feature Status GA Version keyring_plugin Generally Available, supported <code>5.7.21-21</code> File-Per_Table Tablespace Generally Available, supported <code>5.7.21-21</code> Temporary Files Generally Available, supported <code>5.7.22-22</code>"},{"location":"management/data_at_rest_encryption.html#about-the-keyring_file","title":"About the keyring_file","text":"<p>The <code>keyring_file</code> stores an encryption key in a physical file. Specify the location of the file with the <code>keyring_file_data</code> parameter during startup. The following subsections cover some of the essential procedures for the <code>keyring_file</code> plugin.</p>"},{"location":"management/data_at_rest_encryption.html#configuration","title":"Configuration","text":"<p>Percona XtraDB Cluster inherits the Percona Server for MySQL behavior to configure the <code>keyring_file</code> plugin. Install the plugin and add the following options in the configuration file:</p> <pre><code>[mysqld]\nearly-plugin-load=keyring_file.so\nkeyring_file_data=&lt;PATH&gt;/keyring\n</code></pre> <p>The <code>keyring_file</code> must be loaded using the <code>--early-plugin-load</code> option.</p> <p>A <code>SHOW PLUGINS</code> statement can be used to check if the plugin has been successfully loaded.</p> <p>Note</p> <p>PXC recommends the same configuration on all cluster nodes, and all nodes should have the keyring configured. A JOINER node cannot join the cluster if there is a mismatch in the keyring configuration.</p> <p>If the user has bootstrapped node with keyring enabled, then upcoming cluster nodes inherit the keyring (the encrypted key) from the DONOR node, in Percona XtraDB Cluster prior to 5.7.22, or generate the keyring, implemented in Percona XtraDB Cluster 5.7.22.</p>"},{"location":"management/data_at_rest_encryption.html#usage","title":"Usage","text":"<p>The operations for a keyring are transactional. During write operations, the <code>keyring_file</code> plugin creates a backup file to ensure the operation can be rolled back if needed.</p> <p>Prior to Percona XtraDB Cluster <code>5.7.22-29.26</code> the DONOR node had to send the keyring to the JOINER, because Percona XtraBackup backs up encrypted tablespaces. The JOINER must have the encryption key used by the DONOR to encrypt the tables to read these encrypted tablespaces. This restriction has been relaxed in Percona XtraDB Cluster 5.7.22 and now Percona XtraBackup re-encrypts the data using a transition-key and the JOINER re-encrypts the table using a generated master-key.</p> <p>A keyring is sent from the DONOR to the JOINER as part of SST process (prior to Percona XtraDB Cluster 5.7.22) or is generated on the JOINER.</p> <p>The SST process can be done using xtrabackup (the recommended way), mysqldump or the rsync tool. In xtrabackup case, the keyring is sent before the data backup/streaming begins. The mysqldump utility uses a logical backup so it does not need to send keyring. The rsync tool syncs the keys when the data directories are synced.</p> <p>Warning</p> <p>The rsync tool does not provide a secure channel. A keyring sent using the rsync SST could be vulnerable to attack.</p> <p>The recommended SST process uses xtrabackup. The user can configure a secure channel and the keyring is fully secured. In fact, xtrabackup does not allow a user to send the keyring if the SST channel is not secured.</p> <p>To maintain data consistency, Percona XtraDB Cluster does not allow a combination of nodes with encryption and nodes without encryption. For example, a user creates node-1 with encryption (keyring) enabled and node-2 with encryption (keyring) disabled. A table created with encryption on node-1 fails on node-2, causing data inconsistency.</p> <p>With Percona XtraDB Cluster <code>5.7.22-29.26</code>, a node will fail to start if it fails to load keyring plugin.</p> <p>Note</p> <p>If you do not specify the keyring parameters, the node does not know that it must load keyring. A JOINER node may start but eventually shutdown when a DML-level inconsistency with encrypted tablespace is detected.</p> <p>If a node does not have an encrypted tablespace, the keyring is not generated and the keyring file is empty. The keyring is generated only when node uses an encrypted tablespace.</p> <p>A user can rotate the key when needed. The <code>ALTER INSTANCE ROTATE INNODB MASTER KEY</code> statement is local to the node and is not replicated on cluster.</p> <p>Starting from Percona XtraDB Cluster 5.7.22, the JOINER generates its keyring. In Percona XtraDB Cluster before 5.7.22 when JOINER joined the cluster, its keyring was the same as DONOR\u2019s keyring. The user could rotate the key if different keys for each node is part of the user\u2019s requirements (internal rules). Using different keys for each node is not necessary from the technical side, since all cluster nodes can continue operating with the same MASTER-key.</p>"},{"location":"management/data_at_rest_encryption.html#compatibility","title":"Compatibility","text":"<p>The keyring and the Percona XtraDB Cluster SST process is backward compatible.  A higher-version JOINER can join from lower-version DONOR, but not vice-versa. More details are covered in the Upgrade and compatibility issues section.</p> <p>Note</p> <p>Percona XtraDB Cluster 5.6 does not have encrypted tablespaces. No major upgrade scenario for data-at-rest encryption is possible.</p>"},{"location":"management/data_at_rest_encryption.html#configuring-pxc-to-use-keyring_vault-plugin","title":"Configuring PXC to use keyring_vault plugin","text":""},{"location":"management/data_at_rest_encryption.html#keyring_vault","title":"keyring_vault","text":"<p>The <code>keyring_vault</code> plugin is supported starting from PXC 5.7.22. This plugin allows storing the master-key in vault-server.</p> <p>Warning</p> <p>The rsync tool does not support the <code>keyring_vault</code>. Any rysnc-SST on a joiner is aborted if the <code>keyring_vault</code> is configured.</p>"},{"location":"management/data_at_rest_encryption.html#configuration_1","title":"Configuration","text":"<p>Configuration options are the same as upstream.</p> <p>The <code>my.cnf</code> configuration file should contain the following options:</p> <pre><code>[mysqld]\nearly-plugin-load=\"keyring_vault=keyring_vault.so\"\nkeyring_vault_config=\"&lt;PATH&gt;/keyring_vault_n1.conf\"\n</code></pre> <p>Also <code>keyring_vault_n1.conf</code> file contents should be :</p> <pre><code>vault_url = http://127.0.0.1:8200\nsecret_mount_point = secret1\ntoken = e0345eb4-35dd-3ddd-3b1e-e42bb9f2525d\nvault_ca = /data/keyring_vault_confs/vault_ca.crt\n</code></pre> <p>The detailed description of these options can be found in the upstream documentation.</p> <p>Vault-server is an external server, so make sure a PXC node can reach the server.</p> <p>Note</p> <p>Percona XtraDB Cluster recommends using the same keyring_plugin on all cluster nodes. Mixing keyring plugins is recommended only while transitioning from <code>keyring_file</code> to <code>keyring_vault</code> or vice-versa.</p> <p>All nodes do not need to refer to same vault server. Whatever vault server is used, it should be accessible from the respective node. Also there is no restriction for all nodes to use the same mount point.</p> <p>If the node is not able to reach/connect to the vault server, an error is notified during the server boot, and node refuses to start:</p> <pre><code>2018-05-29T03:54:33.859613Z 0 [Warning] Plugin keyring_vault reported:\n'There is no vault_ca specified in keyring_vault's configuration file.\nPlease make sure that Vault's CA certificate is trusted by the machine\nfrom which you intend to connect to Vault.'\n2018-05-29T03:54:33.977145Z 0 [ERROR] Plugin keyring_vault reported:\n'CURL returned this error code: 7 with error message : Failed to connect\nto 127.0.0.1 port 8200: Connection refused'\n</code></pre> <p>If some nodes of the cluster are unable to connect to vault-server, this relates only to these specific nodes: e.g., if node-1 can connect, and node-2 cannot connect, only node-2 refuses to start. Also, if the server has pre-existing encrypted object and on reboot, the server fails to connect to vault-server, the object is not accessible.</p> <p>In case when vault-server is accessible but authentication credential is incorrect, the consequences are the same, and the corresponding error looks like the following:</p> <pre><code>2018-05-29T03:58:54.461911Z 0 [Warning] Plugin keyring_vault reported:\n'There is no vault_ca specified in keyring_vault's configuration file.\nPlease make sure that Vault's CA certificate is trusted by the machine\nfrom which you intend to connect to Vault.'\n2018-05-29T03:58:54.577477Z 0 [ERROR] Plugin keyring_vault reported:\n'Could not retrieve list of keys from Vault. Vault has returned the\nfollowing error(s): [\"permission denied\"]'\n</code></pre> <p>In case of an accessible vault-server with the wrong mount point, there is no error during server boot, but the node still refuses to start:</p> <pre><code>mysql&gt; CREATE TABLE t1 (c1 INT, PRIMARY KEY pk(c1)) ENCRYPTION='Y';\n</code></pre> <p>The example of the output is the following:</p> <pre><code>ERROR 3185 (HY000): Can't find master key from keyring, please check keyring plugin is loaded.\n\n2018-05-29T04:01:33.774684Z 5 [ERROR] Plugin keyring_vault reported:\n'Could not write key to Vault. Vault has returned the following error(s):\n[\"no handler for route\n'secret1/NDhfSU5OT0RCS2V5LTkzNzVmZWQ0LTVjZTQtMTFlOC05YTc3LTM0MDI4NmI4ODhiZS0xMF8='\"]'\n2018-05-29T04:01:33.774786Z 5 [ERROR] Plugin keyring_vault reported:\n'Could not flush keys to keyring'\n</code></pre>"},{"location":"management/data_at_rest_encryption.html#mixing-keyring-plugins","title":"Mixing keyring plugins","text":"<p>With Percona XtraBackup introducing transition-key logic, it is now possible to mix and match keyring plugins. For example, the user has node-1 configured to use <code>keyring_file</code> plugin and node-2 configured to use <code>keyring_vault</code>.</p> <p>Note</p> <p>Percona recommends the same configuration for all the nodes of the cluster. A mix and match (in keyring plugins) is recommended only during transition from one type of keying to another.</p>"},{"location":"management/data_at_rest_encryption.html#upgrade-and-compatibility-issues","title":"Upgrade and compatibility issues","text":"<p>Percona XtraDB Cluster server before <code>5.7.22</code> only supported the <code>keyring_file</code> and the dependent Percona XtraBackup did not have the concept of transition-key. This makes the mix and match of old Percona XtraDB Cluster server (pre-5.7.21) using <code>keyring_file</code> with new Percona XtraDB Cluster server (post-5.7.22) using <code>keyring_vault</code> not possible. A user should first upgrade Percona XtraDB Cluster server to version 5.7.22 or newer using <code>keyring_file</code> plugin and then let it act as a DONOR to a new booting <code>keyring_vault</code> running the JOINER.</p> <p>If all the nodes use Percona XtraDB Cluster 5.7.22, then the user can configure some nodes to use the <code>keyring_file</code> and other to use the <code>keyring_vault</code>, but this setup is not recommended and should be used during only during the transition to vault.</p> <p>If all the nodes are using Percona XtraDB Cluster 5.7.21 and the user would like to use <code>keyring_vault</code> plugin, all the nodes should be upgraded to use Percona XtraDB Cluster 5.7.22 (that is where vault plugin support was introduced in PXC) or newer. Once all nodes are configured to use Percona XtraDB Cluster 5.7.22, users can switch one node to use <code>vault-plugin</code>.</p> <p>Note</p> <p>MySQL 5.7.21 supports migration between keystores. Migration requires a restart.</p>"},{"location":"management/data_at_rest_encryption.html#innodb-tablespace-encryption","title":"InnoDB tablespace encryption","text":"<p>Percona XtraDB Cluster supports tablespace encryption for the file-per-table tablespace. File-per-tablespace encryption is a table or tablespace-specific feature and is enabled through DDL:</p> <pre><code>CREATE TABLE t1 (c1 INT, PRIMARY KEY pk(c1)) ENCRYPTION='Y';\nCREATE TABLESPACE foo ADD DATAFILE 'foo.ibd' ENCRYPTION='Y';\n</code></pre> <p>The PXC cluster replicates the DDL statements and creates the encrypted table or tablespace on all cluster nodes.</p> <p>This feature requires a keyring plugin to be loaded before it can be used. Percona XtraDB Cluster supports two types of keyring plugin: <code>keyring_file</code> and <code>keyring_vault</code>.</p>"},{"location":"management/data_at_rest_encryption.html#temporary-file-encryption","title":"Temporary file encryption","text":"<p>Percona Server for MySQL 5.7.22 added support for encrypting temporary file storage enabled using <code>encrypt-tmp-files</code>. This storage or files are local to the node and has no direct effect on Percona XtraDB Cluster replication. Percona XtraDB Cluster recommends enabling it on all the cluster nodes, though the action is not mandatory. The parameter is the same as in Percona Server:</p> <pre><code>[mysqld]\nencrypt-tmp-files=ON\n</code></pre>"},{"location":"management/data_at_rest_encryption.html#migrating-keys-between-keyring-keystores","title":"Migrating Keys Between Keyring Keystores","text":"<p>Percona XtraDB Cluster supports key migration between keystores. The migration can be performed offline or online.</p>"},{"location":"management/data_at_rest_encryption.html#offline-migration","title":"Offline Migration","text":"<p>In offline migration, the node to migrate is shutdown and the migration server takes care of migrating keys for the said server to a new keystore.</p> <p>Following example illustrates this scenario:</p> <ol> <li> <p>Three Percona XtraDB Cluster nodes n1, n2, n3 - all using <code>keyring_file</code>, and n2 should be migrated to use <code>keyring_vault</code></p> </li> <li> <p>The user shuts down n2 node.</p> </li> <li> <p>The user starts the Migration Server (<code>mysqld</code> with a special option).</p> </li> <li> <p>The Migration Server copies keys from n2 keyring file and adds them to the vault server.</p> </li> <li> <p>The user starts n2 node with the vault parameter, and keys should be available.</p> </li> </ol> <p>Here is how the migration server output should look like:</p> <pre><code>/dev/shm/pxc57/bin/mysqld --defaults-file=/dev/shm/pxc57/copy_mig.cnf \\\n--keyring-migration-source=keyring_file.so \\\n--keyring_file_data=/dev/shm/pxc57/node2/keyring \\\n--keyring-migration-destination=keyring_vault.so \\\n--keyring_vault_config=/dev/shm/pxc57/vault/keyring_vault.cnf &amp;\n\n2018-05-30T03:44:11.803459Z 0 [Warning] TIMESTAMP with implicit DEFAULT\nvalue is deprecated. Please use\n--explicit_defaults_for_timestamp server option (see documentation for\nmore details).\n2018-05-30T03:44:11.803534Z 0 [Note] --secure-file-priv is set to NULL.\nOperations related to importing and\nexporting data are disabled\n2018-05-30T03:44:11.803550Z 0 [Warning] WSREP: Node is not a cluster node.\nDisabling pxc_strict_mode\n2018-05-30T03:44:11.803564Z 0 [Note] /dev/shm/pxc57/bin/mysqld\n(mysqld 5.7.21-21-29.26-debug) starting as process\n5710 ...\n2018-05-30T03:44:11.805917Z 0 [Warning] Can't create test file /dev/shm/pxc57/copy_mig/qaserver-06.lower-test\n2018-05-30T03:44:11.805932Z 0 [Warning] Can't create test file /dev/shm/pxc57/copy_mig/qaserver-06.lower-test\n2018-05-30T03:44:11.945989Z 0 [Note] Keyring migration successful.\n2018-05-30T03:44:11.946015Z 0 [Note] Binlog end\n2018-05-30T03:44:11.946047Z 0 [Note] Shutting down plugin 'keyring_vault'\n2018-05-30T03:44:11.946166Z 0 [Note] Shutting down plugin 'keyring_file'\n2018-05-30T03:44:11.947334Z 0 [Note] /dev/shm/pxc57/bin/mysqld: Shutdown complete\n</code></pre> <p>The destination keystore receives additional migrated keys (pre-existing keys in destination keystore are not touched or removed) on successful migration. The source keystore continues to retain the keys as migration performs copy operation and not move operation.</p> <p>If the migration fails, then the destination keystore is left untouched.</p>"},{"location":"management/data_at_rest_encryption.html#online-migration","title":"Online Migration","text":"<p>In online migration, node to migrate is kept running, and the migration server takes care of migrating keys for the said server to a new keystore by connecting to the node.</p> <p>The following example illustrates this scenario:</p> <ol> <li> <p>Three Percona XtraDB Cluster nodes n1, n2, n3 - all using <code>keyring_file</code>, and n3 should be migrated to use <code>keyring_vault</code></p> </li> <li> <p>User starts the Migration Server (<code>mysqld</code> with a special option).</p> </li> <li> <p>Migration Server copies keys from the n3 keyring file and adds them to the vault server.</p> </li> <li> <p>The user restarts n3 node with the vault parameter, and keys should be available.</p> </li> </ol> <p>Here is how the migration server output should look like:</p> <pre><code>/dev/shm/pxc57/bin/mysqld --defaults-file=/dev/shm/pxc57/copy_mig.cnf \\\n--keyring-migration-source=keyring_vault.so \\\n--keyring_vault_config=/dev/shm/pxc57/keyring_vault3.cnf \\\n--keyring-migration-destination=keyring_file.so \\\n--keyring_file_data=/dev/shm/pxc57/node3/keyring \\\n--keyring-migration-host=localhost \\\n--keyring-migration-user=root \\\n--keyring-migration-port=16300 \\\n--keyring-migration-password='' &amp;\n\n2018-05-29T14:07:32.789673Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use\n--explicit_defaults_for_timestamp server option (see documentation for more details).\n2018-05-29T14:07:32.789748Z 0 [Note] --secure-file-priv is set to NULL. Operations related to importing and\nexporting data are disabled\n2018-05-29T14:07:32.789766Z 0 [Warning] WSREP: Node is not a cluster node. Disabling pxc_strict_mode\n2018-05-29T14:07:32.789780Z 0 [Note] /dev/shm/pxc57/bin/mysqld (mysqld 5.7.21-21-29.26-debug) starting as process\n4936 ...\n2018-05-29T14:07:32.792036Z 0 [Warning] Can't create test file /dev/shm/pxc57/copy_mig/qaserver-06.lower-test\n2018-05-29T14:07:32.792052Z 0 [Warning] Can't create test file /dev/shm/pxc57/copy_mig/qaserver-06.lower-test\n2018-05-29T14:07:32.927612Z 0 [Note] Keyring migration successful.\n2018-05-29T14:07:32.927636Z 0 [Note] Binlog end\n2018-05-29T14:07:32.927671Z 0 [Note] Shutting down plugin 'keyring_vault'\n2018-05-29T14:07:32.927793Z 0 [Note] Shutting down plugin 'keyring_file'\n2018-05-29T14:07:32.928864Z 0 [Note] /dev/shm/pxc57/bin/mysqld: Shutdown complete\n</code></pre> <p>On a successful migration, the destination keystore has the additional migrated keys (the pre-existing keys in the destination keystore are not touched or removed). The source keystore continues to retain the keys as the migration performs copy operation and not move operation.</p> <p>If the migration fails, then the destination keystore is left untouched.</p>"},{"location":"management/data_at_rest_encryption.html#migration-server-options","title":"Migration server options","text":"<ul> <li> <p><code>--keyring-migration-source</code>: The source keyring plugin that manages the keys to be migrated.</p> </li> <li> <p><code>--keyring-migration-destination</code>: The destination keyring plugin to which the migrated keys are to be copied</p> </li> </ul> <p>Note</p> <p>For offline migration, no additional key migration options are needed.</p> <ul> <li> <p><code>--keyring-migration-host</code>: The host where the running server is located. This host is always the local host.</p> </li> <li> <p><code>--keyring-migration-user</code>, <code>--keyring-migration-password</code>: The username and password for the account used to connect to the running server.</p> </li> <li> <p><code>--keyring-migration-port</code>: Used for TCP/IP connections, the running server\u2019s port number used to connect.</p> </li> <li> <p><code>--keyring-migration-socket</code>: Used for Unix socket file or Windows named pipe connections, the running server socket or named pipe used to connect.</p> </li> </ul> <p>Prerequisite for migration:</p> <p>Make sure to pass required keyring options and other configuration parameters for the two keyring plugins. For example, if <code>keyring_file</code> is one of the plugins, you must set the <code>keyring_file_data</code> system variable if the keyring data file location is not the default location.</p> <p>Other non-keyring options may be required as well. One way to specify these options is by using <code>--defaults-file</code> to name an option file that contains the required options.</p> <pre><code>[mysqld]\nbasedir=/dev/shm/pxc57\ndatadir=/dev/shm/pxc57/copy_mig\nlog-error=/dev/shm/pxc57/logs/copy_mig.err\nsocket=/tmp/copy_mig.sock\nport=16400\n</code></pre>"},{"location":"manual/certification.html","title":"Certification in Percona XtraDB Cluster","text":"<p>Percona XtraDB Cluster replicates actions executed on one node to all other nodes in the cluster, and makes it fast enough to appear as if it is synchronous (virtually synchronous).</p> <p>The following types of actions exist:</p> <ul> <li> <p>DDL actions are executed using Total Order Isolation (TOI). We can ignore Rolling Schema Upgrades (ROI).</p> </li> <li> <p>DML actions are executed using normal Galera replication protocol.</p> </li> </ul> <p>Note</p> <p>This manual page assumes the reader is aware of TOI and MySQL replication protocol.</p> <p>DML (<code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>) operations effectively change the state of the database, and all such operations are recorded in XtraDB by registering a unique object identifier (key) for each change (an update or a new addition).</p> <ul> <li>A transaction can change an arbitrary number of different data objects.   Each such object change is recorded in XtraDB   using an <code>append_key</code> operation.   An <code>append_key</code> operation registers the key of the data object   that has undergone change by the transaction.   The key for rows can be represented in three parts as   <code>db_name</code>, <code>table_name</code>, and <code>pk_columns_for_table</code>   (if <code>pk</code> is absent, a hash of the complete row is calculated).</li> </ul> <p>This ensures that there is quick and short meta information   about the rows that this transaction has touched or modified.   This information is passed on as part of the write-set for certification   to all the nodes in the cluster while the transaction is in the commit phase.</p> <ul> <li> <p>For a transaction to commit, it has to pass XtraDB/Galera certification,   ensuring that transactions don\u2019t conflict with any other changes   posted on the cluster group/channel.   Certification will add the keys modified by a given transaction   to its own central certification vector (CCV),   represented by <code>cert_index_ng</code>.   If the said key is already part of the vector,   then conflict resolution checks are triggered.</p> </li> <li> <p>Conflict resolution traces the reference transaction   (that last modified this item in the cluster group).   If this reference transaction is from some other node,   that suggests the same data was modified by the other node,   and changes of that node have been certified by the local node   that is executing the check.   In such cases, the transaction that arrived later fails to certify.</p> </li> </ul> <p>Changes made to database objects are bin-logged. This is similar to how MySQL does it for replication with its Source-Replica ecosystem, except that a packet of changes from a given transaction is created and named as a write-set.</p> <p>Once the client/user issues a <code>COMMIT</code>, Percona XtraDB Cluster will run a commit hook. Commit hooks ensure the following:</p> <ul> <li> <p>Flush the binary logs.</p> </li> <li> <p>Check if the transaction needs replication (not needed for read-only transactions like <code>SELECT</code>).</p> </li> <li> <p>If a transaction needs replication, then it invokes a pre-commit hook in the Galera ecosystem. During this pre-commit hook, a write-set is written in the group channel by a replicate operation. All nodes (including the one that executed the transaction) subscribe to this group-channel and read the write-set.</p> </li> <li> <p><code>gcs_recv_thread</code> is the first to receive the packet, which is then processed through different action handlers.</p> </li> <li> <p>Each packet read from the group-channel is assigned an <code>id</code>, which is a locally maintained counter by each node in sync with the group. When any new node joins the group/cluster, a seed-id for it is initialized to the current active id from group/cluster.</p> </li> </ul> <p>There is an inherent assumption/protocol enforcement   that all nodes read the packet from a channel in the same order,   and that way even though each packet doesn\u2019t carry <code>id</code> information,   it is inherently established using the locally maintained <code>id</code> value.</p>"},{"location":"manual/certification.html#common-situation","title":"Common Situation","text":"<p>The following example shows what happens in a common situation. <code>act_id</code> is incremented and assigned only for totally ordered actions, and only in primary state (skip messages while in state exchange).</p> <pre><code>rcvd-&gt;id = ++group-&gt;act_id_;\n</code></pre> <p>Note</p> <p>This is an amazing way to solve the problem of the id coordination in multi-source systems. Otherwise a node will have to first get an id from central system or through a separate agreed protocol, and then use it for the packet, thereby doubling the round-trip time.</p>"},{"location":"manual/certification.html#conflicts","title":"Conflicts","text":"<p>The following happens if two nodes get ready with their packet at same time:</p> <ol> <li> <p>Both nodes will be allowed to put the packet on the channel. That means the channel will see packets from different nodes queued one behind another.</p> </li> <li> <p>The following example shows what happens if two nodes modify same set of rows. Nodes are in sync until this point:</p> <pre><code>create -&gt; insert (1,2,3,4)\n</code></pre> <ul> <li> <p>Node 1: <code>update i = i + 10;</code></p> </li> <li> <p>Node 2: <code>update i = i + 100;</code></p> </li> </ul> <p>Let\u2019s associate transaction ID (<code>trx-id</code>) for an update transaction that is executed on Node 1 and Node 2 in parallel. Although the real algorithm is more involved (with <code>uuid</code> + <code>seqno</code>), it is conceptually the same, so we are using <code>trx_id</code>.</p> <ul> <li> <p>Node 1: <code>update action: trx-id=n1x</code></p> </li> <li> <p>Node 2: <code>update action: trx-id=n2x</code></p> </li> </ul> <p>Both node packets are added to the channel, but the transactions are conflicting. The protocol says: FIRST WRITE WINS.</p> <p>So in this case, whoever is first to write to the channel will get certified. Let\u2019s say Node 2 is first to write the packet, and then Node 1 makes changes immediately after it.</p> <p>Note</p> <p>Each node subscribes to all packages, including its own package.</p> <ul> <li> <p>Node 2 will see its own packet and will process it. Then it will see the packet from Node 1, try to certify it, and fail.</p> </li> <li> <p>Node 1 will see the packet from Node 2 and will process it.</p> </li> </ul> <p>Note</p> <p>InnoDB allows isolation, so Node 1 can process packets from Node 2 independent of Node 1 transaction changes</p> <p>Then Node 1 will see its own packet, try to certify it, and fail.</p> <p>Note</p> <p>Even though the packet originated from Node 1, it will undergo certification to catch cases like these.</p> </li> </ol>"},{"location":"manual/certification.html#resolving-certification-conflicts","title":"Resolving Certification Conflicts","text":"<p>The certification protocol can be described using the previous example. The central certification vector (CCV) is updated to reflect reference transaction.</p> <ul> <li>Node 2 sees its own packet for certification, adds it to its local CCV and performs certification checks. Once these checks pass, it updates the reference transaction by setting it to <code>n2x</code>.</li> </ul> <p>Node 2 then gets the packet from Node 1 for certification.   The packet key is already present in CCV,   with the reference transaction set it to <code>n2x</code>,   whereas write-set proposes setting it to <code>n1x</code>.   This causes a conflict, which in turn causes the transaction from Node 1   to fail the certification test.</p> <ul> <li>Node 1 sees the packet from Node 2 for certification, which is then processed, the local CCV is updated, and the reference transaction is set to <code>n2x</code>.</li> </ul> <p>Using the same case as explained above, Node 1 certification also rejects the packet from Node 1.</p> <p>This suggests that the node doesn\u2019t need to wait for certification to complete, but just needs to ensure that the packet is written to the channel. The applier transaction will always win and the local conflicting transaction will be rolled back.</p> <p>The following example shows what happens if one of the nodes has local changes that are not synced with the group:</p> <pre><code>create (id primary key) -&gt; insert (1), (2), (3), (4);\n</code></pre> <p>The example of the output is the following:</p> <pre><code>node-1: wsrep_on=0; insert (5); wsrep_on=1\nnode-2: insert(5).\n</code></pre> <p>The <code>insert(5)</code> statement will generate a write-set that will then be replicated to Node 1. Node 1 will try to apply it but will fail with <code>duplicate-key-error</code>, because 5 already exist.</p> <p>XtraDB will flag this as an error, which would eventually cause Node 1 to shutdown.</p>"},{"location":"manual/certification.html#incrementing-gtid","title":"Incrementing GTID","text":"<p>GTID is incremented only when the transaction passes certification, and is ready for commit. That way errant packets don\u2019t cause GTID to increment.</p> <p>Also, group packet <code>id</code> is not confused with GTID. Without errant packets, it may seem that these two counters are the same, but they are not related.</p>"},{"location":"manual/failover.html","title":"Cluster Failover","text":"<p>Cluster membership is determined simply by which nodes are connected to the rest of the cluster; there is no configuration setting explicitly defining the list of all possible cluster nodes. Therefore, every time a node joins the cluster, the total size of the cluster is increased and when a node leaves (gracefully) the size is decreased.</p> <p>The size of the cluster is used to determine the required votes to achieve quorum. A quorum vote is done when a node or nodes are suspected to no longer be part of the cluster (they do not respond). This no response timeout is the <code>evs.suspect_timeout</code> setting in the <code>wsrep_provider_options</code> (default 5 sec), and when a node goes down ungracefully, write operations will be blocked on the cluster for slightly longer than that timeout.</p> <p>Once a node (or nodes) is determined to be disconnected, then the remaining nodes cast a quorum vote, and if the majority of nodes from before the disconnect are still still connected, then that partition remains up. In the case of a network partition, some nodes will be alive and active on each side of the network disconnect. In this case, only the quorum will continue. The partition(s) without quorum will change to non-primary state.</p> <p>As a consequence, it\u2019s not possible to have safe automatic failover in a 2 node cluster, because failure of one node will cause the remaining node to become non-primary. Moreover, any cluster with an even number of nodes (say two nodes in two different switches) have some possibility of a split brain situation, when neither partition is able to retain quorum if connection between them is lost, and so they both become non-primary.</p> <p>Therefore, for automatic failover, the rule of 3s is recommended. It applies at various levels of your infrastructure, depending on how far the cluster is spread out to avoid single points of failure. For example:</p> <ul> <li> <p>A cluster on a single switch should have 3 nodes</p> </li> <li> <p>A cluster spanning switches should be spread evenly across at least 3 switches</p> </li> <li> <p>A cluster spanning networks should span at least 3 networks</p> </li> <li> <p>A cluster spanning data centers should span at least 3 data centers</p> </li> </ul> <p>These rules will prevent split brain situations and ensure automatic failover works correctly.</p>"},{"location":"manual/failover.html#using-an-arbitrator","title":"Using an arbitrator","text":"<p>If it is too expensive to add a third node, switch, network, or datacenter, you should use an arbitrator. An arbitrator is a voting member of the cluster that can receive and relay replication, but it does not persist any data, and runs its own daemon instead of <code>mysqld</code>. Placing even a single arbitrator in a 3<sup>rd</sup> location can add split brain protection to a cluster that is spread across only two nodes/locations.</p>"},{"location":"manual/failover.html#recovering-a-non-primary-cluster","title":"Recovering a Non-Primary cluster","text":"<p>It is important to note that the rule of 3s applies only to automatic failover. In the event of a 2-node cluster (or in the event of some other outage that leaves a minority of nodes active), the failure of one node will cause the other to become non-primary and refuse operations. However, you can recover the node from non-primary state using the following command:</p> <pre><code>SET GLOBAL wsrep_provider_options='pc.bootstrap=true';\n</code></pre> <p>This will tell the node (and all nodes still connected to its partition) that it can become a primary cluster. However, this is only safe to do when you are sure there is no other partition operating in primary as well, or else Percona XtraDB Cluster will allow those two partitions to diverge (and you will end up with two databases that are impossible to re-merge automatically).</p> <p>For example, assume there are two data centers, where one is primary and one is for disaster recovery, with an even number of nodes in each. When an extra arbitrator node is run only in the primary data center, the following high availability features will be available:</p> <ul> <li> <p>Auto-failover of any single node or nodes within the primary or secondary data center</p> </li> <li> <p>Failure of the secondary data center would not cause the primary to go down (because of the arbitrator)</p> </li> <li> <p>Failure of the primary data center would leave the secondary in a non-primary state.</p> </li> <li> <p>If a disaster-recovery failover has been executed, you can tell the secondary data center to bootstrap itself with a single command, but disaster-recovery failover remains in your control.</p> </li> </ul>"},{"location":"manual/failover.html#other-reading","title":"Other Reading","text":"<ul> <li>PXC - Failure Scenarios with only 2 nodes</li> </ul>"},{"location":"manual/gcache_record-set_cache_difference.html","title":"Understanding GCache and Record-Set Cache","text":"<p>In Percona XtraDB Cluster, there is a concept of GCache and Record-Set cache (which can also be called transaction write-set cache). The use of these two caches is often confusing if you are running long transactions, because both of them result in the creation of disk-level files. This manual describes what their main differences are.</p>"},{"location":"manual/gcache_record-set_cache_difference.html#record-set-cache","title":"Record-Set Cache","text":"<p>When you run a long-running transaction on any particular node, it will try to append a key for each row that it tries to modify (the key is a unique identifier for the row <code>{db,table,pk.columns}</code>). This information is cached in out-write-set, which is then sent to the group for certification.</p> <p>Keys are cached in HeapStore (which has <code>page-size=64K</code> and <code>total-size=4MB</code>). If the transaction data-size outgrows this limit, then the storage is switched from Heap to Page (which has <code>page-size=64MB</code> and <code>total-limit=free-space-on-disk</code>).</p> <p>All these limits are non-configurable, but having a memory-page size greater than 4MB per transaction can cause things to stall due to memory pressure, so this limit is reasonable. This is another limitation to address when Galera supports large transaction.</p> <p>The same long-running transaction will also generate binlog data that also appends to out-write-set on commit (<code>HeapStore-&gt;FileStore</code>). This data can be significant, as it is a binlog image of rows inserted/updated/deleted by the transaction. The <code>wsrep_max_ws_size</code> variable controls the size of this part of the write-set. The threshold doesn\u2019t consider size allocated for caching-keys and the header.</p> <p>If <code>FileStore</code> is used, it creates a file on the disk (with names like <code>xxxx_keys</code> and <code>xxxx_data</code>) to store the cache data. These files are kept until a transaction is committed, so the lifetime of the transaction is linked.</p> <p>When the node is done with the transaction and is about to commit, it will generate the final-write-set using the two files (if the data size grew enough to use <code>FileStore</code>) plus <code>HEADER</code>, and will publish it for certification to cluster.</p> <p>The native node executing the transaction will also act as subscription node, and will receive its own write-set through the cluster publish mechanism. This time, the native node will try to cache write-set into its GCache. How much data GCache retains is controlled by the GCache configuration.</p>"},{"location":"manual/gcache_record-set_cache_difference.html#gcache","title":"GCache","text":"<p>GCache holds the write-set published on the cluster for replication. The lifetime of write-set in GCache is not transaction-linked.</p> <p>When a <code>JOINER</code> node needs an IST, it will be serviced through this GCache (if possible).</p> <p>GCache will also create the files to disk. You can read more about it here.</p> <p>At any given point in time, the native node has two copies of the write-set: one in GCache and another in Record-Set Cache.</p> <p>For example, lets say you <code>INSERT/UPDATE</code> 2 million rows in a table with the following schema.</p> <pre><code>(int, char(100), char(100) with pk (int, char(100))\n</code></pre> <p>It will create write-set key/data files in the background similar to the following:</p> <pre><code>-rw------- 1 xxx xxx 67108864 Apr 11 12:26 0x00000707_data.000000\n-rw------- 1 xxx xxx 67108864 Apr 11 12:26 0x00000707_data.000001\n-rw------- 1 xxx xxx 67108864 Apr 11 12:26 0x00000707_data.000002\n-rw------- 1 xxx xxx 67108864 Apr 11 12:26 0x00000707_keys.000000\n</code></pre>"},{"location":"manual/monitoring.html","title":"Monitoring the cluster","text":"<p>Each node can have a different view of the cluster. There is no centralized node to monitor. To track down the source of issues, you have to monitor each node independently.</p> <p>Values of many variables depend on the node from which you are querying. For example, replication sent from a node and writes received by all other nodes.</p> <p>Having data from all nodes can help you understand where flow messages are coming from, which node sends excessively large transactions, and so on.</p>"},{"location":"manual/monitoring.html#manual-monitoring","title":"Manual Monitoring","text":"<p>Manual cluster monitoring can be performed using myq-tools.</p>"},{"location":"manual/monitoring.html#alerting","title":"Alerting","text":"<p>Besides standard MySQL alerting, you should use at least the following triggers specific to Percona XtraDB Cluster:</p> <ul> <li>Cluster state of each node</li> </ul> <p><code>wsrep_cluster_status</code> != Primary</p> <ul> <li>Node state</li> </ul> <p><code>wsrep_connected</code> != <code>ON</code></p> <p><code>wsrep_ready</code> != <code>ON</code></p> <p>For additional alerting, consider the following:</p> <ul> <li> <p>Excessive replication conflicts can be identtified using the <code>wsrep_local_cert_failures</code> and <code>wsrep_local_bf_aborts</code> variables</p> </li> <li> <p>Excessive flow control messages can be identified using the <code>wsrep_flow_control_sent</code> and <code>wsrep_flow_control_recv</code> variables</p> </li> <li> <p>Large replication queues can be identified using the <code>wsrep_local_recv_queue</code>.</p> </li> </ul>"},{"location":"manual/monitoring.html#metrics","title":"Metrics","text":"<p>Cluster metrics collection for long-term graphing should be done at least for the following:</p> <ul> <li>Queue sizes:</li> </ul> <p><code>wsrep_local_recv_queue</code> and <code>wsrep_local_send_queue</code></p> <ul> <li>Flow control:</li> </ul> <p><code>wsrep_flow_control_sent</code> and <code>wsrep_flow_control_recv</code></p> <ul> <li>Number of transactions for a node:</li> </ul> <p><code>wsrep_replicated</code> and <code>wsrep_received</code></p> <ul> <li>Number of transactions in bytes:</li> </ul> <p><code>wsrep_replicated_bytes</code> and <code>wsrep_received_bytes</code></p> <ul> <li>Replication conflicts:</li> </ul> <p><code>wsrep_local_cert_failures</code> and <code>wsrep_local_bf_aborts</code></p>"},{"location":"manual/monitoring.html#using-percona-monitoring-and-management","title":"Using Percona Monitoring and Management","text":"<p>Percona Monitoring and Management includes two dashboards to monitor PXC:</p> <ol> <li> <p>PXC/Galera Cluster Overview:</p> <p></p> </li> <li> <p>PXC/Galera Graphs:</p> <p></p> <p>These dashboards are available from the menu:</p> <p></p> </li> </ol> <p>Please refer to the official documentation for details on Percona Monitoring and Management installation and setup.</p>"},{"location":"manual/monitoring.html#other-reading","title":"Other Reading","text":"<ul> <li>Realtime stats to pay attention to in PXC and Galera</li> </ul>"},{"location":"manual/performance_schema_instrumentation.html","title":"Perfomance Schema Instrumentation","text":"<p>To improve monitoring Percona XtraDB Cluster has implemented an infrastructure to expose Galera instruments (mutexes, cond-variables, files, threads) as a part of <code>PERFORMANCE_SCHEMA</code>.</p> <p>Although mutexes and condition variables from <code>wsrep</code> were already part of <code>PERFORMANCE_SCHEMA</code> threads were not.</p> <p>Mutexes, condition variables, threads, and files from Galera library also were not part of the <code>PERFORMANCE_SCHEMA</code>.</p> <p>You can see the complete list of available instruments by running:</p> <pre><code>mysql&gt; SELECT * FROM performance_schema.setup_instruments WHERE name LIKE '%galera%' OR name LIKE '%wsrep%';\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+----------------------------------------------------------+---------+-------+\n| NAME                                                     | ENABLED | TIMED |\n+----------------------------------------------------------+---------+-------+\n| wait/synch/mutex/sql/LOCK_wsrep_ready                    | NO      | NO    |\n| wait/synch/mutex/sql/LOCK_wsrep_sst                      | NO      | NO    |\n| wait/synch/mutex/sql/LOCK_wsrep_sst_init                 | NO      | NO    |\n...\n| stage/wsrep/wsrep: in rollback thread                    | NO      | NO    |\n| stage/wsrep/wsrep: aborter idle                          | NO      | NO    |\n| stage/wsrep/wsrep: aborter active                        | NO      | NO    |\n+----------------------------------------------------------+---------+-------+\n73 rows in set (0.00 sec)\n</code></pre> <p>Some of the most important are:</p> <ul> <li> <p>Two main actions that Galera does are <code>REPLICATION</code> and <code>ROLLBACK</code>. Mutexes, condition variables, and threads related to this are part of <code>PERFORMANCE_SCHEMA</code>.</p> </li> <li> <p>Galera internally uses monitor mechanism to enforce ordering of events. These monitor control events apply and are mainly responsible for the wait between different action. All such monitor mutexes and condition variables are covered as part of this implementation.</p> </li> <li> <p>There are lot of other miscellaneous action related to receiving of package and servicing messages. Mutexes and condition variables needed for them are now visible too. Threads that manage receiving and servicing are also being instrumented.</p> </li> </ul> <p>This feature has exposed all the important mutexes, condition variables that lead to lock/threads/files as part of this process.</p> <p>Besides exposing file it also tracks write/read bytes like stats for file. These stats are not exposed for Galera files as Galera uses <code>mmap</code>.</p> <p>Also, there are some threads that are short-lived and created only when needed especially for SST/IST purpose. They are also tracked but come into <code>PERFORMANCE_SCHEMA</code> tables only if/when they are created.</p> <p><code>Stage Info</code> from Galera specific function which server updates to track state of running thread is also visible in <code>PERFORMANCE_SCHEMA</code>.</p>"},{"location":"manual/performance_schema_instrumentation.html#what-is-not-exposed","title":"What is not exposed ?","text":"<p>Galera uses customer data-structure in some cases (like STL structures). Mutexes used for protecting these structures which are not part of mainline Galera logic or doesn\u2019t fall in big-picture are not tracked. Same goes with threads that are <code>gcomm</code> library specific.</p> <p>Galera maintains a process vector inside each monitor for its internal graph creation. This process vector is 65K in size and there are two such vectors per monitor. That is 128K * 3 = 384K condition variables. These are not tracked to avoid hogging <code>PERFORMANCE_SCHEMA</code> limits and sidelining of the main crucial information.</p>"},{"location":"manual/performance_schema_instrumentation.html#using-pxc_cluster_view","title":"Using <code>pxc_cluster_view</code>","text":"<p>The <code>pxc_cluster_view</code> - provides a unified view of the cluster. The table is in the Performance_Schema database.</p> <pre><code>DESCRIBE pxc_cluster_view;\n</code></pre> <p>This table has the following definition:</p> <pre><code>+-------------+--------------+------+-----+---------+-------+\n| Field       | Type         | Null | Key | Default | Extra |\n+-------------+--------------+------+-----+---------+-------+\n| HOST_NAME   | char(64)     | NO   |     | NULL    |       |\n| UUID        | char(36)     | NO   |     | NULL    |       |\n| STATUS      | char(64)     | NO   |     | NULL    |       |\n| LOCAL_INDEX | int unsigned | NO   |     | NULL    |       |\n| SEGMENT     | int unsigned | NO   |     | NULL    |       |\n+-------------+--------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n</code></pre> <p>To view the table, run the following query:</p> <pre><code>SELECT * FROM pxc_cluster_view;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+-----------+--------------------------------------+--------+-------------+---------+\n| HOST_NAME | UUID                                 | STATUS | LOCAL_INDEX | SEGMENT |\n+-----------+--------------------------------------+--------+-------------+---------+\n| node1     | 22b9d47e-c215-11eb-81f7-7ed65a9d253b | SYNCED |           0 |       0 |\n| node3     | 29c51cf5-c216-11eb-9101-1ba3a28e377a | SYNCED |           1 |       0 |\n| node2     | 982cdb03-c215-11eb-9865-0ae076a59c5c | SYNCED |           2 |       0 |\n+-----------+--------------------------------------+--------+-------------+---------+\n3 rows in set (0.00 sec)\n</code></pre>"},{"location":"manual/restarting_nodes.html","title":"Restarting the cluster nodes","text":"<p>To restart a cluster node, shut down MySQL and restarting it. The node should leave the cluster (and the total vote count for quorum should decrement).</p> <p>When it rejoins, the node should synchronize using IST. If the set of changes needed for IST are not found in the <code>gcache</code> file on any other node in the entire cluster, then SST will be performed instead. Therefore, restarting cluster nodes for rolling configuration changes or software upgrades is rather simple from the cluster\u2019s perspective.</p> <p>Note</p> <p>If you restart a node with an invalid configuration change that prevents MySQL from loading, Galera will drop the node\u2019s state and force an SST for that node.</p> <p>Note</p> <p>If MySQL fails for any reason, it will not remove its PID file (which is by design deleted only on clean shutdown). Obviously server will not restart if existing PID file is present. So in case of encountered MySQL failure for any reason with the relevant records in log, PID file should be removed manually.</p>"},{"location":"manual/state_snapshot_transfer.html","title":"State Snapshot Transfer","text":"<p>State Snapshot Transfer (SST) is a full data copy from one node (donor) to the joining node (joiner). It\u2019s used when a new node joins the cluster. In order to be synchronized with the cluster, the new node has to receive data from a node that is already part of the cluster.</p> <p>There are three methods of SST available in Percona XtraDB Cluster:</p> <ul> <li> <p><code>mysqldump</code></p> </li> <li> <p><code>rsync</code></p> </li> <li> <p><code>xtrabackup</code></p> </li> </ul> <p>The downside of <code>mysqldump</code> and <code>rsync</code> is that the donor node becomes READ-ONLY while data is being copied. Xtrabackup SST, on the other hand, uses backup locks, which means the Galera provider is not paused at all as with FTWRL (Flush Tables with Read Lock) earlier. The SST method can be configured using the <code>wsrep_sst_method</code> variable.</p> <p>Note</p> <p>If the <code>gcs.sync_donor</code> variable is set to <code>Yes</code> (default is <code>No</code>), the whole cluster will get blocked if the donor is blocked by SST.</p>"},{"location":"manual/state_snapshot_transfer.html#choosing-the-sst-donor","title":"Choosing the SST Donor","text":"<p>If there are no nodes available that can safely perform incremental state transfer (IST), the cluster defaults to SST.</p> <p>If there are nodes available that can perform IST, the cluster prefers a local node over remote nodes to serve as the donor.</p> <p>If there are no local nodes available that can perform IST, the cluster chooses a remote node to serve as the donor.</p> <p>If there are several local and remote nodes that can perform IST, the cluster chooses the node with the highest <code>seqno</code> to serve as the donor.</p>"},{"location":"manual/state_snapshot_transfer.html#using-percona-xtrabackup","title":"Using Percona Xtrabackup","text":"<p>The default SST method is <code>xtrabackup-v2</code> which uses Percona XtraBackup. This is the least blocking method that leverages backup locks. XtraBackup is run locally on the donor node, so it\u2019s important that the correct user credentials are set up on the donor node. In order for Percona XtraDB Cluster to perform SST using XtraBackup, credentials for connecting to the donor node need to be set up in the <code>wsrep_sst_auth</code> variable. Besides the credentials, the datadir needs to be specified in the server configuration file <code>my.cnf</code>, otherwise the transfer process will fail.</p> <p>For more information about the required credentials, see the XtraBackup manual.</p> <p>To test if the credentials will work, run innobackupex on the donor node with the username and password specified in the <code>wsrep_sst_auth</code> variable. For example, if the value of <code>wsrep_sst_auth</code> is <code>root:Passw0rd</code>, the innobackupex command should look like this:</p> <pre><code>innobackupex --user=root --password=Passw0rd /tmp/\n</code></pre> <p>Detailed information on this method is provided in Percona XtraBackup SST Configuration documentation.</p>"},{"location":"manual/state_snapshot_transfer.html#using-mysqldump","title":"Using mysqldump","text":"<p>This method uses the standard <code>mysqldump</code> utility to dump all the databases from the donor node and import them to the joining node. For this method to work, the <code>wsrep_sst_auth</code> variable needs to be set up with the root credentials. This method is the slowest and it performs a global lock during SST, which blocks writes to the donor node.</p> <p>The script used for this method is <code>/usr/bin/wsrep_sst_mysqldump</code> and it is included in the Percona XtraDB Cluster binary packages.</p>"},{"location":"manual/state_snapshot_transfer.html#using-rsync","title":"Using <code>rsync</code>","text":"<p>This method uses <code>rsync</code> to copy files from donor to the joining node. In some cases, this can be faster than using XtraBackup, but it requires a global data lock, which will block writes to the donor node. This method doesn\u2019t require root credentials to be set up in the <code>wsrep_sst_auth</code>.</p> <p>The script used for this method is <code>/usr/bin/wsrep_sst_rsync</code> and it is included in the Percona XtraDB Cluster binary packages.</p>"},{"location":"manual/state_snapshot_transfer.html#sst-for-tables-with-tablespaces-that-are-not-in-the-data-directory","title":"SST for tables with tablespaces that are not in the data directory","text":"<p>For example:</p> <pre><code>CREATE TABLE t1 (c1 INT PRIMARY KEY) DATA DIRECTORY = '/alternative/directory';\n</code></pre> <p>The result depends on the SST method:</p> <ul> <li>SST using <code>rsync</code></li> </ul> <p>SST will report success, however the table\u2019s data will not be copied over,   since <code>rsync</code> just copies the files.   You will not be able to access the table on the joiner node:</p> <pre><code>mysql&gt; select * from t1;\n</code></pre> <p>The example of the output is the following:</p> <pre><code>ERROR 1812 (HY000): Tablespace is missing for table `sbtest`.`t1`.\n</code></pre> <ul> <li>SST using <code>mysqldump</code></li> </ul> <p>Works as expected.   If the file does not exist, it will be created.   Otherwise it will attempt to use the file   (if the file doesn\u2019t have the expected format, an error is returned).</p> <ul> <li>SST using Percona XtraBackup</li> </ul> <p>XtraBackup will restore the table to the same location on the joiner node.   If the target directory does not exist, it will be created.   If the target file already exists, an error will be returned,   because XtraBackup cannot clear tablespaces not in the data directory.</p>"},{"location":"manual/state_snapshot_transfer.html#other-reading","title":"Other Reading","text":"<ul> <li> <p>SST Methods for MySQL</p> </li> <li> <p>Xtrabackup SST configuration</p> </li> </ul>"},{"location":"manual/threading_model.html","title":"Percona XtraDB Cluster threading model","text":"<p>Percona XtraDB Cluster creates a set of threads to service its operations, which are not related to existing MySQL threads. There are three main groups of threads:</p>"},{"location":"manual/threading_model.html#applier-threads","title":"Applier threads","text":"<p>Applier threads apply write-sets that the node receives from other nodes. Write messages are directed through <code>gcv_recv_thread</code>.</p> <p>The number of applier threads is controlled using the <code>wsrep_slave_threads</code> variable. The default value is <code>1</code>, which means at least one wsrep applier thread exists to process the request.</p> <p>Applier threads wait for an event, and once it gets the event, it applies it using normal replica apply routine path, and relays the log info apply path with wsrep-customization. These threads are similar to replica worker threads (but not exactly the same).</p> <p>Coordination is achieved using Apply and Commit Monitor. A transaction passes through two important states: <code>APPLY</code> and <code>COMMIT</code>. Every transaction registers itself with an apply monitor, where its apply order is defined. So all transactions with apply order sequence number (<code>seqno</code>) of less than this transaction\u2019s sequence number, are applied before applying this transaction. The same is done for commit as well (<code>last_left &gt;= trx_.depends_seqno()</code>).</p>"},{"location":"manual/threading_model.html#rollback-thread","title":"Rollback thread","text":"<p>There is only one rollback thread to perform rollbacks in case of conflicts.</p> <ul> <li> <p>Transactions executed in parallel can conflict and may need to roll back.</p> </li> <li> <p>Applier transactions always take priority over local transactions.   This is natural, as applier transactions have been accepted by the cluster,   and some of the nodes may have already applied them. Local conflicting   transactions still have a window to rollback.</p> </li> </ul> <p>All the transactions that need to be rolled back are added to the rollback queue, and the rollback thread is notified. The rollback thread then iterates over the queue and performs rollback operations.</p> <p>If a transaction is active on a node, and a node receives a transaction write-set from the cluster group that conflicts with the local active transaction, then such local transactions are always treated as a victim transaction to roll back.</p> <p>Transactions can be in a commit state or an execution stage when the conflict arises. Local transactions in the execution stage are forcibly killed so that the waiting applier transaction is allowed to proceed. Local transactions in the commit stage fail with a certification error.</p>"},{"location":"manual/threading_model.html#other-threads","title":"Other threads","text":""},{"location":"manual/threading_model.html#service-thread","title":"Service thread","text":"<p>This thread is created during boot-up and used to perform auxiliary services. It has two main functions:</p> <ul> <li> <p>It releases the GCache buffer after the cached write-set is purged up to the said level.</p> </li> <li> <p>It notifies the cluster group that the respective node has committed a transaction up to this level. Each node maintains some basic status info about other nodes in the cluster. On receiving the message, the information is updated in this local metadata.</p> </li> </ul>"},{"location":"manual/threading_model.html#receiving-thread","title":"Receiving thread","text":"<p>The <code>gcs_recv_thread</code> thread is the first one to see all the messages received in a group.</p> <p>It will try to assign actions against each message it receives. It adds these messages to a central FIFO queue, which are then processed by the Applier threads. Messages can include different operations like state change, configuration update, flow-control, and so on.</p> <p>One important action is processing a write-set, which actually is applying transactions to database objects.</p>"},{"location":"manual/threading_model.html#gcomm-connection-thread","title":"Gcomm connection thread","text":"<p>The gcomm connection thread <code>GCommConn::run_fn</code> is used to co-ordinate the low-level group communication activity. Think of it as a black box meant for communication.</p>"},{"location":"manual/threading_model.html#action-based-threads","title":"Action-based threads","text":"<p>Besides the above, some threads are created on a needed basis. SST creates threads for donor and joiner (which eventually forks out a child process to host the needed SST script), IST creates receiver and async sender threads, PageStore creates a background thread for removing the files that were created.</p> <p>If the checksum is enabled and the replicated write-set is big enough, the checksum is done as part of a separate thread.</p>"},{"location":"manual/xtrabackup_sst.html","title":"Percona XtraBackup SST Configuration","text":"<p>Percona XtraBackup SST works in two stages:</p> <ul> <li> <p>First it identifies the type of data transfer based on the presence of <code>xtrabackup_ist</code> file on the joiner node.</p> </li> <li> <p>Then it starts data transfer:</p> <ul> <li> <p>In case of SST, it empties the data directory except for some files (<code>galera.cache</code>, <code>sst_in_progress</code>, <code>grastate.dat</code>) and then proceeds with SST</p> </li> <li> <p>In case of IST, it proceeds as before.</p> </li> </ul> </li> </ul> <p>Note</p> <p>As of Percona XtraDB Cluster 5.7, <code>xtrabackup-v2</code> is the only XtraBackup SST method.</p>"},{"location":"manual/xtrabackup_sst.html#sst-options","title":"SST Options","text":"<p>The following options specific to SST can be used in <code>my.cnf</code> under <code>[sst]</code>.</p> <p>Note</p> <ul> <li> <p>Non-integer options which have no default value are disabled if not set.</p> </li> <li> <p><code>:Match: Yes</code> implies that option should match on donor and joiner nodes.</p> </li> <li> <p>SST script reads <code>my.cnf</code> when it runs on either donor or joiner node, not during <code>mysqld</code> startup.</p> </li> <li> <p>SST options must be specified in the main <code>my.cnf</code> file.</p> </li> </ul>"},{"location":"manual/xtrabackup_sst.html#streamfmt","title":"streamfmt","text":"Parameter Description Values: xbstream, tar Default: xbstream Match: Yes <p>Used to specify the Percona XtraBackup streaming format. The recommended value is <code>streamfmt=xbstream</code>. Certain features are not available with <code>tar</code>, for instance: encryption, compression, parallel streaming, streaming incremental backups. For more information about the <code>xbstream</code> format, see The xbstream Binary.</p>"},{"location":"manual/xtrabackup_sst.html#transferfmt","title":"transferfmt","text":"Parameter Description Values: <code>socat</code>, <code>nc</code> Default: <code>socat</code> Match: Yes <p>Used to specify the data transfer format. The recommended value is the default <code>transferfmt=socat</code> because it allows for socket options, such as transfer buffer sizes. For more information, see socat(1).</p> <p>Note</p> <p>Using <code>transferfmt=nc</code> does not support any of the SSL-based encryption modes (values <code>2</code>, <code>3</code>, and <code>4</code> for the <code>encrypt</code> option). Only <code>encrypt=1</code> is supported.</p>"},{"location":"manual/xtrabackup_sst.html#tca","title":"tca","text":"<p>Example: tca=/etc/ssl/certs/mycert.crt</p> <p>Used to specify the full path to the certificate authority (CA) file for <code>socat</code> encryption based on OpenSSL.</p>"},{"location":"manual/xtrabackup_sst.html#tcert","title":"tcert","text":"<p>Example: tcert=/etc/ssl/certs/mycert.pem</p> <p>Used to specify the full path to the certificate file in PEM format for <code>socat</code> encryption based on OpenSSL.</p> <p>Note</p> <p>For more information about <code>tca</code> and <code>tcert</code>, see https://www.dest-unreach.org/socat/doc/socat-openssltunnel.html. The <code>tca</code> is essentially the self-signed certificate in that example, and <code>tcert</code> is the PEM file generated after concatenation of the key and the certificate generated earlier. The names of options were chosen to be compatible with <code>socat</code> parameter names as well as with MySQL\u2019s SSL authentication. For testing you can also download certificates from launchpad.</p> <p>Note</p> <p>Irrespective of what is shown in the example, you can use the same .crt and .pem files on all nodes and it will work, since there is no server-client paradigm here, but rather a cluster with homogeneous nodes.</p>"},{"location":"manual/xtrabackup_sst.html#tkey","title":"tkey","text":"<p>Example: tkey=/etc/ssl/keys/key.pem</p> <p>Used to specify the full path to the private key in PEM format for socat encryption based on OpenSSL.</p>"},{"location":"manual/xtrabackup_sst.html#encrypt","title":"encrypt","text":"Parameter Description Values: 0, 1, 2, 3 Default: 0 Match: Yes <p>Used to enable and specify SST encryption mode:</p> <ul> <li> <p>Set <code>encrypt=0</code> to disable SST encryption. This is the default value.</p> </li> <li> <p>Set <code>encrypt=1</code> to perform symmetric SST encryption based on XtraBackup.</p> </li> <li> <p>Set <code>encrypt=2</code> to perform SST encryption based on OpenSSL with <code>socat</code>.   Ensure that <code>socat</code> is built with OpenSSL: <code>socat -V | grep OPENSSL</code>.   This is recommended if your nodes are over WAN and security constraints are higher.</p> </li> <li> <p>Set <code>encrypt=3</code> to perform SST encryption based on SSL for just the key and certificate files as implemented in Galera cluster</p> </li> </ul> <p>It does not provide certificate validation.    In order to work correctly,    paths to the key and certificate files need to be specified as well,    for example:</p> <pre><code>[sst]\nencrypt=3\ntkey=/etc/mysql/key.pem\ntcert=/etc/mysql/cert.pem\n</code></pre> <ul> <li>Set <code>encrypt=4</code> for SST encryption with SSL files generated by MySQL.   This is the recommended mode.</li> </ul> <p>Considering that you have all three necessary files:</p> <pre><code>[sst]\nencrypt=4\nssl-ca=ca.pem\nssl-cert=server-cert.pem\nssl-key=server-key.pem\n</code></pre> <p>Note</p> <p>All encryption modes can only be used when <code>wsrep_sst_method</code> is set to <code>xtrabackup-v2</code> (which is the default).</p> <p>For more information, see Encrypting PXC Traffic.</p>"},{"location":"manual/xtrabackup_sst.html#encrypt-algo","title":"encrypt-algo","text":"<p>Values: AES128, AES192, AES256</p> <p>Used to specify the SST encryption algorithm. It uses the same values as the <code>--encryption</code> option for XtraBackup (see this document). The <code>encrypt-algo</code> option is considered only if <code>encrypt</code> is set to <code>1</code>.</p>"},{"location":"manual/xtrabackup_sst.html#sockopt","title":"sockopt","text":"<p>Used to specify key/value pairs of socket options, separated by commas, for example:</p> <pre><code>[sst]\nsockopt=\"retry=2,interval=3\"\n</code></pre> <p>The previous example causes socat to try to connect three times (initial attempt and two retries with a 3-second interval between attempts).</p> <p>Note</p> <p>For versions of Percona XtraDB Cluster before 5.7.17-29.20, the value must begin with a comma, for example:</p> <pre><code>[sst]\nsockopt=\",cipher=AES128\"\n</code></pre> <p>This option only applies when socat is used (<code>transferfmt=socat</code>). For more information about socket options, see socat (1).</p> <p>Note</p> <p>You can also enable SSL based compression with <code>sockopt</code>. This can be used instead of the Percona XtraBackup <code>compress</code> option.</p>"},{"location":"manual/xtrabackup_sst.html#ncsockopt","title":"ncsockopt","text":"<p>Used to specify socket options for the <code>netcat</code> transfer format (<code>transferfmt=nc</code>).</p>"},{"location":"manual/xtrabackup_sst.html#progress","title":"progress","text":"<p>Values: 1, path/to/file</p> <p>Used to specify where to write SST progress. If set to <code>1</code>, it writes to MySQL <code>stderr</code>. Alternatively, you can specify the full path to a file. If this is a FIFO, it needs to exist and be open on reader end before itself, otherwise <code>wsrep_sst_xtrabackup</code> will block indefinitely.</p> <p>Note</p> <p>Value of 0 is not valid.</p>"},{"location":"manual/xtrabackup_sst.html#rebuild","title":"rebuild","text":"Parameter Description Values: 0, 1 Default: 0 <p>Used to enable rebuilding of index on joiner node. This is independent of compaction, though compaction enables it. Rebuild of indexes may be used as an optimization.</p> <p>Note</p> <p>#1192834 affects this option.</p>"},{"location":"manual/xtrabackup_sst.html#time","title":"time","text":"Parameter Description Values: 0, 1 Default: 0 <p>Enabling this option instruments key stages of backup and restore in SST.</p>"},{"location":"manual/xtrabackup_sst.html#rlimit","title":"rlimit","text":"<p>Example: rlimit=128k</p> <p>Used to set a a ratelimit in bytes. Add a suffix (k, m, g, t) to specify units. For example, <code>128k</code> is 128 kilobytes. For more information, see pv(1).</p> <p>Note</p> <p>Rate is limited on donor node. The rationale behind this is to not allow SST to saturate the donor\u2019s regular cluster operations or to limit the rate for other purposes.</p>"},{"location":"manual/xtrabackup_sst.html#use_extra","title":"use_extra","text":"Parameter Description Values: 0, 1 Default: 0 <p>Used to force SST to use the thread pool\u2019s extra_port. Make sure that thread pool is enabled and the <code>extra_port</code> option is set in <code>my.cnf</code> before you enable this option.</p>"},{"location":"manual/xtrabackup_sst.html#cpat","title":"cpat","text":"<p>Default: <code>'.\\*\\\\.pem$\\\\|.\\*init\\\\.ok$\\\\|.\\*galera\\\\.cache$\\\\|.\\*sst_in_progress$\\\\|.\\*\\\\.sst$\\\\|.\\*gvwstate\\\\.dat$\\\\|.\\*grastate\\\\.dat$\\\\|.\\*\\\\.err$\\\\|.\\*\\\\.log$\\\\|.\\*RPM_UPGRADE_MARKER$\\\\|.\\*RPM_UPGRADE_HISTORY$'</code></p> <p>Used to define the files that need to be retained in the datadir before running SST, so that the state of the other node can be restored cleanly. For example:</p> <pre><code>[sst]\ncpat='.*galera\\.cache$\\|.*sst_in_progress$\\|.*grastate\\.dat$\\|.*\\.err$\\|.*\\.log$\\|.*RPM_UPGRADE_MARKER$\\|.*RPM_UPGRADE_HISTORY$\\|.*\\.xyz$'\n</code></pre> <p>Note</p> <p>This option can only be used when <code>wsrep_sst_method</code> is set to <code>xtrabackup-v2</code> (which is the default value).</p>"},{"location":"manual/xtrabackup_sst.html#compressor","title":"compressor","text":"Parameter Description Default: not set (disabled) Example: compressor=\u2019gzip\u2019"},{"location":"manual/xtrabackup_sst.html#decompressor","title":"decompressor","text":"Parameter Description Default: not set (disabled) Example: decompressor=\u2019gzip -dc\u2019 <p>Two previous options enable stream-based compression/decompression. When these options are set, compression/decompression is performed on stream, in contrast to performing decompression after streaming to disk, involving additional I/O. This saves a lot of I/O (up to twice less I/O on joiner node).</p> <p>You can use any compression utility which works on stream: <code>gzip</code>, <code>pigz</code> (which is recommended because it is multi-threaded), etc. Compressor has to be set on donor node and decompressor on joiner node (although you can set them vice-versa for configuration homogeneity, it won\u2019t affect that particular SST). To use XtraBackup based compression as before, set <code>compress</code> under <code>[xtrabackup]</code>. Having both enabled won\u2019t cause any failure (although you will be wasting CPU cycles).</p>"},{"location":"manual/xtrabackup_sst.html#inno-backup-opts","title":"inno-backup-opts","text":""},{"location":"manual/xtrabackup_sst.html#inno-apply-opts","title":"inno-apply-opts","text":""},{"location":"manual/xtrabackup_sst.html#inno-move-opts","title":"inno-move-opts","text":"Parameter Description Default: Empty Type: Quoted String <p>This group of options is used to pass XtraBackup options for backup, apply, and move stages. The SST script doesn\u2019t alter, tweak, or optimize these options.</p> <p>Note</p> <p>Although these options are related to XtraBackup SST, they cannot be specified in <code>my.cnf</code>, because they are for passing innobackupex options.</p>"},{"location":"manual/xtrabackup_sst.html#sst-initial-timeout","title":"sst-initial-timeout","text":"Parameter Description Default: 100 Unit: seconds <p>This option is used to configure initial timeout (in seconds) to receive the first packet via SST. This has been implemented, so that if the donor node fails somewhere in the process, the joiner node will not hang up and wait forever.</p> <p>By default, the joiner node will not wait for more than 100 seconds to get a donor node. The default should be sufficient, however, it is configurable, so you can set it appropriately for your cluster. To disable initial SST timeout, set <code>sst-initial-timeout=0</code>.</p> <p>Note</p> <p>If you are using <code>wsrep_sst_donor</code>, and you want the joiner node to strictly wait for donors listed in the variable and not fall back (that is, without a terminating comma at the end), and there is a possibility of all nodes in that variable to be unavailable, disable initial SST timeout or set it to a higher value (maximum threshold that you want the joiner node to wait). You can also disable this option (or set it to a higher value) if you believe all other nodes in the cluster can potentially become unavailable at any point in time (mostly in small clusters) or there is a high network latency or network disturbance (which can cause donor selection to take longer than 100 seconds).</p>"},{"location":"manual/xtrabackup_sst.html#sst-idle-timeout","title":"sst-idle-timeout","text":"Parameter Description Version: Introducted in <code>5.7.34-31.51</code> Default: 120 Unit: seconds <p>This option configures the time the SST operation waits on the joiner to receive more data. The size of the joiner\u2019s sst directory is checked for the amount of data received. For example, the directory has received 50MB of data. The operation checks the data size again after the 120 seconds, the default value, has elapsed. If the data size is still 50MB, this operation is aborted. If the data has increased, the operation continues.</p> <p>An example of setting the option:</p> <pre><code>[sst]\nsst-idle-timeout=0\n</code></pre>"},{"location":"manual/xtrabackup_sst.html#tmpdir","title":"tmpdir","text":"Parameter Description Version: Introducted in <code>5.7.17-29.20</code> Default: Empty Unit: /path/to/tmp/dir <p>This option specifies the location for storing the temporary file on a donor node where the transaction log is stored before streaming or copying it to a remote host.</p> <p>Note</p> <p>Starting from Percona XtraDB Cluster <code>5.7.20-29.24</code> this option can be used on joiner node also, to specify non-default location to receive temporary SST files. This location must be large enough to hold the contents of the entire database. If tmpdir is empty then default location datadir/.sst will be used.</p> <p>The <code>tmpdir</code> option can be set in the following <code>my.cnf</code> groups:</p> <ul> <li> <p><code>[sst]</code> is the primary location (others are ignored)</p> </li> <li> <p><code>[xtrabackup]</code> is the secondary location (if not specified under <code>[sst]</code>)</p> </li> <li> <p><code>[mysqld]</code> is used if it is not specified in either of the above </p> </li> </ul> <p><code>wsrep_debug</code></p> <p>Specifies whether additional debugging output for the database server error log should be enabled. Disabled by default.</p> <p>This option can be set in the following <code>my.cnf</code> groups:</p> <ul> <li> <p>Under <code>[mysqld]</code> it enables debug logging for <code>mysqld</code> and the SST script</p> </li> <li> <p>Under <code>[sst]</code> it enables debug logging for the SST script only</p> </li> </ul>"},{"location":"manual/xtrabackup_sst.html#encrypt_threads","title":"encrypt_threads","text":"Parameter Description Version: Introducted in <code>5.7.19-29.22</code> Default: <code>4</code> <p>Specifies the number of threads that XtraBackup should use for encrypting data (when <code>encrypt=1</code>). The value is passed using the <code>--encrypt-threads</code> option in XtraBackup.</p> <p>This option affects only SST with XtraBackup and should be specified under the <code>[sst]</code> group.</p>"},{"location":"manual/xtrabackup_sst.html#backup_threads","title":"backup_threads","text":"Parameter Description Version: Introducted in <code>5.7.19-29.22</code> Default: <code>4</code> <p>Specifies the number of threads that XtraBackup should use to create backups. See the <code>--parallel</code> option in XtraBackup.</p> <p>This option affects only SST with XtraBackup and should be specified under the <code>[sst]</code> group.</p>"},{"location":"manual/xtrabackup_sst.html#xtrabackup-sst-dependencies","title":"XtraBackup SST Dependencies","text":"<p>Each suppored version of Percona XtraDB Cluster is tested against a specific version of Percona XtraBackup:</p> <ul> <li> <p>Percona XtraDB Cluster 5.6 requires Percona XtraBackup 2.3</p> </li> <li> <p>Percona XtraDB Cluster 5.7 requires Percona XtraBackup 2.4</p> </li> <li> <p>Percona XtraDB Cluster 8.0 requires Percona XtraBackup 8.0</p> </li> </ul> <p>Other combinations are not guaranteed to work.</p> <p>The following are optional dependencies of Percona XtraDB Cluster introduced by <code>wsrep_sst_xtrabackup-v2</code> (except for obvious and direct dependencies):</p> <ul> <li> <p><code>qpress</code> for decompression. It is an optional dependency of Percona XtraBackup and it is available in our software repositories.</p> </li> <li> <p><code>my_print_defaults</code> to extract values from <code>my.cnf</code>. Provided by the server package.</p> </li> <li> <p><code>openbsd-netcat</code> or <code>socat</code> for transfer. <code>socat</code> is a direct dependency of Percona XtraDB Cluster and it is the default.</p> </li> <li> <p><code>xbstream</code> or <code>tar</code> for streaming. <code>xbstream</code> is the default.</p> </li> <li> <p><code>pv</code> is required for <code>progress</code> and <code>rlimit</code>.</p> </li> <li> <p><code>mkfifo</code> is required for <code>progress</code>. Provided by <code>coreutils</code>.</p> </li> <li> <p><code>mktemp</code> is required. Provided by <code>coreutils</code>.</p> </li> <li> <p><code>which</code> is required.</p> </li> </ul>"},{"location":"manual/xtrabackup_sst.html#xtrabackup-based-encryption","title":"XtraBackup-based Encryption","text":"<p>This is enabled when <code>encrypt</code> is set to <code>1</code> under <code>[sst]</code> in <code>my.cnf</code>. However, due to bug #1190335, it will also be enabled when you specify any of the following options under <code>[xtrabackup]</code> in <code>my.cnf</code>:</p> <ul> <li> <p><code>encrypt</code></p> </li> <li> <p><code>encrypt-key</code></p> </li> <li> <p><code>encrypt-key-file</code></p> </li> </ul> <p>There is no way to disable encryption from innobackupex if any of the above are in <code>my.cnf</code> under <code>[xtrabackup]</code>. For that reason, consider the following scenarios:</p> <ol> <li> <p>If you want to use XtraBackup-based encryption for SST but not otherwise, use <code>encrypt=1</code> under <code>[sst]</code> and provide the above XtraBackup encryption options under <code>[sst]</code>. Details of those options can be found here.</p> </li> <li> <p>If you want to use XtraBackup-based encryption always, use <code>encrypt=1</code> under <code>[sst]</code> and have the above XtraBackup encryption options either under <code>[sst]</code> or <code>[xtrabackup]</code>.</p> </li> <li> <p>If you don\u2019t want to use XtraBackup-based encryption for SST, but want it otherwise, use <code>encrypt=0</code> or <code>encrypt=2</code> and do NOT provide any XtraBackup encryption options under <code>[xtrabackup]</code>. You can still have them under <code>[sst]</code> though. You will need to provide those options on innobackupex command line then.</p> </li> <li> <p>If you don\u2019t want to use XtraBackup-based encryption at all (or only the OpenSSL-based for SST with <code>encrypt=2</code>), don\u2019t provide any XtraBackup encryption options in <code>my.cnf</code>.</p> <p>Note</p> <p>The <code>encrypt</code> option under <code>[sst]</code> is different from the one under <code>[xtrabackup]</code>. The former is for disabling/changing encryption mode, while the latter is to provide an encryption algorithm. To disambiguate, if you need to provide the latter under <code>[sst]</code> (for example, in cases 1 and 2 above), it should be specified as <code>encrypt-algo</code>.</p> <p>Warning</p> <p>An implication of the above is that if you specify any of the XtraBackup encryption options, and <code>encrypt=0</code> under <code>[sst]</code>, it will still be encrypted and SST will fail. Look at case 3 above for resolution.</p> <p>Warning</p> <p>It is insecure to use the <code>encrypt-key</code> option when performing an SST with xtrabackup-v2 and encrypt=1 (using <code>wsrep_sst_method='xtrabackup-v2'</code> under <code>[mysqld]</code> and <code>encrypt=1</code> under <code>[sst]</code>) since the key will appear on the command line, and will be visible via <code>ps</code>. Therefore it is strongly recommended to place the key into a file and use the <code>encrypt-key-file</code> option.</p> </li> </ol>"},{"location":"manual/xtrabackup_sst.html#memory-allocation","title":"Memory Allocation","text":"<p>The amount of memory for XtraBackup is defined by the <code>--use-memory</code> option. You can pass it using the <code>inno-apply-opts</code> option under <code>[sst]</code> as follows:</p> <pre><code>[sst]\ninno-apply-opts=\"--use-memory=500M\"\n</code></pre> <p>If it is not specified, the <code>use-memory</code> option under <code>[xtrabackup]</code> will be used:</p> <pre><code>[xtrabackup]\nuse-memory=32M\n</code></pre> <p>If neither of the above are specified, the size of the InnoDB memory buffer will be used:</p> <pre><code>[mysqld]\ninnodb_buffer_pool_size=24M\n</code></pre>"},{"location":"performance/aio_page_requests.html","title":"Multiple page asynchronous I/O requests","text":"<p>I/O unit size in InnoDB is only one page, even if doing read ahead. 16KB I/O unit size is too small for sequential reads, and much less efficient than larger I/O unit size.</p> <p>InnoDB uses Linux asynchronous I/O (<code>aio</code>) by default. By submitting multiple consecutive 16KB read requests at once, Linux internally can merge requests and reads can be done more efficiently.</p> <p>On a HDD RAID 1+0 environment, more than 1000MB/s disk reads can be achieved by submitting 64 consecutive pages requests at once, while only 160MB/s disk reads is shown by submitting single page request.</p> <p>With this feature InnoDB submits multiple page I/O requests.</p>"},{"location":"performance/aio_page_requests.html#version-specific-information","title":"Version Specific Information","text":"<p>The feauture has been ported from the Facebook MySQL patch in <code>5.7.20-18</code>.</p>"},{"location":"performance/aio_page_requests.html#status-variables","title":"Status Variables","text":""},{"location":"performance/aio_page_requests.html#innodb_buffered_aio_submitted","title":"<code>Innodb_buffered_aio_submitted</code>","text":"Option Description Data type: Numeric Scope: Global <p>This variable has been implemented in <code>5.7.20-18</code>. The variable shows the number of submitted buffered asynchronous I/O requests.</p>"},{"location":"performance/aio_page_requests.html#other-reading","title":"Other Reading","text":"<ul> <li> <p>Making full table scan 10x faster in InnoDB</p> </li> <li> <p>Bug #68659  InnoDB Linux native aio should submit more i/o requests at once</p> </li> </ul>"},{"location":"release-notes/5.7.38-31.59.html","title":"Percona XtraDB Cluster 5.7.38-31.59 (2022-06-29)","text":"<p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.38-31.59.html#release-highlights","title":"Release Highlights","text":"<p>Improvements and bug fixes for MySQL 5.7.38, provided by Oracle, and included in Percona Server for MySQL are the following:</p> <ul> <li> <p>In certain scenarios, a MySQL server connection could fail if the .ibd file for the partition was missing.</p> </li> <li> <p>A statement was not written to the slow query log if the statement contained errors and could not be parsed.</p> </li> </ul> <p>Find the complete list of bug fixes and changes in MySQL 5.7.38 Release Notes.</p>"},{"location":"release-notes/5.7.38-31.59.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3118: A fix for when, using a thread pool, a brute force abort for a metadata locking (MDL) subsystem conflict stalled.</p> </li> <li> <p>PXC-3951: Updated how sst-idle-timeout calculates disk usage. The default timeout value for the variable is 120 seconds. If the joiner node does not detect a disk usage difference in that time, the node terminates the SST. The current calculation could return the same value for 120 seconds.</p> </li> <li> <p>PXC-2367: When enabled, the event scheduler filled the error logs with a \u201cReady state reached\u201d message. The message\u2019s logging level was reduced to \u201cdebug\u201d and only logged in the error logs when wsrep_debug = 1.</p> </li> <li> <p>PXC-3961: Reduced the strictness of checks which had marked GNo=0 invalid. In Percona XtraDB Cluster, writesets are replicated to other nodes with GNo=0. The generation of seqno or GTID occurs later in the pre-commit phase. A recent version had increased the strictness of these checks which caused the GTID event from 5.6 to be considered invalid.</p> </li> </ul>"},{"location":"release-notes/5.7.38-31.59.html#useful-links","title":"Useful Links","text":"<p>The Percona XtraDB Cluster installation instructions</p> <p>The Percona XtraBackup downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>To contribute to the documentation, review the Documentation Contribution Guide</p>"},{"location":"release-notes/5.7.39-31.61.html","title":"Percona XtraDB Cluster 5.7.39-31.61 (2022-08-29)","text":"<p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and the security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.39-31.61.html#release-highlights","title":"Release Highlights","text":"<p>Percona XtraDB Cluster is based on Percona Server for MySQL. Find a complete list of improvements and bug fixes in the Percona Server for MySQL 5.7.39-42 (2022-08-15). </p> <p>The improvements and bug fixes for MySQL 5.7.39, provided by Oracle, and included in Percona Server for MySQL are the following:</p> <ul> <li>Enable the <code>performance_schema_show_processlist</code> system variable to use an alternative implementation of the <code>SHOW PROCESSLIST</code> statement. Instead of querying the thread manager and holding a global mutex, which may affect performance, this implementation queries the active thread data from the Performance Schema and does not require a mutex. </li> </ul> <p>A fresh installation of MySQL 5.7.39 or higher automatically creates the <code>processlist</code> table. This table is not automatically created during an upgrade. For an upgrade, you must create the table manually. </p> <ul> <li>The system variable, <code>myisam_repair_threads</code>, and the myisamchk <code>--parallel-recover</code> option are removed.</li> </ul> <p>Find the complete list of bug fixes and changes in the MySQL 5.7.39 Release Notes.</p> <p>Percona has added no improvements or bug fixes for this release. </p>"},{"location":"release-notes/5.7.39-31.61.html#useful-links","title":"Useful Links","text":"<p>The Percona XtraDB Cluster installation instructions</p> <p>The Percona XtraBackup downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>To contribute to the documentation, review the Documentation Contribution Guide</p>"},{"location":"release-notes/5.7.40-31.63.html","title":"Percona XtraDB Cluster 5.7.40-31.63 (2022-12-29)","text":"Release date December 29, 2022 Install instructions Install Percona XtraDB Cluster Download this version Percona XtraDB Cluster <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and the security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.40-31.63.html#release-highlights","title":"Release highlights","text":"<p>Percona XtraDB Cluster is based on Percona Server for MySQL. Find a complete list of improvements and bug fixes in the Percona Server for MySQL 5.7.40-43 (2022-11-28).</p> <p>The improvements and bug fixes for MySQL 5.7.40, provided by Oracle, and included in Percona Server for MySQL are the following:</p> <ul> <li> <p>ISO 8601 timestamps in log messages did not consider daylight saving time when --log-timestamps=SYSTEM was used.</p> </li> <li> <p>The GRANT OPTION privilege was treated as related to database operations.</p> </li> <li> <p>In specific cases, a TRUNCATE TABLE operation failed to release an acquired mutex.</p> </li> <li> <p>A descending b-tree scan raised a debug assertion failure in debug builds.</p> </li> </ul> <p>Find the full list of bug fixes and changes in the MySQL 5.7.40 Release Notes.</p>"},{"location":"release-notes/5.7.40-31.63.html#bug-fixes","title":"Bug fixes","text":"<ul> <li> <p>PXC-3821 : A fix to prevent the replication of a Performance Schema table truncation across the cluster.</p> </li> <li> <p>PXC-512 : Replication slave from Percona XtraDB Cluster can exit if <code>wsrep_forced_binlog_format</code>=ROW.</p> </li> <li> <p>PXC-4077 : Skipping transactions with an empty GTID event introduced GTID inconsistencies between PXC nodes.</p> </li> <li> <p>PXC-4087 : A replicated transaction that aborted a local transaction while that transaction executed a rollback caused a server exit.</p> </li> </ul>"},{"location":"release-notes/5.7.40-31.63.html#useful-links","title":"Useful links","text":"<p>The Percona XtraBackup GitHub location</p> <p>Contribute to the documentation</p>"},{"location":"release-notes/5.7.41-31.65.html","title":"Percona XtraDB Cluster 5.7.41-31.65 (2023-04-05)","text":"Release date April 5, 2023 Install instructions Install Percona XtraDB Cluster <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and the security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.41-31.65.html#release-highlights","title":"Release highlights","text":"<p>Percona has removed an Oracle patch for <code>mysqldump</code> that performed, at the beginning of the dump, a <code>FLUSH_TABLES_WITH_READ_LOCK</code> to get consistent <code>GTID_EXECUTED</code> because the patch required additional user privileges, even when the user does not use GTID-based replication. The following bugs based on this patch were submitted to Oracle:</p> <ul> <li> <p>MySQL 109701</p> </li> <li> <p>MySQL 109685</p> </li> </ul> <p>The Percona solution uses <code>START TRANSACTION WITH CONSISTENT SNAPSHOT</code>.</p> <p>Improvements and bug fixes provided by Oracle for MySQL 5.7.41 and included in Percona Server for MySQL are the following:</p> <ul> <li> <p>Updated the linked OpenSSL library for MySQL Server to 1.1.1s</p> </li> <li> <p>Updated the bundled zlib library to zlib 1.2.13. This zlib library version is the minimum supported.</p> </li> <li> <p>While the SQL thread handled a transaction, issuing <code>STOP SLAVE_SQL_THREAD</code> caused replication to stop immediately instead of waiting for the event group to complete before the shutdown.</p> </li> </ul> <p>Find the full list of bug fixes and changes in the MySQL 5.7.41 Release Notes.</p>"},{"location":"release-notes/5.7.41-31.65.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>PXC-2687 : A brute force abort of a stored procedure caused a write-after-free error.</li> </ul>"},{"location":"release-notes/5.7.41-31.65.html#useful-links","title":"Useful links","text":"<p>Percona Product downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/5.7.42-31.65.html","title":"Percona XtraDB Cluster 5.7.42-31.65 (2023-06-08)","text":"Release date June 08, 2023 Install instructions Install Percona XtraDB Cluster <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and the security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.42-31.65.html#release-highlights","title":"Release highlights","text":"<p>Improvements and bug fixes provided by Oracle for MySQL 5.7.42 and included in Percona Server for MySQL are the following:</p> <ul> <li>In InnoDB, online DDL operations are prevented from accessing out-of-bounds memory</li> </ul> <p>Find the full list of bug fixes and changes in the MySQL 5.7.42 Release Notes.</p>"},{"location":"release-notes/5.7.42-31.65.html#bug-fixes","title":"Bug fixes","text":"<ul> <li> <p>PXC-667 : The server exited during a BF-abort of the active HANDLER <code>&lt;table&gt;</code> OPEN AS <code>&lt;alias&gt;</code>.</p> </li> <li> <p>PXC-679 : Undetected state gap discovery causes server to hang on shutdown.</p> </li> </ul>"},{"location":"release-notes/5.7.42-31.65.html#useful-links","title":"Useful links","text":"<p>Percona Product downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/5.7.43-31.65.html","title":"Percona XtraDB Cluster 5.7.43-31.65 (2023-08-31)","text":"<p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and the security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/5.7.43-31.65.html#release-highlights","title":"Release highlights","text":"<p>The PXC-4218 bug fix requires the upgrade procedure in the Upgrading Percona XtraDB Cluster guide. Be sure to open another session and run <code>mysql_upgrade</code> as part of the process.</p> <p>Improvements and bug fixes provided by Oracle for MySQL 5.7.43 and included in Percona XtraDB Cluster are the following:</p> <ul> <li>OpenSSL 1.1.1 library has been upgraded to OpenSSL 3.0.9.</li> </ul> <p>Find the full list of bug fixes and changes in the MySQL 5.7.43 Release Notes.</p>"},{"location":"release-notes/5.7.43-31.65.html#bug-fixes","title":"Bug fixes","text":"<ul> <li> <p>PXC-4218: The output of SHOW VARIABLES LIKE \u2018wsrep_provider_options\u2019 was truncated. This bug fix requires the upgrade procedure in the Upgrading Percona XtraDB Cluster guide. Be sure to open another session and run <code>mysql_upgrade</code> as part of the process.</p> </li> <li> <p>PXC-4241: <code>Percona-XtraDB-Cluster-server-57</code> RPM package on EL9 did not obsolete <code>mariadb-connector-c-config.noarch</code>.</p> </li> </ul>"},{"location":"release-notes/5.7.43-31.65.html#useful-links","title":"Useful links","text":"<p>Install Percona XtraDB Cluster</p> <p>Percona Product downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/5.7.44-31.65.2.html","title":"Percona XtraDB Cluster 5.7.44-31.65.2 (2024-05-02)","text":"<p>This release is part of MySQL 5.7 Post-EOL Support from Percona. The fixes are available to MySQL 5.7 Post-EOL Support from Percona customers.</p> <p>We recommend upgrading to MySQL 8.0 or staying on 5.7; we\u2019ll support you.</p>"},{"location":"release-notes/5.7.44-31.65.2.html#release-information","title":"Release Information","text":"<p>Percona Server for MySQL 5.7.44-49 contains the fix for CVE-2024-20963 and a portability fix.</p>"},{"location":"release-notes/5.7.44-31.65.2.html#bug-fixes","title":"Bug fixes","text":"<ul> <li> <p>PS-9096: Fixes the following:</p> <ul> <li> <p>Bug#35764496: Running too much data through MD5() causes the server to stop. The cause was accessing invalid memory or over-allocating while computing hashes in the md5 encryption methods.</p> </li> <li> <p>Bug#35967676: Fixed a compilation failure in VS2022.</p> </li> </ul> </li> <li> <p>PS-9048: In the Debug build, assertions with OPTIMIZE table and fulltext indexes failed.</p> </li> </ul>"},{"location":"release-notes/5.7.44-31.65.2.html#common-vulnerabilities-and-exposures-and-third-party-libraries","title":"Common Vulnerabilities and Exposures and third-party libraries","text":"<p>The following Common Vulnerabilities and Exposures (CVE) records have been identified in the third-party libraries:</p> <ul> <li> <p>CVE-2023-38545</p> </li> <li> <p>CVE-2023-5363</p> </li> </ul> <p>We recommend upgrading the third-party libraries to the latest version, for example, curl v8.4.0 or OpenSSL v3.0.12.  The operating systems may port these fixes into the default versions of the libraries installed in the systems. </p> <p>For information on the curl CVE based on the operating system, see the following:</p> <ul> <li> <p>Ubuntu</p> </li> <li> <p>Debian</p> <ul> <li>Announcement email</li> </ul> </li> <li> <p>Oracle Linux</p> </li> <li> <p>Red Hat</p> </li> </ul> <p>For information on the OpenSSL CVE based on the operating system, see the following:</p> <ul> <li> <p>Ubuntu</p> </li> <li> <p>Debian</p> <ul> <li>Announcement email</li> </ul> </li> <li> <p>Oracle Linux</p> </li> <li> <p>Red Hat</p> </li> </ul> <p>important</p> <p>The binary tarballs are not shipped with the updated third-party libraries.</p>"},{"location":"release-notes/5.7.44-31.65.2.html#upgrade-third-party-libraries","title":"Upgrade third-party libraries","text":"<p>The following are generic instructions on updating these libraries using a package manager. Your environment may be different. Upgrading libraries can have unintended consequences. Consider testing the upgrade on a staging environment before upgrading production.</p>"},{"location":"release-notes/5.7.44-31.65.2.html#prepare","title":"Prepare","text":"<p>The following steps apply to either package manager: The example updates the OpenSSL library.</p> <ol> <li> <p>Create a full server backup to ensure data integrity in case of issues.</p> </li> <li> <p>Identify the library and review the installation method.</p> </li> <li> <p>Research the compatibility between the new library and your current MySQL version.</p> </li> <li> <p>Stop the server.</p> </li> </ol>"},{"location":"release-notes/5.7.44-31.65.2.html#upgrade","title":"Upgrade","text":"Distributions using the APT package managerDistributions using the YUM package manager <p>Install the update</p> <pre><code>$ sudo apt update; sudo apt install libssl-dev openssl;\n</code></pre> <pre><code>$ sudo yum update; sudo yum install openssl;\n</code></pre>"},{"location":"release-notes/5.7.44-31.65.2.html#verify","title":"Verify","text":"<p>After the upgrade, do the following:</p> <ol> <li> <p>Restart the server to ensure that the library is loaded correctly.</p> <pre><code>$ sudo systemctl restart mysql\n</code></pre> </li> <li> <p>Connect to the server and verify the update with either <code>SHOW PLUGINS;</code> or <code>SHOW VARIABLES LIKE '%library_name%';</code>.</p> </li> <li> <p>Test the library functionality by running scripts or applications that rely on the upgraded library.</p> </li> </ol>"},{"location":"release-notes/5.7.44-31.65.2.html#troubleshoot","title":"Troubleshoot","text":"<p>If you find issues:</p> <ul> <li> <p>Check the error logs</p> </li> <li> <p>Consult the documentation for the library and online resources for any troubleshooting steps specific to this library. Check for any potential compatibility issues.</p> </li> </ul>"},{"location":"release-notes/5.7.44-31.65.2.html#useful-links","title":"Useful links","text":"<p>Install Percona XtraDB Cluster</p> <p>The Percona XtraBackup GitHub repository</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/5.7.44-31.65.3.html","title":"Percona XtraDB Cluster 5.7.44-31.65.3 (2024-07-23)","text":"<p>This release is part of MySQL 5.7 Post-EOL Support from Percona. The fixes are available to MySQL 5.7 Post-EOL Support from Percona customers.</p> <p>We recommend upgrading to MySQL 8.0 or staying on 5.7; we\u2019ll support you.</p>"},{"location":"release-notes/5.7.44-31.65.3.html#release-information","title":"Release Information","text":"<p>Percona XtraDB Cluster 5.7.44-31.65.3 contains the following fixes and addresses two third-party CVEs.</p>"},{"location":"release-notes/5.7.44-31.65.3.html#bug-fixes","title":"Bug fixes","text":"<ul> <li> <p>Bug#36248967: <code>mysqldump</code> sometimes failed to identify the version number correctly.</p> </li> <li> <p>Bug#35904044: The server sometimes sent incorrect metadata to the client for specific queries.</p> </li> <li> <p>Bug#35846221: An error occurred because the <code>Item_func_make_set::fix_after_pullout()</code> function was missing. This makes the <code>MAKE_SET</code> function appear constant (const), causing it to be evaluated too early during the process (resolving). We fixed this by implementing the missing <code>fix_after_pullout()</code> function.</p> </li> <li> <p>Bug#35854362: Queries that used a group by loose index scan sometimes returned inaccurate results.</p> </li> <li> <p>Bug#36093405: Implemented better management of GTID sets in Group Replication.</p> </li> <li> <p>Bug#35277407: Transactions stopped unexpectedly. This bug occurred when the system encountered an incorrect value stored in the <code>trx-&gt;in_innodb</code> variable.</p> </li> <li> <p>Bug#36317795: Ensured that calling the <code>plugin-&gt;deinit</code> function resulted in the same behavior for all plugins. All plugins follow a consistent process when being unloaded or shut down.</p> </li> <li> <p>Bug#36343647: Addressed buffer handling during the tablespace deletion process. This issue could have caused the program to halt with an assertion failure in the past.</p> </li> <li> <p>Bug#34929814: The Full-Text Search (FTS) system encountered issues maintaining consistency when multiple operations happened simultaneously (concurrent scenarios).</p> </li> <li> <p>PS-9092: A high rate of page splits and merges in the past caused data inconsistencies.</p> </li> <li> <p>PS-9132: After an unexpected server exit, persistent information about executed Global Transaction Identifiers (GTIDs) was lost during the <code>Gtid_state::save</code> operation.</p> </li> </ul>"},{"location":"release-notes/5.7.44-31.65.3.html#third-party-fixes","title":"Third-party fixes","text":"<p>The following Common Vulnerabilities and Exposures (CVE) records have been identified in third-party libraries:</p> CVE Affected versions CVE-2023-6129 OpenSSL versions 1.1.1 and 1.0.2 do not have this issue. If using OpenSSL 3.x.y, upgrade to 3.0.13, 3.1.5, or 3.2.1. CVE-2024-0853 Version 8.5.0 is affected. Other versions are not. <p>We recommend that you upgrade third-party libraries to the latest version. </p> <p>The operating system may port these fixes into the default version of the libraries installed in the systems.</p>"},{"location":"release-notes/5.7.44-31.65.3.html#useful-links","title":"Useful links","text":"<p>Install Percona XtraDB Cluster</p> <p>Percona XtraDB Cluster GitHub repository</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/5.7.44-31.65.html","title":"Percona XtraDB Cluster 5.7.44-31.65 (2023-12-26)","text":"<p>Important</p> <p>Percona XtraDB Cluster 5.7.44-31.65 is the final release of the Percona XtraDB Cluster 5.7 series.</p> <p>Do you need help upgrading to MySQL 8.0? Do you need to stay on MySQL 5.7 a bit longer? We will support you either way.</p> <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment.</p>"},{"location":"release-notes/5.7.44-31.65.html#release-highlights","title":"Release highlights","text":"<p>Percona XtraDB Cluster implements telemetry that fills the gaps in our understanding of how you use XtraDB Cluster to improve our products. Participation in the anonymous program is optional. You can opt-out if you prefer not to share this information. Find more details in the Telemetry on Percona XtraDB Cluster document.</p> <p>Improvements and bug fixes provided by Oracle for MySQL 5.7.44 and included in the Percona XtraDB Cluster are the following:</p> <ul> <li> <p>Upgraded the linked Open SSL library to OpenSSL 3.0.10</p> </li> <li> <p>Removed the printed query string limit to display the characters for a detected deadlock section of the engine status log</p> </li> </ul> <p>Find the complete list of additions or bug fixes in the MySQL 5.7.44 Release Notes.</p>"},{"location":"release-notes/5.7.44-31.65.html#useful-links","title":"Useful links","text":"<p>Install Percona XtraDB Cluster</p> <p>Percona Product downloads</p> <p>The Percona XtraBackup GitHub repository</p> <p>Contribute to the documentation</p> <p>For training, contact Percona Training - Start learning now</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.11-4beta-25.14.2.html","title":"Percona XtraDB Cluster 5.7.11-4beta-25.14.2","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.11-4beta-25.14.2 on June 9, 2016. Binaries are available from downloads area or from our software repositories.</p> <p>Note</p> <p>This release is available only from the testing repository. It is not meant for upgrade from Percona XtraDB Cluster 5.6 and earlier versions. Only fresh installation is supported.</p> <p>Percona XtraDB Cluster 5.7.11-4beta-25.14.2 is based on the following:</p> <ul> <li> <p>Percona Server 5.7.11-4</p> </li> <li> <p>Galera Replicator 3.14.2</p> </li> </ul> <p>This is the first beta release in the Percona XtraDB Cluster 5.7 series.   It includes all changes from upstream releases   and the following changes:</p> <ul> <li> <p>Percona XtraDB Cluster 5.7 does not include <code>wsrep_sst_xtrabackup</code>.   It has been replace by <code>wsrep_sst_xtrabackup_v2</code>.</p> </li> <li> <p>The <code>wsrep_mysql_replication_bundle</code> variable has been removed.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.12-5rc1-26.16.html","title":"Percona XtraDB Cluster 5.7.12-5rc1-26.16","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.12-5rc1-26.16 on August 9, 2016. Binaries are available from the downloads area or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.12-5rc1-26.16 is based on the following:</p> <ul> <li> <p>Percona Server 5.7.12</p> </li> <li> <p>Galera Replicator 3.16</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.12-5rc1-26.16.html#new-features","title":"New Features","text":"<ul> <li> <p>PXC Strict Mode:   Use the <code>pxc_strict_mode</code> variable in the configuration file   or the <code>--pxc-strict-mode</code> option during <code>mysqld</code> startup.   For more information, see PXC Strict Mode.</p> </li> <li> <p>Galera instruments exposed in Performance Schema:   This includes mutexes, condition variables, file instances, and threads.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.12-5rc1-26.16.html#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>Fixed error messages.</p> </li> <li> <p>Fixed the failure of SST via <code>mysqldump</code> with <code>gtid_mode=ON</code>.</p> </li> <li> <p>Added check for TOI that ensures node readiness to process DDL+DML before starting the execution.</p> </li> <li> <p>Removed protection against repeated calls of <code>wsrep-&gt;pause()</code> on the same node to allow parallel RSU operation.</p> </li> <li> <p>Changed <code>wsrep_row_upd_check_foreign_constraints</code> to ensure that <code>fk-reference-table</code> is open before marking it open.</p> </li> <li> <p>Fixed error when running <code>SHOW STATUS</code> during group state update.</p> </li> <li> <p>Corrected the return code of <code>sst_flush_tables()</code> function to return a non-negative error code and thus pass assertion.</p> </li> <li> <p>Fixed memory leak and stale pointer due to stats not freeing when toggling the <code>wsrep_provider</code> variable.</p> </li> <li> <p>Fixed failure of <code>ROLLBACK</code> to register <code>wsrep_handler</code></p> </li> <li> <p>Fixed failure of symmetric encryption during SST.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.12-5rc1-26.16.html#other-changes","title":"Other Changes","text":"<ul> <li> <p>Added support for sending the keyring when performing encrypted SST. For more information, see Encrypting PXC Traffic.</p> </li> <li> <p>Changed the code of <code>THD_PROC_INFO</code> to reflect what the thread is currently doing.</p> </li> <li> <p>Using XtraBackup as the SST method now requires Percona XtraBackup 2.4.4 or later.</p> </li> <li> <p>Improved rollback process to ensure that when a transaction is rolled back, any statements open by the transaction are also rolled back.</p> </li> <li> <p>Removed the <code>sst_special_dirs</code> variable.</p> </li> <li> <p>Disabled switching of <code>slave_preserve_commit_order</code> to <code>ON</code> when running PXC in cluster mode, as it conflicts with existing multi-master commit ordering resolution algorithm in Galera.</p> </li> <li> <p>Changed the default <code>my.cnf</code> configuration.</p> </li> <li> <p>Other low-level fixes and improvements for better stability.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.14-26.17.html","title":"Percona XtraDB Cluster 5.7.14-26.17","text":"<p>Note</p> <p>This release is dedicated to the memory of Federico Goncalvez,  our colleague with Percona\u2019s Uruguayan team until his tragic death on September 6, 2016.</p> <p>Fede, you are missed.</p> <p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.14-26.17 on September 29, 2016. Binaries are available from the downloads area or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.14-26.17 is the first GA release in the 5.7 series, based on the following:</p> <ul> <li> <p>Percona Server 5.7.14-8</p> </li> <li> <p>Galera Replicator 3.17</p> </li> </ul> <p>For information about the changes and new features introduced in Percona Server 5.7, see Changed in Percona Server 5.7.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.14-26.17.html#new-features","title":"New Features","text":"<p>This is a list of the most important features introduced in Percona XtraDB Cluster 5.7 compared to version 5.6</p> <ul> <li> <p>PXC Strict Mode saves your workload from experimental and unsupported features.</p> </li> <li> <p>Support for monitoring Galera Library instruments and other wsrep instruments as part of Performance Schema.</p> </li> <li> <p>Support for encrypted tablespaces in Multi-Master Topology, which enables Percona XtraDB Cluster to wire encrypted tablespace to new booting node.</p> </li> <li> <p>Compatibility with ProxySQL, including a quick configuration script.</p> </li> <li> <p>Support for monitoring Percona XtraDB Cluster nodes using Percona Monitoring and Management</p> </li> <li> <p>More stable and robust operation with MySQL and Percona Server version 5.7.14, as well as Galera 3.17 compatibility. Includes all upstream bug fixes, improved logging and more.</p> </li> <li> <p>Simplified packaging for Percona XtraDB Cluster to a single package that installs everything it needs, including the Galera library.</p> </li> <li> <p>Support for latest XtraBackup with enhanced security checks.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.14-26.17.html#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>Fixed crash when a local transaction (such as <code>EXPLAIN</code> or <code>SHOW</code>) is interrupted by a replicated transaction with higher priopiry (like <code>ALTER</code> that changes table structure and can thus affect the result of the local transaction).</p> </li> <li> <p>Fixed DONOR node getting stuck in <code>Joined</code> state after successful SST.</p> </li> <li> <p>Fixed error message when altering non-existent table with <code>pxc-strict-mode</code> enabled.</p> </li> <li> <p>Fixed path to directory in <code>percona-xtradb-cluster-shared.conf</code>.</p> </li> <li> <p>Fixed setting of <code>seqno</code> in <code>grastate.dat</code> to <code>-1</code> on clean shutdown.</p> </li> <li> <p>Fixed failure of asynchronous TOI actions (like <code>DROP</code>) for non-primary nodes.</p> </li> <li> <p>Fixed replacing of <code>my.cnf</code> during upgrade from 5.6 to 5.7.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.14-26.17.html#security-fixes","title":"Security Fixes","text":"<ul> <li> <p>CVE-2016-6662</p> </li> <li> <p>CVE-2016-6663</p> </li> <li> <p>CVE-2016-6664</p> </li> </ul> <p>For more information, see https://www.percona.com/blog/2016/09/12/database-affected-cve-2016-6662/</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.14-26.17.html#other-improvements","title":"Other Improvements","text":"<p>Added support of <code>defaults-group-suffix</code> for SST scripts.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.16-27.19.html","title":"Percona XtraDB Cluster 5.7.16-27.19","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.16-27.19 on December 15, 2016. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.16-27.19 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.16-10</p> </li> <li> <p>Galera Replication library 3.19</p> </li> <li> <p>wsrep API version 27</p> </li> </ul> <p>All Percona software is open-source and free. Details of this release can be found in the 5.7.16-27.19 milestone on Launchpad.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.16-27.19.html#deprecated","title":"Deprecated","text":"<ul> <li> <p>The following encryption modes:</p> <ul> <li> <p><code>encrypt=1</code></p> </li> <li> <p><code>encrypt=2</code></p> </li> <li> <p><code>encrypt=3</code></p> </li> </ul> </li> </ul> <p>The default is <code>encrypt=0</code> with encryption disabled.   The recommended mode now is the new <code>encrypt=4</code>,   which uses SSL files generated by MySQL.</p> <p>For more information, see Encrypting PXC Traffic.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.16-27.19.html#new-features","title":"New Features","text":"<ul> <li> <p>Added <code>encrypt=4</code> mode for SST encryption that uses SSL files generated by MySQL. Modes <code>1</code>, <code>2</code>, and <code>3</code> will soon be deprecated.</p> </li> <li> <p>ProxySQL assisted maintenance mode that enables you to take a node down without adjusting ProxySQL manually. The mode is controlled using the <code>pxc_maint_mode</code> variable, which can be set to one of the following values:</p> <ul> <li> <p><code>DISABLED</code>: This is the default state that tells ProxySQL to route traffic to the node as usual.</p> </li> <li> <p><code>SHUTDOWN</code>: This state is set automatically when you initiate node shutdown.</p> </li> <li> <p><code>MAINTENANCE</code>: You can change to this state if you need to perform maintenace on a node without shutting it down.</p> </li> </ul> </li> </ul> <p>For more information, see Assisted Maintenance Mode.</p> <ul> <li>Simplified SSL configuration for Galera/SST traffic with <code>pxc-encrypt-cluster-traffic</code> option, which auto-configures SSL encryption.</li> </ul> <p>For more information, see SSL Automatic Configuration.</p> <ul> <li>Added the <code>wsrep_flow_control_interval</code> status variable that displays the lower and upper limits of the flow control system used for the Galera receive queue.</li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.16-27.19.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>Optimized IST donor selection logic to avoid SST. Child processes are now cleaned-up and node state is resumed if SST fails.</p> </li> <li> <p>Added <code>init.ok</code> to the list of files that do not get removed during SST.</p> </li> <li> <p>Fixed error with ASIO library not acknowledging an <code>EPOLLIN</code> event when building Galera.</p> </li> <li> <p>Fixed stalling of DML workload on slave node caused by <code>FLUSH TABLE</code> executed on master.</p> </li> </ul> <p>For more information, see #1629296.</p> <ul> <li>Fixed <code>super_read_only</code> to not apply to Galera replication applier.</li> </ul> <p>For more information, see #1634295.</p> <ul> <li>Redirected <code>netcat</code> output to <code>stdout</code> to avoid it in the log.</li> </ul> <p>For more information, see #1625968.</p> <ul> <li>Enabled replication of <code>ALTER USER</code> statements.</li> </ul> <p>For more information, see #1376269.</p> <ul> <li>Changed the <code>wsrep_max_ws_rows</code> variable to ignore non-replicated write-sets generated by DML action on temporary tables (explict or implicit).</li> </ul> <p>For more information, see #1638138.</p> <ul> <li> <p>Fixed SST to fail with an error if SSL is not supported by <code>socat</code>, instead of switching to unencrypted mode.</p> </li> <li> <p>Fixed SST with SSL to auto-generate a 2048-bit <code>dhparams</code> file for versions of <code>socat</code> before 1.7.3. These older versions use 512-bit <code>dhparams</code> file by default that get rejected by newer clients with <code>dh key too small</code> error.</p> </li> <li> <p>PXC-731: Changed the <code>wsrep_cluster_name</code> variable to read-only, because changing it dynamically leads to high overhead.</p> </li> </ul> <p>For more information, see #1620439.</p> <ul> <li> <p>PXC-732: Improved error message when any of the SSL files required for SST are missing.</p> </li> <li> <p>PXC-735: Fixed SST to fail with an error when <code>netcat</code> is used (<code>transferfmt</code> set to <code>nc</code>) with SSL encryption (<code>encrypt</code> set to <code>2</code>, <code>3</code> or <code>4</code>), instead of silently switching to unencrypted mode.</p> </li> <li> <p>Fixed faulty switch case that caused cluster to stall when the <code>repl.commit_order</code> variable was set to <code>2</code> (<code>LOCAL_OOOC</code> mode that should allow out-of-order committing for local transactions).</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.17-27.20.html","title":"Percona XtraDB Cluster 5.7.17-27.20","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.17-27.20 on March 16, 2017. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.17-27.20 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.17-11</p> </li> <li> <p>Galera Replication library 3.20</p> </li> <li> <p>wsrep API version 27</p> </li> </ul> <p>All Percona software is open-source and free. Details of this release can be found in the 5.7.17-27.20 milestone on Launchpad.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.17-27.20.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>BLD-512: Fixed startup of <code>garbd</code> on Ubuntu 16.04.2 LTS (Xenial Xerus).</p> </li> <li> <p>BLD-519: Added the <code>garbd</code> debug package to the repository.</p> </li> <li> <p>BLD-569: Fixed <code>grabd</code> script to return non-zero if it fails to start.</p> </li> <li> <p>BLD-570: Fixed service script for <code>garbd</code> on Ubuntu 16.04.2 LTS (Xenial Xerus) and Ubuntu 16.10 (Yakkety Yak).</p> </li> <li> <p>BLD-593: Limited the use of <code>rm</code> and <code>chown</code> by <code>mysqld_safe</code> to avoid exploits of the CVE-2016-5617 vulnerability.   For more information, see #1660265.</p> </li> </ul> <p>Credit to Dawid Golunski (https://legalhackers.com).</p> <ul> <li> <p>BLD-610: Added version number to the dependency requirements of the full RPM package.</p> </li> <li> <p>BLD-643: Fixed <code>systemctl</code> to mark <code>mysql</code> process as inactive after it fails to start and not attempt to start it again.   For more information, see #1662292.</p> </li> <li> <p>BLD-644: Added the <code>which</code> package to Percona XtraDB Cluster dependencies on CentOS 7.   For more information, see #1661398.</p> </li> <li> <p>BLD-645: Fixed <code>mysqld_safe</code> to support options with a forward slash (<code>/</code>).   For more information, see #1652838.</p> </li> <li> <p>BLD-647: Fixed <code>systemctl</code> to show correct status for <code>mysql</code> on CentOS 7.   For more information, see #1644382.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.17-29.20.html","title":"Percona XtraDB Cluster 5.7.17-29.20","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.17-29.20 on April 19, 2017. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.17-29.20 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.17-13</p> </li> <li> <p>Galera Replication library 3.20</p> </li> <li> <p>wsrep API version 29</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.17-29.20.html#performance-improvements","title":"Performance Improvements","text":"<p>This release was focused on performance and scaling capability with increasing workload threads. Tests show up to 10 times increase in performance.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.17-29.20.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>Improved parallelism for better scaling with multiple threads.</p> </li> <li> <p>Updated semantics for gcache page cleanup to trigger when either <code>gcache.keep_pages_size</code> or <code>gcache.keep_pages_count</code> exceeds the limit, instead of both at the same time.</p> </li> <li> <p>Improved SST and IST log messages for better readability and unification.</p> </li> <li> <p>Excluded the <code>garbd</code> node from flow control calculations.</p> </li> <li> <p>Added extra checks to verify that SSL files (certificate, certificate authority, and key) are compatible before opening connection.</p> </li> <li> <p>Added validations for <code>DISCARD TABLESPACE</code> and <code>IMPORT TABLESPACE</code> in PXC Strict Mode to prevent data inconsistency.</p> </li> <li> <p>Added support for passing the XtraBackup buffer pool size with the <code>use-memory</code> option under <code>[xtrabackup]</code> and the <code>innodb_buffer_pool_size</code> option under <code>[mysqld]</code> when the <code>--use-memory</code> option is not passed with the <code>inno-apply-opts</code> option under <code>[sst]</code>.</p> </li> <li> <p>Added the <code>wsrep_flow_control_status</code> variable to indicate if node is in flow control (paused).</p> </li> <li> <p>Fixed gcache page cleanup not triggering when limits are exceeded.</p> </li> <li> <p>PXC-766: Added the  <code>wsrep_ist_receive_status</code> variable to show progress during an IST.</p> </li> <li> <p>Allowed <code>CREATE TABLE ... AS SELECT</code> (CTAS) statements with temporary tables (<code>CREATE TEMPORARY TABLE ... AS SELECT</code>) in PXC Strict Mode.   For more information, see #1666899.</p> </li> <li> <p>PXC-782: Updated <code>xtrabackup-v2</code> script to use the <code>tmpdir</code> option (if it is set under <code>[sst]</code>, <code>[xtrabackup]</code> or <code>[mysqld]</code>, in that order).</p> </li> <li> <p>PXC-783: Improved the wsrep stage framework.</p> </li> <li> <p>PXC-784: Fixed the <code>pc.recovery</code> procedure to abort if the <code>gvwstate.dat</code> file is empty or invalid, and fall back to normal joining process.   For more information, see #1669333.</p> </li> <li> <p>PXC-794: Updated the <code>sockopt</code> option to include a comma at the beginning if it is not set by the user.</p> </li> <li> <p>PXC-795: Set <code>--parallel=4</code> as default option for <code>wsrep_sst_xtrabackup-v2</code> to run four threads with XtraBackup.</p> </li> <li> <p>PXC-797: Blocked <code>wsrep_desync</code> toggling while node is paused to avoid halting the cluster when running <code>FLUSH TABLES WITH READ LOCK</code>.    For more information, see #1370532.</p> </li> <li> <p>PXC-805: Inherited upstream fix to avoid using deprecated variables, such as <code>INFORMATION_SCHEMA.SESSION_VARIABLE</code>.   For more information, see #1676401.</p> </li> <li> <p>PXC-811: Changed default values for the following variables:</p> <ul> <li> <p><code>fc_limit</code> from <code>16</code> to <code>100</code></p> </li> <li> <p><code>send_window</code> from <code>4</code> to <code>10</code></p> </li> <li> <p><code>user_send_window</code> from <code>2</code> to <code>4</code></p> </li> </ul> </li> <li> <p>Moved wsrep settings into a separate configuration file (<code>/etc/my.cnf.d/wsrep.cnf</code>).</p> </li> <li> <p>Fixed <code>mysqladmin shutdown</code> to correctly stop the server on systems using <code>systemd</code>.</p> </li> <li> <p>Fixed several minor packaging and dependency issues.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.18-29.20.html","title":"Percona XtraDB Cluster 5.7.18-29.20","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.18-29.20 on June 2, 2017. Binaries are available from the downloads section or from our software repositories.</p> <p>Note</p> <p>Due to new package dependency, Ubuntu/Debian users should use <code>apt-get dist-upgrade</code> or <code>apt-get install percona-xtradb-cluster-57</code> to upgrade.</p> <p>Percona XtraDB Cluster 5.7.18-29.20 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.18-15</p> </li> <li> <p>Galera Replication library 3.20</p> </li> <li> <p>wsrep API version 29</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.18-29.20.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li>PXC-749: Fixed memory leak when running <code>INSERT</code> on a table without primary key defined and <code>wsrep_certify_nonPK</code> disabled (set to <code>0</code>).</li> </ul> <p>!!! note</p> <pre><code>  It is recommended to have primary keys defined on all tables for correct write set replication.\n</code></pre> <ul> <li> <p>PXC-812: Fixed SST script to leave the DONOR keyring when JOINER clears the datadir.</p> </li> <li> <p>PXC-813: Fixed SST script to use UTC time format.</p> </li> <li> <p>PXC-816: Fixed hook for caching GTID events in asynchronous replication.   For more information, see #1681831.</p> </li> <li> <p>PXC-820: Enabled querying of <code>pxc_maint_mode</code> by another client during the transition period.</p> </li> <li> <p>PXC-823: Fixed SST flow to gracefully shut down JOINER node if SST fails because DONOR leaves the cluster due to network failure. This ensures that the DONOR is then able to recover to synced state when network connectivity is restored   For more information, see #1684810.</p> </li> <li> <p>PXC-824: Fixed graceful shutdown of Percona XtraDB Cluster node to wait until applier thread finishes.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.18-29.20.html#other-improvements","title":"Other Improvements","text":"<ul> <li> <p>PXC-819: Added five new status variables to expose required values from <code>wsrep_ist_receive_status</code> and <code>wsrep_flow_control_interval</code> as numbers, rather than strings that need to be parsed:</p> <ul> <li> <p><code>wsrep_flow_control_interval_low</code></p> </li> <li> <p><code>wsrep_flow_control_interval_high</code></p> </li> <li> <p><code>wsrep_ist_receive_seqno_start</code></p> </li> <li> <p><code>wsrep_ist_receive_seqno_current</code></p> </li> <li> <p><code>wsrep_ist_receive_seqno_end</code></p> </li> </ul> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22-3.html","title":"Percona XtraDB Cluster 5.7.19-29.22-3","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.19-29.22-3 on October 27, 2017. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.19-29.22-3 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.19-17</p> </li> <li> <p>Galera Replication library 3.22</p> </li> <li> <p>wsrep API version 29</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22-3.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li>Added access checks for DDL commands to make sure they do not get replicated if they failed without proper permissions. Previously, when a user tried to perform certain DDL actions that failed locally due to lack of privileges, the command could still be replicated to other nodes, because access checks were performed after replication.</li> </ul> <p>This vulnerability is identified as CVE-2017-15365.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22.html","title":"Percona XtraDB Cluster 5.7.19-29.22","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.19-29.22 on September 22, 2017. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.19-29.22 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.19-17</p> </li> <li> <p>Galera Replication library 3.22</p> </li> <li> <p>wsrep API version 29</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22.html#upgrade-instructions","title":"Upgrade Instructions","text":"<p>After you upgrade each node to Percona XtraDB Cluster 5.7.19-29.22, run the following command on one of the nodes:</p> <pre><code>$ mysql -uroot -p &lt; /usr/share/mysql/pxc_cluster_view.sql\n</code></pre> <p>Then restart all nodes, one at a time:</p> <pre><code>$ sudo service mysql restart\n</code></pre>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22.html#new-features","title":"New Features","text":"<ul> <li>Introduced the <code>pxc_cluster_view</code> table to get a unified view of the cluster.   This table is exposed through the performance schema.</li> </ul> <pre><code>mysql&gt; select * from pxc_cluster_view;\n-----------------------------------------------------------------------------\nHOST_NAME  UUID                                  STATUS  LOCAL_INDEX  SEGMENT\n-----------------------------------------------------------------------------\nn1         b25bfd59-93ad-11e7-99c7-7b26c63037a2  DONOR   0            0\nn2         be7eae92-93ad-11e7-88d8-92f8234d6ce2  JOINER  1            0\n-----------------------------------------------------------------------------\n2 rows in set (0.01 sec)\n</code></pre> <ul> <li> <p>PXC-803: Added support for new features in Percona XtraBackup 2.4.7:</p> <ul> <li> <p><code>wsrep_debug</code> enables debug logging</p> </li> <li> <p><code>encrypt_threads</code> specifies the number of threads that XtraBackup should use for encrypting data (when <code>encrypt=1</code>). This value is passed using the <code>--encrypt-threads</code> option in XtraBackup.</p> </li> <li> <p><code>backup_threads</code> specifies the number of threads that XtraBackup should use to create backups. See the <code>--parallel</code> option in XtraBackup.</p> </li> </ul> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22.html#improvements","title":"Improvements","text":"<ul> <li> <p>PXC-835: Limited <code>wsrep_node_name</code> to 64 bytes.</p> </li> <li> <p>PXC-846: Improved logging to report reason of IST failure.</p> </li> <li> <p>PXC-851: Added version compatibility check during SST with XtraBackup:</p> <ul> <li> <p>If donor is 5.6 and joiner is 5.7:   A warning is printed to perform <code>mysql_upgrade</code>.</p> </li> <li> <p>If donor is 5.7 and joiner is 5.6:   An error is printed and SST is rejected.</p> </li> </ul> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.19-29.22.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-825: Fixed script for SST with XtraBackup (<code>wsrep_sst_xtrabackup-v2</code>) to include the <code>--defaults-group-suffix</code> when logging to syslog.   For more information, see #1559498.</p> </li> <li> <p>PXC-826: Fixed multi-source replication to PXC node slave.   For more information, see #1676464.</p> </li> <li> <p>PXC-827: Fixed handling of different binlog names between donor and joiner nodes when GTID is enabled.   For more information, see #1690398.</p> </li> <li> <p>PXC-830: Rejected the <code>RESET MASTER</code> operation when wsrep provider is enabled and <code>gtid_mode</code> is set to <code>ON</code>.   For more information, see #1249284.</p> </li> <li> <p>PXC-833: Fixed connection failure handling during SST by making the donor retry connection to joiner every second for a maximum of 30 retries.   For more information, see #1696273.</p> </li> <li> <p>PXC-839: Fixed GTID inconsistency when setting <code>gtid_next</code>.</p> </li> <li> <p>PXC-840: Fixed typo in alias for <code>systemd</code> configuration.</p> </li> <li> <p>PXC-841: Added check to avoid replication of DDL if <code>sql_log_bin</code> is disabled.   For more information, see #1706820.</p> </li> <li> <p>PXC-842: Fixed deadlocks during Load Data Infile (LDI) with <code>log-bin</code> disabled by ensuring that a new transaction (of 10 000 rows) starts only after the previous one is committed by both wsrep and InnoDB.   For more information, see #1706514.</p> </li> <li> <p>PXC-843: Fixed situation where the joiner hangs after SST has failed by dropping all transactions in the receive queue.   For more information, see #1707633.</p> </li> <li> <p>PXC-853: Fixed cluster recovery by enabling <code>wsrep_ready</code> whenever nodes become PRIMARY.</p> </li> <li> <p>PXC-862: Fixed script for SST with XtraBackup (<code>wsrep_sst_xtrabackup-v2</code>) to use the <code>ssl-dhparams</code> value from the configuration file.</p> </li> </ul> <p>!!! note</p> <pre><code>  As part of fix for [PXC-827](https://jira.percona.com/browse/PXC-827),\n  version communication was added to the SST protocol.\n  As a result, newer version of PXC (as of 5.7.19 and later)\n  cannot act as donor when joining an older version PXC node (prior to 5.7.19).\n  It will work fine vice versa:\n  old node can act as donor when joining nodes with new version.\n</code></pre>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.20-29.24.html","title":"Percona XtraDB Cluster 5.7.20-29.24","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.20-29.24 on January 26, 2018. Binaries are available from the downloads section or from our software repositories.</p> <p>Note</p> <p>Due to new package dependency, Ubuntu/Debian users should use <code>apt-get dist-upgrade</code>, <code>apt upgrade</code>, or <code>apt-get install percona-xtradb-cluster-57</code> to upgrade.</p> <p>Percona XtraDB Cluster 5.7.20-29.24 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.20-18</p> </li> <li> <p>Galera Replication library 3.22</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.20</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.20-29.24.html#new-features","title":"NEW FEATURES:","text":"<ul> <li> <p>Ubuntu 17.10 Artful Aardvark is now supported.</p> </li> <li> <p>PXC-737: freezing gcache purge was implemented to facilitate node joining through IST, avoiding time consuming SST process.</p> </li> <li> <p>PXC-822: a usability improvement was made to timeout error messages, the name of the configuration variable which caused the timeout was added to the message.</p> </li> <li> <p>PXC-866: a new variable <code>wsrep_last_applied</code>, in addition to <code>wsrep_last_committed</code> one, was introduced to clearly separate last committed and last applied transaction numbers.</p> </li> <li> <p>PXC-868: on the Joiner, during SST, <code>tmpdir</code> variable under <code>[sst]</code> section can be used to specify temporary SST files storage different from the default <code>datadir/.sst</code> one.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.20-29.24.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-889: fixed an issue where a node with an invalid value for <code>wsrep_provider</code> was allowed to start up and operate in standalone mode, which could lead to data inconsistency. The node will now abort in this case. Bug fixed #1728774</p> </li> <li> <p>PXC-806: fixed an abort caused by an early read of the <code>query_id</code>, ensuring valid  ids are assigned to subsequent transactions.</p> </li> <li> <p>PXC-850: ensured that a node, because of data inconsistency, isolates itself before leaving the cluster, thus allowing pending nodes to re-evaluate the quorum. Bug fixed #1704404</p> </li> <li> <p>PXC-867: <code>wsrep_sst_rsync</code> script was overwriting <code>wsrep_debug</code> configuration setting making it not to be taken into account.</p> </li> <li> <p>PXC-873: fixed formatting issue in the error message appearing when SST is not possible due to a timeout. Bug fixed #1720094</p> </li> <li> <p>PXC-874: PXC acting as async slave reported unhandled transaction errors, namely \u201cRolling back unfinished transaction\u201d.</p> </li> <li> <p>PXC-875: fixed an issue where toggling <code>wsrep_provider</code> off and on failed to reset some internal variables and resulted in PXC logging an \u201cUnsupported protocol downgrade\u201d warning. Bug fixed #1379204</p> </li> <li> <p>PXC-877: fixed PXC hang caused by an internal deadlock.</p> </li> <li> <p>PXC-878: thread failed to mark exit from the InnoDB server concurrency and therefore never got un-register in InnoDB concurrency system.</p> </li> <li> <p>PXC-879: fixed a bug where a <code>LOAD DATA</code> command used with GTIDs was executed on one node, but the other nodes would receive less rows than the first one. Bug fixed #1741818</p> </li> <li> <p>PXC-880: insert to table without primary key was possible with insertable view if <code>pxc_strict_mode</code> variable was set to ENFORCING. Bug fixed #1722493</p> </li> <li> <p>PXC-883: fixed <code>ROLLBACK TO SAVEPOINT</code> incorrect operation on slaves by avoiding useless wsrep plugin register for a savepoint rollback. Bug fixed #1700593</p> </li> <li> <p>PXC-885: fixed IST hang when <code>keyring_file_data</code> is set. Bug fixed #1728688</p> </li> <li> <p>PXC-887: gcache page files were unnecessarily created due to an error in projecting gcache free size when configured to recover on restart.</p> </li> <li> <p>PXC-895: fixed transaction loss after recovery by avoiding interruption of the binlog recovery based on wsrep saved position. Bug fixed 1734113</p> </li> <li> <p>PXC-897: fixed empty <code>gtid_executed</code> variable after recovering the position of a node with <code>--wsrep_recover</code>.</p> </li> <li> <p>PXC-906: fixed certification failure in the case of a node restarting at the same time when frequent <code>TRUNCATE TABLE</code> commands and DML writes occur simultaneously on other nodes. Bug fixed #1737731</p> </li> <li> <p>PXC-909: qpress package was turned into a dependency from suggested/recommended one on Debian 9.</p> </li> <li> <p>PXC-903 and PXC-910: init.d/systemctl scripts on Debian 9 were updated to avoid starting wsrep-recover if there was no crash, and to fix an infinite loop at mysqladmin ping fail because of nonexistent ping user.</p> </li> <li> <p>PXC-915: suppressing DDL/TOI replication in case of <code>sql_log_bin</code> zero value didn\u2019t work when DDL statement was modifying an existing table, resulting in an error.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.21-29.26.html","title":"Percona XtraDB Cluster 5.7.21-29.26","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.21-29.26 on March 02, 2018. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.20-29.24 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.21</p> </li> <li> <p>Galera Replication library 3.23</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.21</p> </li> </ul> <p>Starting from now, Percona XtraDB Cluster issue tracking system was moved from launchpad to JIRA. All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.21-29.26.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-2039: Node consistency was compromised for <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code> workload because the regression introduced in Percona XtraDB Cluster <code>5.7.17-29.20</code> made it possible to abort local transactions without further re-evaluation in case of a lock conflict.</p> </li> <li> <p>PXC-2054 Redo optimized DDL operations (like sorted index build) were not blocked in case of a running backup process, leading to the SST fail. To fix this, <code>--lock-ddl</code> option blocks now all DDL during the xtrabackup backup stage.</p> </li> <li> <p>General code improvement was made in the GTID event handling, when events are captured as a part of the slave replication and appended to the galera replicated write-set. This fixed PXC-2041 (starting async slave on a single node Percona XtraDB Cluster led to a crash) and PXC-2058 (binlog-based master-slave replication broke the cluster) caused by the incorrect handling in the GTID append logic.</p> </li> <li> <p>An issue caused by noncoincidence between the order of recovered transaction and the global seqno assigned to the transaction was fixed ensuring that the updated recovery wsrep coordinates are persisted.</p> </li> <li> <p>PXC-904: Replication filters were not working with account management statements like <code>CREATE USER</code> in case of galera replication; as a result such commands were blocked by the replication filters on async slave nodes but not on galera ones.</p> </li> <li> <p>PXC-2043: SST script was trying to use <code>pv</code> (the pipe viewer) for <code>progress</code> and <code>rlimit</code> options even on nodes with no <code>pv</code> installed, resulting in SST fail instead of just ignoring these options for inappropriate nodes.</p> </li> <li> <p>PXC-911: When node\u2019s own IP address was defined in the <code>wsrep_cluster_address</code> variable, the node was receiving \u201cno messages seen in\u201d warnings from it\u2019s own IP address in the info log.</p> </li> </ul> <p>This release also contains fixes for the following CVE issues: CVE-2018-2565, CVE-2018-2573, CVE-2018-2576, CVE-2018-2583, CVE-2018-2586, CVE-2018-2590, CVE-2018-2612, CVE-2018-2600, CVE-2018-2622, CVE-2018-2640, CVE-2018-2645, CVE-2018-2646, CVE-2018-2647, CVE-2018-2665, CVE-2018-2667, CVE-2018-2668, CVE-2018-2696, CVE-2018-2703, CVE-2017-3737.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.22-29.26.html","title":"Percona XtraDB Cluster 5.7.22-29.26","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.22-29.26 on June 29, 2018. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.22-29.26 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.22</p> </li> <li> <p>Galera Replication library 3.23</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.21</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.22-29.26.html#deprecated","title":"Deprecated","text":"<p>The following variables are deprecated starting from this release:</p> <ul> <li> <p><code>wsrep-force-binlog-format</code></p> </li> <li> <p><code>wsrep_sst_method</code> = <code>mysqldump</code></p> </li> </ul> <p>As long as the use of <code>binlog_format=ROW</code> is enforced in 5.7, <code>wsrep_forced_binlog_format</code> variable is much less significant. The same is related to <code>mysqldump</code>, as <code>xtrabackup</code> is now the recommended SST method.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.22-29.26.html#new-features","title":"New features","text":"<ul> <li> <p>PXC-907: New variable <code>wsrep_RSU_commit_timeout</code> allows to configure RSU wait for active commit connection timeout (in microseconds).</p> </li> <li> <p>PXC-2111: Percona XtraDB Cluster now supports the <code>keyring_vault</code> plugin, which allows to store the master key in a vault server.</p> </li> <li> <p>Percona XtraDB Cluster 5.7.22 depends on Percona XtraBackup 2.4.12 in order to fully support vault plugin functionality.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.22-29.26.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-2127: Percona XtraDB Cluster shutdown process hung if <code>thread_handling</code> option was set to <code>pool-of-threads</code> due to a regression in <code>5.7.21</code>.</p> </li> <li> <p>PXC-2128: Duplicated auto-increment values were set for the concurrent sessions on cluster reconfiguration due to the erroneous readjustment.</p> </li> <li> <p>PXC-2059: Error message about the necessity of the <code>SUPER</code> privilege appearing in case of the <code>CREATE TRIGGER</code> statements fail due to enabled WSREP was made more clear.</p> </li> <li> <p>PXC-2061: Wrong values could be read, depending on timing, when read causality was enforced with <code>wsrep_sync_wait=1</code>, because of waiting on the commit monitor to be flushed instead of waiting on the apply monitor.</p> </li> <li> <p>PXC-2073: <code>CREATE TABLE AS SELECT</code> statement was not replicated in case if result set was empty.</p> </li> <li> <p>PXC-2087: Cluster was entering the deadlock state if table had an unique key and <code>INSERT ... ON DUPLICATE KEY UPDATE</code> statement was executed.</p> </li> <li> <p>PXC-2091: Check for the maximum number of rows, that can be replicated as a part of a single transaction because of the Galera limit, was enforced even when replication was disabled with <code>wsrep_on=OFF</code>.</p> </li> <li> <p>PXC-2103: Interruption of the local running transaction in a <code>COMMIT</code> state by a replicated background transaction while waiting for the binlog backup protection caused the commit fail and, eventually, an assert in Galera.</p> </li> <li> <p>PXC-2130: Percona XtraDB Cluster failed to build with Python 3.</p> </li> <li> <p>PXC-2142: Replacing Percona Server with Percona XtraDB Cluster on CentOS 7 with the <code>yum swap</code> command produced a broken symlink in place of the <code>/etc/my.cnf</code> configuration file.</p> </li> <li> <p>PXC-2154: rsync SST is now aborted with error message if used on node with <code>keyring_vault</code> plugin configured, because it doesn\u2019t support <code>keyring_vault</code>. Also Percona doesn\u2019t recommend using rsync-based SST for data-at-rest encryption with keyring.</p> </li> <li> <p>PXB-1544: <code>xtrabackup --copy-back</code> didn\u2019t read which encryption plugin to use from <code>plugin-load</code> setting of the <code>my.cnf</code> configuration file.</p> </li> <li> <p>PXB-1540: Meeting a zero sized keyring file, Percona XtraBackup was removing and immediately recreating it, and this could affect external software noticing the file had undergo some manipulations.</p> </li> </ul> <p>Other bugs fixed: PXC-2072 \u201cflush table  for export should be blocked with mode=ENFORCING\u201d."},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.23-31.31.2.html","title":"Percona XtraDB Cluster 5.7.23-31.31.2","text":"<p>To resolve a critical regression, Percona announces the release of Percona XtraDB Cluster 5.7.23-31.31.2 on October 2, 2018.  Binaries are available from the downloads section or from our software repositories.</p> <p>This release resolves a critical regression in the upstream wsrep library and supersedes <code>5.7.23-31.31</code>.</p> <p>Percona XtraDB Cluster 5.7.23-31.31.2 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server 5.7.23-23</p> </li> <li> <p>Galera Replication library 3.24</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.23</p> </li> </ul> <p>All Percona software is open-source and free.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.23-31.31.2.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li>#2254: A cluster conflict could cause a crash in Percona XtraDB Cluster 5.7.23 if autocommit=off.</li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.23-31.31.html","title":"Percona XtraDB Cluster 5.7.23-31.31","text":"<p>This release has been superseded by 5.7.23-31.31.2 after a critical regression was found. </p> <p>Please update to the latest release.</p> <p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.23-31.31 on September 26, 2018. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.23-31.31 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.23</p> </li> <li> <p>Galera Replication library 3.24</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.23</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.23-31.31.html#deprecated","title":"Deprecated","text":"<p>The following variables are deprecated starting from this release:</p> <ul> <li><code>wsrep_convert_lock_to_trx</code></li> </ul> <p>This variable, which defines whether locking sessions should be converted to transactions, is deprecated in Percona XtraDB Cluster 5.7.23-31.31 because it is rarely used in practice.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.23-31.31.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-1017: Memcached access to InnoDB was not replicated by Galera</p> </li> <li> <p>PXC-2164: The  script prevented SELinux from being enabled</p> </li> <li> <p>PXC-2155: <code>wsrep_sst_xtrabackup-v2</code> did not delete all folders on cleanup</p> </li> <li> <p>PXC-2160: In some cases, the MySQL version was not detected correctly with the <code>Xtrabackup-v2</code> method of .</p> </li> <li> <p>PXC-2199: When the <code>DROP TRIGGER IF EXISTS</code> statement was run for a not existing trigger, the node GTID was incremented instead of the cluster GTID.</p> </li> <li> <p>PXC-2209: The compression dictionary was not replicated in PXC.</p> </li> <li> <p>PXC-2202: In some cases, a disconnected cluster node was not shut down.</p> </li> <li> <p>PXC-2165:  could fail if either <code>wsrep_node_address</code> or <code>wsrep_sst_receive_address</code> were not specified.</p> </li> <li> <p>PXC-2213: NULL/VOID DDL transactions could commit in a wrong order.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.24-31.33.html","title":"Percona XtraDB Cluster 5.7.24-31.33","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.24-31.33 on January 4, 2019. Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.24-31.33 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.24</p> </li> <li> <p>Galera Replication library 3.25</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.24</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.24-31.33.html#deprecated","title":"Deprecated","text":"<p>The following variables are deprecated starting from this release:</p> <ul> <li> <p><code>wsrep_preordered</code> was used to turn on transparent handling of preordered replication events applied locally first before being replicated to other nodes in the cluster. It is not needed anymore due to the carried out performance fix eliminating the lag in asynchronous replication channel and cluster replication.</p> </li> <li> <p><code>innodb_disallow_writes</code> usage to make InnoDB avoid writes during was deprecated in favor of the <code>innodb_read_only</code> variable.</p> </li> <li> <p><code>wsrep_drupal_282555_workaround</code> avoided the duplicate value creation caused by buggy auto-increment logic, but the correspondent bug is already fixed.</p> </li> <li> <p>session-level variable <code>binlog_format=STATEMENT</code> was enabled only for <code>pt-table-checksum</code>, which would be addressed in following releases of the Percona Toolkit.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.24-31.33.html#fixed-bugs","title":"Fixed Bugs","text":"<ul> <li> <p>PXC-2220: Starting two instances of Percona XtraDB Cluster on the same node could cause writing transactions to a page store instead of a galera.cache ring buffer, resulting in huge memory consumption because of retaining already applied write-sets.</p> </li> <li> <p>PXC-2230: </p> </li> </ul> <p><code>gcs.fc_limit=0</code> not allowed as dynamic   setting to avoid generating flow control on every message was still possible   in <code>my.cnf</code> due to the inconsistent check.</p> <ul> <li> <p>PXC-2238: setting <code>read_only=1</code> caused race condition.</p> </li> <li> <p>PXC-1131: <code>mysqld-systemd</code> threw an error at MySQL restart in case of non-existing error-log in Centos/RHEL7.</p> </li> <li> <p>PXC-2269: being not dynamic, the <code>pxc_encrypt_cluster_traffic</code> variable was erroneously allowed to be changed by a <code>SET GLOBAL</code> statement.</p> </li> <li> <p>PXC-2275: checking <code>wsrep_node_address</code> value in the <code>wsrep_sst_common</code> command line parser caused parsing the wrong variable.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.25-31.35.html","title":"Percona XtraDB Cluster 5.7.25-31.35","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.25-31.35 on February 28, 2019.  Binaries are available from the downloads section or from our software repositories.</p> <p>This release of Percona XtraDB Cluster includes the support of Ubuntu 18.10 (Cosmic Cuttlefish). Percona XtraDB Cluster 5.7.25-31.35 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.25</p> </li> <li> <p>Galera Replication library 3.25</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.24</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.25-31.35.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>#2346: <code>mysqld</code> could crash when executing <code>mysqldump --single-transaction</code> while the binary log is disabled. This problem was also reported in #1711, #2371, #2419.</p> </li> <li> <p>#2388: In some cases, <code>DROP FUNCTION</code> with an explicit name was not replicated.</p> </li> </ul> <p>Other bugs fixed: #1711, #2371, #2419</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.26-31.37.html","title":"Percona XtraDB Cluster 5.7.26-31.37","text":"<p>Percona is glad to announce the release of Percona XtraDB Cluster 5.7.26-31.37 on June 26, 2019.  Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.26-31.37 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.26-29</p> </li> <li> <p>Galera Replication library 3.26</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.25</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.26-31.37.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>#2480: In some cases, Percona XtraDB Cluster could not replicate <code>CURRENT_USER()</code> used in the <code>ALTER</code> statement. <code>USER()</code> and <code>CURRENT_USER()</code> are no longer allowed in any <code>ALTER</code> statement since they fail when replicated.</p> </li> <li> <p>#2487: The case when a DDL or DML action was in progress from one client and the provider was updated from another client could result in a race condition.</p> </li> <li> <p>#2490: Percona XtraDB Cluster could crash when <code>binlog_space_limit</code> was set to a value other than zero during <code>wsrep_recover</code> mode.</p> </li> <li> <p>#2491: SST could fail if the donor had encrypted undo logs.</p> </li> <li> <p>#2537: Nodes could crash after an attempt to set a password using <code>mysqladmin</code></p> </li> <li> <p>#2497: The user can set the preferred donor by setting the <code>wsrep_sst_donor</code> variable. An IP address is not valid as the value of this variable. If the user still used an IP address, an error message was produced that did not provide sufficient information. The error message has been improved to suggest that the user check the value of the <code>wsrep_sst_donor</code> for an IP address.</p> </li> </ul> <p>Other bugs fixed: #2276, #2292, #2476, #2560</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.27-31.39.html","title":"Percona XtraDB Cluster 5.7.27-31.39","text":"<p>Percona is happy to announce the release of Percona XtraDB Cluster 5.7.27-31.39 on September 18, 2019.  Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.27-31.39 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.27-30</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.27</p> </li> <li> <p>Galera Replication library 3.28</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.27-31.39.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>#2432: PXC was not updating the information_schema user/client statistics properly.</p> </li> <li> <p>#2555: SST initialization delay: fixed a bug where the SST process took too long to detect if a child process was running.</p> </li> <li> <p>#2557: Fixed a crash when a node goes NON-PRIMARY and SHOW STATUS is executed.</p> </li> <li> <p>#2592: PXC restarting automatically on data inconsistency.</p> </li> <li> <p>#2605: PXC could crash when log_slow_verbosity included InnoDB.  Fixed upstream PS-5820.</p> </li> <li> <p>#2639: Fixed an issue where a SQL admin command (like OPTIMIZE) could cause a deadlock.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.28-31.41.2.html","title":"Percona XtraDB Cluster 5.7.28-31.41.2","text":"<ul> <li> <p>Date</p> <p>April 14, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul> <p>Percona XtraDB Cluster 5.7.28-31.41.2 requires Percona XtraBackup 2.4.20.</p> <p>This release fixes security vulnerability CVE-2020-10996</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.28-31.41.2.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3117: Transition key was hardcoded</p> </li> <li> <p>PXB-2142: Transition key was written to backup / stream</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.28-31.41.html","title":"Percona XtraDB Cluster 5.7.28-31.41","text":"<p>Percona is happy to announce the release of Percona XtraDB Cluster 5.7.28-31.41 on December 16, 2019.  Binaries are available from the downloads section or from our software repositories.</p> <p>Percona XtraDB Cluster 5.7.28-31.41 is now the current release, based on the following:</p> <ul> <li> <p>Percona Server for MySQL 5.7.28-31</p> </li> <li> <p>Galera/Codership WSREP API Release 5.7.28</p> </li> <li> <p>Galera Replication library 3.28</p> </li> </ul> <p>Percona XtraDB Cluster 5.7.28-31.41 requires Percona XtraBackup 2.4.17.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.28-31.41.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-2729: A cluster node could hang when trying to access a table which was being updated by another node.</p> </li> <li> <p>PXC-2704: After a row was updated with a variable-length unique key, the entire cluster could crash.</p> </li> </ul> <p>Other bugs fixed: PXC-2670</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.29-31.43.html","title":"Percona XtraDB Cluster 5.7.29-31.43","text":"<ul> <li> <p>Date</p> <p>May 8, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.29-31.43.html#improvements","title":"Improvements","text":"<ul> <li> <p>PXC-3002: The PXC mysql-systemd parameter service_startup_timeout terminates any startup process after a configurable time. Added a \u201cDisable\u201d option to the service_startup_timeout for workloads which require more time.</p> </li> <li> <p>PXC-2259: Updated the \u201cIndex of files created by PXC\u201d document with additional file names and descriptions.</p> </li> <li> <p>PXC-2197: Modified the SST Documentation to Include Package Dependencies for Percona XtraBackup (PXB).</p> </li> <li> <p>PXC-2602: Added the ability to configure xbstream options with wsrep_sst_xtrabackup.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.29-31.43.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-2954: DDL to add FK on one node fails but completes on other nodes causing inconsistency</p> </li> <li> <p>PXC-2705: Executing parallel LOAD DATA queries against the same table and same source data and the number of rows is greater then 10k, the cluster consistency was broken.</p> </li> <li> <p>PXC-2683: An issue may occur if a user set innodb_locks_unsafe_for_binlog=1. The variable is deprecated. The processing for the variable was removed.</p> </li> <li> <p>PXC-3202: In CentOS 8, the POSTUN scriptlet in an rpm package would expand into an \u201cempty string\u201d and caused an error.</p> </li> <li> <p>PXC-3190: Added to the execution of Cleanup functions to remove CREATE USER from SHOW PROCESSLIST.</p> </li> <li> <p>PXC-3076: Modified the Galera SConstruct file to remove python3 components.</p> </li> <li> <p>PXC-2969: Modified the \u201cLoad balancing with Proxy-SQL\u201d documentation to include the Criteria for Use.</p> </li> <li> <p>PXC-2904: Ensured the \u201cPercona-XtraDB-Cluster-57\u201d yum package installed the required xtrabackup version.</p> </li> <li> <p>PXC-2958: Modified the User Documentation to include wsrep_certification_rules and the cert.optimistic_pa option.</p> </li> <li> <p>PXC-2912: Modified the netcat Configuration to Include the -N option, which is required by more recent versions of netcat. The option allows the shutdown of the network socket after the input EOF.</p> </li> <li> <p>PXC-2974: Modified Percona XtraDB Cluster (PXC) Dockerfile to Integrate the Galera WSREP recovery process.</p> </li> <li> <p>PS-6979: Modify the processing to call clean up functions to remove CREATE USER statement from the processlist after the statement has completed (Upstream #99200)</p> </li> <li> <p>PXC-2684: Modified error handling to prevent deadlock when stored procedure was aborted.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.30-31.43.html","title":"Percona XtraDB Cluster 5.7.30-31.43","text":"<ul> <li> <p>Date</p> <p>June 25, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.30-31.43.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3170: Backport PXC-3154 - Thread pooling could hang on shutdown</p> </li> <li> <p>PXC-3165: Allow COM_FIELD_LIST to be executed when WSREP was not ready</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31-45.3.html","title":"Percona XtraDB Cluster 5.7.31-31.45.3","text":"<ul> <li> <p>Date</p> <p>October 22, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31-45.3.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PXC-3456: Allow specific characters in SST method names and SST request data.</li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31.45.2.html","title":"Percona XtraDB Cluster 5.7.31-31.45.2","text":"<ul> <li> <p>Date</p> <p>October 9, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul> <p>This release fixes the security vulnerability CVE-2020-15180</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31.45.html","title":"Percona XtraDB Cluster 5.7.31-31.45","text":"<ul> <li> <p>Date</p> <p>September 24, 2020</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31.45.html#improvements","title":"Improvements","text":"<ul> <li>PXC-2187: Enhance SST documentation to include a warning about the use of command-line parameters</li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.31-31.45.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3352: Modify wsrep_row_upd_check_foreign_constraints() to remove the check for DELETE</p> </li> <li> <p>PXC-3243: Modify the BF-abort process to propagate and abort and retry the Stored Procedure instead of the statement</p> </li> <li> <p>PXC-3371: Fix Directory creation in build-binary.sh</p> </li> <li> <p>PXC-3370: Provide binary tarball with shared libs and glibc suffix &amp; minimal tarballs</p> </li> <li> <p>PXC-3281: Modify config to add default socket location</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.32-31.47.html","title":"Percona XtraDB Cluster 5.7.32-31.47","text":"<ul> <li> <p>Date</p> <p>January 12, 2021</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.32-31.47.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3468: Resolve package conflict when installing PXC 5.7 on RHEL/CentOS8</p> </li> <li> <p>PXC-3459: Modify to pass correct data from row_ins_foreign_check_on_constraint() to wsrep_append_foreign_key()</p> </li> <li> <p>PXC-3418: Prevent DDL-DML deadlock by making in-place ALTER take shared MDL for the whole duration.</p> </li> <li> <p>PXC-2264: Update Data at Rest Encryption documentation on upgrade and compatibility issues to explain incompatibility when the donor is &lt;= 5.7.21 and joiner is &gt;= 5.7.22</p> </li> <li> <p>PXC-3501: Modify wsrep_row_upd_check_foreign_constraints() to include foreign key dependencies in the writesets for DELETE query (Thanks to user Steven Gales for reporting this issue)</p> </li> <li> <p>PXC-3442: Fix crash when log_slave_updates=ON and consistency check statement is executed</p> </li> <li> <p>PXC-3424: Fix error handling when the donor is not able to serve SST</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.33-31.49.html","title":"Percona XtraDB Cluster 5.7.33-31.49","text":"<ul> <li> <p>Date</p> <p>March 22, 2021</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul> <p>This release fixes security vulnerability CVE-2021-27928, a similar issue to CVE-2020-15180</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.33-31.49.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3536: Modify processing to not allow threads/queries to be killed if the thread is in TOI</p> </li> <li> <p>PXC-3565: Correct Performance of SELECT in PXC</p> </li> <li> <p>PXC-3508: Explicitly set the dhparam option with socat to bypass the use of the old certs</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.34-31.51.html","title":"Percona XtraDB Cluster 5.7.34-31.51","text":"<ul> <li> <p>Date</p> <p>July 19, 2021</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.34-31.51.html#improvements","title":"Improvements","text":"<ul> <li> <p>PXC-3634: Erroneous documentation on bootstrapping the XtraDB Cluster (Thanks to user Craig Fisher for reporting this issue)</p> </li> <li> <p>PXC-3092: Log a warning at startup if a keyring is specified, but the cluster traffic encryption is turned off</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.34-31.51.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3679: SST fails after the update of socat to \u20181.7.4.0\u2019</p> </li> <li> <p>PXC-3611: \u201cEncryption can\u2019t find master key\u201d after SST when keyring_file is used if the keyring.backup file exists</p> </li> <li> <p>PXC-3608: Attempting to read a FK may cause a memory access violation and server exit.</p> </li> <li> <p>PXC-2650: Lack of support for the data-at-rest encryption options are not mentioned in documentation</p> </li> <li> <p>PXC-3464: Data is not propagated with SET SESSION sql_log_bin = 0</p> </li> <li> <p>PXC-3666: Session with wsrep_on=0 blocks TOI transactions</p> </li> <li> <p>PXC-3596: Node stuck in aborting SST</p> </li> <li> <p>PXC-3226: Results from CHECK TABLE from PXC server can cause the client libraries to crash</p> </li> <li> <p>PXC-3146: Galera/SST does not look at the default data directory location for SSL certs</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.35-31.53.html","title":"Percona XtraDB Cluster 5.7.35-31.53","text":"<ul> <li> <p>Date</p> <p>November 18, 2021</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul> <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.35-31.53.html#release-highlights","title":"Release Highlights","text":"<p>The following are some of the notable fixes for MySQL 5.7.35, provided by Oracle, and included in this release:</p> <ul> <li> <p>#104373: Fixes failure of <code>OPTIMIZE TABLE</code> command writing to the binary log and replicated to replicas.</p> </li> <li> <p>#104451: Fixes which event turns on the <code>LOG_EVENT_THREAD_SPECIFIC_F</code> flag.</p> </li> </ul> <p>For more information, see the MySQL 5.7.35 Release Notes</p> <p>The following are the notable fixes for Galera Cluster, provided by Codership, and included in this release:</p> <ul> <li> <p>#381: Disables binary log purging when the <code>mysqld</code> starts with <code>--wsrep-recover</code> option.</p> </li> <li> <p>#25551: Disables tables without a primary key from the parallel applying of write sets.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.35-31.53.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3589: Documentation: Updates in Percona XtraDB Cluster Limitations that the <code>LOCK=NONE</code> clause is no longer allowed in an INPLACE ALTER TABLE statement. (Thanks to user Brendan Byrd for reporting this issue)</p> </li> <li> <p>PXC-3637: Changes the service start sequence to allow more time for mounting local or remote directories with large amounts of data. (Thanks to user Eric Gonyea for reporting this issue)</p> </li> <li> <p>PXC-3741: Fix when a network issue causes the Incremental State Transfer (IST) receiver to stall.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.36-31.55.html","title":"Percona XtraDB Cluster 5.7.36-31.55","text":"<ul> <li> <p>Date</p> <p>February 16, 2022</p> </li> <li> <p>Installation</p> <p>Installing Percona XtraDB Cluster</p> </li> </ul> <p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.36-31.55.html#release-highlights","title":"Release Highlights","text":"<p>The following list contains some of the bug fixes for MySQL 5.7.36, provided by Oracle, and included in Percona XtraDB Cluster for MySQL:</p> <ul> <li> <p>Fix for the possibility of a deadlock or failure when an undo log truncate operation is initiated after an upgrade from MySQL 5.6 to MySQL 5.7.</p> </li> <li> <p>Fix for when a parent table initiates a cascading <code>SET NULL</code> operation on the child table, the virtual column can be set to NULL instead of the value derived from the parent table.</p> </li> <li> <p>On a view, the query digest for each SELECT statement is now based on the SELECT statement and not the view definition, which was the case for earlier versions.</p> </li> </ul> <p>Find the complete list of bug fixes and changes in MySQL 5.7.36 Release Notes.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.36-31.55.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3838: Documentation - remove extra space in the Bootstrapping the first node document.</p> </li> <li> <p>PXC-3739: Fix for FLUSH TABLES \u2026 FOR EXPORT staying locked after a session ends.</p> </li> <li> <p>PXC-3766: Fix the behavior when SST always runs a version-check procedure that causes unallowed external network communication.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.37-31.57.html","title":"Percona XtraDB Cluster 5.7.37-31.57 (2022-05-18)","text":"<p>Percona XtraDB Cluster (PXC) supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.37-31.57.html#release-highlights","title":"Release Highlights","text":"<p>The following lists a number of the notable updates and fixes for MySQL 5.7.37, provided by Oracle, and included in Percona Server for MySQL:</p> <ul> <li> <p>The performance on debug builds has been improved by optimizing the buf_validate() function in the InnoDB sources.</p> </li> <li> <p>Fix for when a query using an index that differs from the primary key of the partitioned table results in excessive CPU load.</p> </li> <li> <p>Enabling <code>PAD_CHAR_TO_FULL_LENGTH</code> SQL mode on a replica server added trailing spaces to a replication channel\u2019s name in the replication metadata repository tables. Attempts to identify the channel using the padded name caused errors. The SQL mode is disabled when reading from those tables.</p> </li> </ul> <p>Find the complete list of bug fixes and changes in MySQL 5.7.37 Release Notes.</p>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.37-31.57.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PXC-3388: When the joiner failed and the donor did not abort the SST. The cluster remained in donor/desynced state.</p> </li> <li> <p>PXC-3609: The binary log status was updated when the binary log was disabled.</p> </li> <li> <p>PXC-3796: The Garbd IP was not visible in the <code>wsrep_incoming_addresses</code> status variable.</p> </li> <li> <p>PXC-3848: Issuing an <code>ALTER USER CURRENT_USER()</code> command crashed the connected cluster node.</p> </li> <li> <p>PXC-3914: Upgraded the version of socat used in the Docker image.</p> </li> </ul>"},{"location":"release-notes/Percona-XtraDB-Cluster-5.7.37-31.57.html#useful-links","title":"Useful Links","text":"<p>The Percona XtraDB Cluster installation instructions</p> <p>The Percona XtraBackup downloads</p> <p>The Percona XtraBackup GitHub location</p> <p>To contribute to the documentation, review the Documentation Contribution Guide</p>"},{"location":"release-notes/release-notes_index.html","title":"Percona XtraDB Cluster 5.7 Release notes index","text":"<ul> <li> <p>Percona XtraDB Cluster 5.7.44-31.65.3 (2024-07-23)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.44-31.65.2 (2024-05-02)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.44-31.65 (2023-12-26)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.43-31.65 (2023-08-31)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.42-31.65 (2023-06-08)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.41-31.65 (2023-04-05)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.40-31.63 (2022-12-29)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.39-31.61 (2022-08-29)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.38-31.59 (2022-06-29)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.37-31.57 (2022-05-18)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.36-31.55 (2022-02-16)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.35-31.53 (2021-11-18)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.34-31.51 (2021-07-19)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.33-31.49 (2021-03-22)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.32-31.47 (2021-01-12)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.31-31-45.3 (2020-10-22)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.31-31.45.2 (2020-10-09)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.31-31.45 (2020-09-24)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.30-31.43 (2020-06-25)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.29-31.43 (2020-05-08)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.28-31.41.2 (2020-04-14)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.28-31.41 (2019-12-16)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.27-31.39 (2019-09-18)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.26-31.37 (2019-06-26)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.25-31.35 (2019-02-28)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.24-31.33 (2019-01-04)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.23-31.31.2 (2018-10-02)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.23-31.31 (2018-09-26)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.22-29.26 (2018-06-29)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.21-29.26 (2018-03-02)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.20-29.24 (2018-01-26)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.19-29.22-3 (2017-10-27)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.19-29.22 (2017-09-22)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.18-29.20 (2017-06-02)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.17-29.20 (2017-04-19)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.17-27.20 (2017-03-16)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.16-27.19 (2016-12-15)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.14-26.17 (2016-09-29)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.12-5rc1-26.16 (2016-08-09)</p> </li> <li> <p>Percona XtraDB Cluster 5.7.11-4beta-25.14.2 (2016-06-09)</p> </li> </ul>"},{"location":"security/index.html","title":"Security Basics","text":"<p>By default, Percona XtraDB Cluster does not provide any protection for stored data. There are several considerations to take into account for securing Percona XtraDB Cluster:</p> <ul> <li>Securing the Network</li> </ul> <p>Anyone with access to your network can connect to any Percona XtraDB Cluster node   either as a client or as another node joining the cluster.   You should consider restricting access using VPN   and filter traffic on ports used by Percona XtraDB Cluster.</p> <ul> <li>Encrypting PXC Traffic</li> </ul> <p>Unencrypted traffic can potentially be viewed   by anyone monitoring your network.   You should enable encryption for all nodes in the cluster to prevent this.</p> <ul> <li>Data-at-rest encryption</li> </ul> <p>Percona XtraDB Cluster supports tablespace encryption   to provide at-rest encryption for physical tablespace data files.</p> <p>For more information, see the following blog post:</p> <pre><code> * [MySQL Data at Rest Encryption](https://www.percona.com/blog/2016/04/08/mysql-data-at-rest-encryption/)\n</code></pre>"},{"location":"security/index.html#security-modules","title":"Security Modules","text":"<p>Most modern distributions include special security modules that control access to resources for users and applications. By default, these modules will most likely constrain communication between Percona XtraDB Cluster nodes.</p> <p>The easiest solution is to disable or remove such programs, however, this is not recommended for production environments. You should instead create necessary security policies for Percona XtraDB Cluster.</p>"},{"location":"security/index.html#selinux","title":"SELinux","text":"<p>SELinux is usually enabled by default in Red Hat Enterprise Linux and derivatives (including CentOS). During installation and configuration, you can set the mode to <code>permissive</code> by running the following command:</p> <pre><code>setenforce 0\n</code></pre> <p>Note</p> <p>This only changes the mode at runtime. To run SELinux in permissive mode after a reboot, set <code>SELINUX=permissive</code> in the <code>/etc/selinux/config</code> configuration file.</p> <p>To use SELinux with Percona XtraDB Cluster, you need to create an access policy. For more information, see SELinux and MySQL.</p>"},{"location":"security/index.html#apparmor","title":"AppArmor","text":"<p>AppArmor is included in Debian and Ubuntu. During installation and configuration, you can disable AppArmor for <code>mysqld</code>:</p> <ol> <li> <p>Create the following symbolic link:</p> <pre><code>$ sudo ln -s /etc/apparmor.d/usr /etc/apparmor.d/disable/.sbin.mysqld\n</code></pre> </li> <li> <p>Restart AppArmor:</p> <pre><code>$ sudo service apparmor restart\n</code></pre> <p>Note</p> <p>If your system uses <code>systemd</code>, run the following command instead:</p> <pre><code>$ sudo systemctl restart apparmor\n</code></pre> </li> </ol> <p>To use AppArmor with Percona XtraDB Cluster, you need to create or extend the MySQL profile. For more information, see AppArmor and MySQL.</p>"},{"location":"security/encrypt-traffic.html","title":"Encrypting PXC Traffic","text":"<p>There are two kinds of traffic in Percona XtraDB Cluster:</p> <ol> <li> <p>Client-Server traffic (the one between client applications and cluster nodes).</p> </li> <li> <p>Replication traffic, that includes SST, IST, write-set replication, and various service messages.</p> <p>Percona XtraDB Cluster supports encryption for all types of traffic. Replication traffic encryption can be configured either in automatic or in manual mode.</p> </li> </ol>"},{"location":"security/encrypt-traffic.html#encrypting-client-server-communication","title":"Encrypting Client-Server Communication","text":"<p>Percona XtraDB Cluster uses the underlying MySQL encryption mechanism to secure communication between client applications and cluster nodes.</p> <p>Specify the following settings in the <code>my.cnf</code> configuration file for each node:</p> <pre><code>[mysqld]\nssl-ca=/etc/mysql/certs/ca.pem\nssl-cert=/etc/mysql/certs/server-cert.pem\nssl-key=/etc/mysql/certs/server-key.pem\n\n[client]\nssl-ca=/etc/mysql/certs/ca.pem\nssl-cert=/etc/mysql/certs/client-cert.pem\nssl-key=/etc/mysql/certs/client-key.pem\n</code></pre> <p>After restart the node will use these files to encrypt communication with clients. MySQL clients require only the second part of the configuration to communicate with cluster nodes.</p> <p>Starting from the version 5.7, MySQL generates default key and certificate files and places them in data directory. You can either use them or generate new certificates. For generation of new certificate please refer to Generating Keys and Certificates Manually section.</p>"},{"location":"security/encrypt-traffic.html#encrypting-replication-traffic","title":"Encrypting Replication Traffic","text":"<p>Replication traffic refers to the inter-node traffic which includes SST traffic, IST traffic, and replication traffic.</p> <p>Traffic of each type is transferred via different channel, and so it is important to configure secure channels for all 3 variants to completely secure the replication traffic.</p> <p>Starting from 5.7, PXC supports a single configuration option which helps to secure complete replication traffic, and is often referred as Automatic Configuration. User can also ignore this and configure security of each channel by specifying independent parameters.</p> <p>Section below will help, covering this aspect.</p>"},{"location":"security/encrypt-traffic.html#ssl-automatic-configuration","title":"SSL Automatic Configuration","text":""},{"location":"security/encrypt-traffic.html#enabling-pxc-encrypt-cluster-traffic","title":"Enabling <code>pxc-encrypt-cluster-traffic</code>","text":"<p>Percona XtraDB Cluster includes the <code>pxc-encrypt-cluster-traffic</code> variable that enables automatic configuration of SSL encryption there-by encrypting SST, IST, and replication traffic.</p> <p>This variable is not dynamic and so cannot be changed on runtime. To enable automatic configuration of SSL encryption, set <code>pxc-encrypt-cluster-traffic=ON</code> in the the <code>[mysqld]</code> section of the <code>my.cnf</code> file, and restart the cluster (by default it is disabled there-by using non-secured channel for replication).</p> <p>Note</p> <p>Setting <code>pxc-encrypt-cluster-traffic=ON</code> has effect of applying the following settings in <code>my.cnf</code> configuration file:</p> <pre><code>[mysqld]\nwsrep_provider_options=\u201dsocket.ssl_key=server-key.pem;socket.ssl_cert=server-cert.pem;socket.ssl_ca=ca.pem\u201d\n\n[sst]\nencrypt=4\nssl-key=server-key.pem\nssl-ca=ca.pem\nssl-cert=server-cert.pem\n</code></pre> <p>For <code>wsrep_provider_options</code>, only the mentioned options are affected (<code>socket.ssl_key</code>, <code>socket,ssl_cert</code>, and <code>socket.ssl_ca</code>), the rest is not modified.</p> <p>Automatic configuration of the SSL encryption needs key and certificate files. Starting from the version 5.7, MySQL generates default key and certificate files and places them in data directory. These auto-generated files are suitable for automatic SSL configuration, but you should use the same key and certificate files on all nodes. Also you can override auto-generated files with manually created ones, as covered by the Generating Keys and Certificates Manually section.</p> <p>Necessary key and certificate files are first searched at the <code>ssl-ca</code>, <code>ssl-cert</code>, and <code>ssl-key</code> options under <code>[mysqld]</code>. If these options are not set, it then looks in the data directory for <code>ca.pem</code>, <code>server-cert.pem</code>, and <code>server-key.pem</code> files.</p> <p>Note</p> <p>The <code>[sst]</code> section is not searched.</p> <p>If all three files are found, they are used to configure encryption. If any of the files is missing, a fatal error is generated.</p>"},{"location":"security/encrypt-traffic.html#ssl-manual-configuration","title":"SSL Manual Configuration","text":"<p>If user wants to enable encryption for specific channel only or use different certificates or other mix-match, then user can opt for manual configuration. This helps to provide more flexibility to end-users.</p> <p>To enable encryption manually, the location of the required key and certificate files shoud be specified in the Percona XtraDB Cluster configuration. If you do not have the necessary files, see Generating Keys and Certificates Manually.</p> <p>Note</p> <p>Encryption settings are not dynamic. To enable it on a running cluster, you need to restart the entire cluster.</p> <p>There are three aspects of Percona XtraDB Cluster operation, where you can enable encryption:</p> <ul> <li>Encrypting SST Traffic</li> </ul> <p>This refers to SST traffic during full data copy   from one cluster node (donor) to the joining node (joiner).</p> <ul> <li> <p>Encrypting Replication Traffic</p> </li> <li> <p>Encrypting IST Traffic</p> </li> </ul> <p>This refers to all internal Percona XtraDB Cluster communication,   such as, write-set replication, IST, and various service messages.</p>"},{"location":"security/encrypt-traffic.html#encrypting-sst-traffic","title":"Encrypting SST Traffic","text":"<p>This refers to full data transfer that usually occurs when a new node (JOINER) joins the cluster and receives data from an existing node (DONOR).</p> <p>For more information, see State Snapshot Transfer.</p> <p>Note</p> <p>If <code>keyring_file</code> plugin is used, then SST encryption is mandatory: when copying encrypted data via SST, the keyring must be sent over with the files for decryption. In this case following options are to be set in <code>my.cnf</code> on all nodes:</p> <pre><code>early-plugin-load=keyring_file.so\nkeyring-file-data=/path/to/keyring/file\n</code></pre> <p>The cluster will not work if keyring configuration across nodes is different.</p> <p>The following SST methods are available: <code>xtrabackup</code>, <code>rsync</code>, and <code>mysqldump</code>.</p>"},{"location":"security/encrypt-traffic.html#xtrabackup","title":"xtrabackup","text":"<p>This is the default SST method (the <code>wsrep_sst_method</code> is set to <code>xtrabackup-v2</code>), which uses Percona XtraBackup to perform non-blocking transfer of files. For more information, see Percona XtraBackup SST Configuration.</p> <p>Encryption mode for this method is selected using the <code>encrypt</code> option:</p> <ul> <li> <p><code>encrypt=0</code> is the default value, meaning that encryption is disabled.</p> </li> <li> <p><code>encrypt=1</code>, <code>encrypt=2</code>, and <code>encrypt=3</code> have been deprecated.</p> </li> <li> <p><code>encrypt=4</code> enables encryption based on key and certificate files generated with OpenSSL.   For more information, see Generating Keys and Certificates Manually.</p> </li> </ul> <p>To enable encryption for SST using XtraBackup,   specify the location of the keys and certificate files   in the each node\u2019s configuration under <code>[sst]</code>:</p> <pre><code>[sst]\nencrypt=4\nssl-ca=/etc/mysql/certs/ca.pem\nssl-cert=/etc/mysql/certs/server-cert.pem\nssl-key=/etc/mysql/certs/server-key.pem\n</code></pre> <p>Note</p> <p>SSL clients require DH parameters to be at least 1024 bits, due to the logjam vulnerability. However, versions of <code>socat</code> earlier than 1.7.3 use 512-bit parameters. If a <code>dhparams.pem</code> file of required length is not found during SST in the data directory, it is generated with 2048 bits, which can take several minutes. To avoid this delay, create the <code>dhparams.pem</code> file manually and place it in the data directory before joining the node to the cluster:</p> <pre><code>openssl dhparam -out /path/to/datadir/dhparams.pem 2048\n</code></pre> <p>For more information, see this blog post.</p>"},{"location":"security/encrypt-traffic.html#rsync","title":"rsync","text":"<p>This SST method does not support encryption. Avoid using this method if you need to secure traffic between DONOR and JOINER nodes. If you using keyring plugin then keyring file needs to be send over from DONOR to JOINER. Avoid using this method in such cases too.</p>"},{"location":"security/encrypt-traffic.html#mysqldump","title":"mysqldump","text":"<p>This SST method dumps data from DONOR and imports it to JOINER. Encryption in this case is performed using the same certificates configured for Encrypting Client-Server Communication, because <code>mysqldump</code> connects through the database client.</p> <p>Here is how to enable encryption for SST using <code>mysqldump</code> in a running cluster:</p> <ol> <li> <p>Create a user for SST on one of the nodes:</p> <pre><code>mysql&gt; CREATE USER 'sstuser'$'%' IDENTIFIED BY PASSWORD 'sst_password';\n</code></pre> <p>Note</p> <p>This user must have the same name and password on all nodes where you want to use <code>mysqldump</code> for SST.</p> </li> <li> <p>Grant usage privileges to this user and require SSL:</p> <pre><code>mysql&gt; GRANT USAGE ON *.* TO 'sstuser' REQUIRE SSL;\n</code></pre> </li> <li> <p>To make sure that the SST user replicated across the cluster, run the following query on another node:</p> <pre><code>mysql&gt; SELECT User, Host, ssl_type FROM mysql.user WHERE User='sstuser';\n</code></pre> <p>The example of the output is the following:</p> <pre><code>+----------+------+----------+\n| User     | Host | ssl_type |\n+----------+------+----------+\n| sstuser | %    | Any      |\n+----------+------+----------+\n</code></pre> <p>Note</p> <p>If the <code>wsrep_OSU_method</code> is set to ROI, you need to manually create the SST user on each node in the cluster.</p> </li> <li> <p>Specify corresponding certificate files in both <code>[mysqld]</code> and <code>[client]</code> sections of the configuration file on each node:</p> <pre><code>[mysqld]\nssl-ca=/etc/mysql/certs/ca.pem\nssl-cert=/etc/mysql/certs/server-cert.pem\nssl-key=/etc/mysql/certs/server-key.pem\n\n[client]\nssl-ca=/etc/mysql/certs/ca.pem\nssl-cert=/etc/mysql/certs/client-cert.pem\nssl-key=/etc/mysql/certs/client-key.pem\n</code></pre> <p>For more information, see Encrypting Client-Server Communication.</p> </li> <li> <p>Also specify the SST user credentials in the <code>wsrep_sst_auth</code> variable on each node:</p> <pre><code>[mysqld]\nwsrep_sst_auth = sstuser:sst_password\n</code></pre> </li> <li> <p>Restart the cluster with the new configuration.</p> <p>If you do everything correctly, <code>mysqldump</code> will connect to DONOR with the SST user, generate a dump file, and import it to JOINER node.</p> </li> </ol>"},{"location":"security/encrypt-traffic.html#encrypting-replicationist-traffic","title":"Encrypting Replication/IST Traffic","text":"<p>Replication traffic refers to the following:</p> <ul> <li> <p>Write-set replication which is the main workload of Percona XtraDB Cluster (replicating transactions that execute on one node to all other nodes).</p> </li> <li> <p>Incremental State Transfer (IST) which is copying only missing transactions from DONOR to JOINER node.</p> </li> <li> <p>Service messages which ensure that all nodes are synchronized.</p> </li> </ul> <p>All this traffic is transferred via the same underlying communication channel (<code>gcomm</code>). Securing this channel will ensure that IST traffic, write-set replication, and service messages are encrypted. (For IST, a separate channel is configured using the same configuration parameters, so 2 sections are described together).</p> <p>To enable encryption for all these processes, define the paths to the key, certificate and certificate authority files using the following wsrep provider options:</p> <ul> <li> <p><code>socket.ssl_ca</code></p> </li> <li> <p><code>socket.ssl_cert</code></p> </li> <li> <p><code>socket.ssl_key</code></p> </li> </ul> <p>To set these options, use the <code>wsrep_provider_options</code> variable in the configuration file:</p> <pre><code>wsrep_provider_options=\"socket.ssl=yes;socket.ssl_ca=/etc/mysql/certs/ca.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_key=/etc/mysql/certs/server-key.pem\"\n</code></pre> <p>Note</p> <p>You must use the same key and certificate files on all nodes, preferably those used for Encrypting Client-Server Communication.</p> <p>Check the Upgrading Certificates section on how to upgrade existing certificates.</p>"},{"location":"security/encrypt-traffic.html#generating-keys-and-certificates-manually","title":"Generating Keys and Certificates Manually","text":"<p>As mentioned above, MySQL generates default key and certificate files and places them in data directory. If user wants to override these certificates, the following new sets of files can be generated:</p> <ul> <li> <p>Certificate Authority (CA) key and certificate to sign the server and client certificates.</p> </li> <li> <p>Server key and certificate to secure database server activity and write-set replication traffic.</p> </li> <li> <p>Client key and certificate to secure client communication traffic.</p> </li> </ul> <p>These files should be generated using OpenSSL.</p> <p>Note</p> <p>The <code>Common Name</code> value used for the server and client keys and certificates must differ from that value used for the CA certificate.</p>"},{"location":"security/encrypt-traffic.html#generating-ca-key-and-certificate","title":"Generating CA Key and Certificate","text":"<p>The Certificate Authority is used to verify the signature on certificates.</p> <ol> <li> <p>Generate the CA key file:</p> <pre><code>$ openssl genrsa 2048 &gt; ca-key.pem\n</code></pre> </li> <li> <p>Generate the CA certificate file:</p> <pre><code>$ openssl req -new -x509 -nodes -days 3600\n    -key ca-key.pem -out ca.pem\n</code></pre> </li> </ol>"},{"location":"security/encrypt-traffic.html#generating-server-key-and-certificate","title":"Generating Server Key and Certificate","text":"<ol> <li> <p>Generate the server key file:</p> <pre><code>$ openssl req -newkey rsa:2048 -days 3600 \\\n    -nodes -keyout server-key.pem -out server-req.pem\n</code></pre> </li> <li> <p>Remove the passphrase:</p> <pre><code>$ openssl rsa -in server-key.pem -out server-key.pem\n</code></pre> </li> <li> <p>Generate the server certificate file:</p> <pre><code>$ openssl x509 -req -in server-req.pem -days 3600 \\\n    -CA ca.pem -CAkey ca-key.pem -set_serial 01 \\\n    -out server-cert.pem\n</code></pre> </li> </ol>"},{"location":"security/encrypt-traffic.html#generating-client-key-and-certificate","title":"Generating Client Key and Certificate","text":"<ol> <li> <p>Generate the client key file:</p> <pre><code>$ openssl req -newkey rsa:2048 -days 3600 \\\n    -nodes -keyout client-key.pem -out client-req.pem\n</code></pre> </li> <li> <p>Remove the passphrase:</p> <pre><code>$ openssl rsa -in client-key.pem -out client-key.pem\n</code></pre> </li> <li> <p>Generate the client certificate file:</p> <pre><code>$ openssl x509 -req -in client-req.pem -days 3600 \\\n   -CA ca.pem -CAkey ca-key.pem -set_serial 01 \\\n   -out client-cert.pem\n</code></pre> </li> </ol>"},{"location":"security/encrypt-traffic.html#verifying-certificates","title":"Verifying Certificates","text":"<p>To verify that the server and client certificates are correctly signed by the CA certificate, run the following command:</p> <pre><code>$ openssl verify -CAfile ca.pem server-cert.pem client-cert.pem\n</code></pre> <p>If the verification is successful, you should see the following output:</p> <pre><code>server-cert.pem: OK\nclient-cert.pem: OK\n</code></pre>"},{"location":"security/encrypt-traffic.html#failed-validation-caused-by-matching-cn","title":"Failed validation caused by matching CN","text":"<p>Sometimes, an SSL configuration may fail if the certificate and the CA files contain the same .</p> <p>To check if this is the case run <code>openssl</code> command as follows and verify that the CN field differs for the Subject and Issuer lines.</p> <pre><code>$ openssl x509 -in server-cert.pem -text -noout\n</code></pre> <p>To obtain a more compact output run <code>openssl</code> specifying -subject and -issuer parameters:</p> <pre><code>$ openssl x509 -in server-cert.pem -subject -issuer -noout\n</code></pre>"},{"location":"security/encrypt-traffic.html#deploying-keys-and-certificates","title":"Deploying Keys and Certificates","text":"<p>Use a secure method (for example, <code>scp</code> or <code>sftp</code>) to send the key and certificate files to each node. Place them under the <code>/etc/mysql/certs/</code> directory or similar location where you can find them later.</p> <p>Note</p> <p>Make sure that this directory is protected with proper permissions. Most likely, you only want to give read permissions to the user running <code>mysqld</code>.</p> <p>The following files are required:</p> <ul> <li>Certificate Authority certificate file (<code>ca.pem</code>)</li> </ul> <p>This file is used to verify signatures.</p> <ul> <li>Server key and certificate files (<code>server-key.pem</code> and <code>server-cert.pem</code>)</li> </ul> <p>These files are used to secure database server activity   and write-set replication traffic.</p> <ul> <li>Client key and certificate files (<code>client-key.pem</code> and <code>client-cert.pem</code>)</li> </ul> <p>These files are required only if the node should act as a MySQL client.   For example, if you are planning to perform SST using <code>mysqldump</code>.</p> <p>Note</p> <p>Upgrading Certificates subsection covers the details on upgrading certificates, if necessary.</p>"},{"location":"security/encrypt-traffic.html#upgrading-certificates","title":"Upgrading Certificates","text":"<p>The following procedure shows how to upgrade certificates used for securing replication traffic when there are two nodes in the cluster.</p> <ol> <li> <p>Restart the first node with the <code>socket.ssl_ca</code> option set to a combination of the the old and new certificates in a single file.</p> <p>For example, you can merge contents of <code>old-ca.pem</code> and <code>new-ca.pem</code> into <code>upgrade-ca.pem</code> as follows:</p> <pre><code>cat old-ca.pem &gt; upgrade-ca.pem &amp;&amp; \\\ncat new-ca.pem &gt;&gt; upgrade-ca.pem\n</code></pre> <p>Set the <code>wsrep_provider_options</code> variable as follows:</p> <pre><code>wsrep_provider_options=\"socket.ssl=yes;socket.ssl_ca=/etc/mysql/certs/upgrade-ca.pem;socket.ssl_cert=/etc/mysql/certs/old-cert.pem;socket.ssl_key=/etc/mysql/certs/old-key.pem\"\n</code></pre> </li> <li> <p>Restart the second node with the <code>socket.ssl_ca</code>, <code>socket.ssl_cert</code>, and <code>socket.ssl_key</code> options set to the corresponding new certificate files.</p> <pre><code>wsrep_provider_options=\"socket.ssl=yes;socket.ssl_ca=/etc/mysql/certs/new-ca.pem;socket.ssl_cert=/etc/mysql/certs/new-cert.pem;socket.ssl_key=/etc/mysql/certs/new-key.pem\"\n</code></pre> </li> <li> <p>Restart the first node with the new certificate files, as in the previous step.</p> </li> <li> <p>You can remove the old certificate files.</p> </li> </ol>"},{"location":"security/secure-network.html","title":"Securing the Network","text":"<p>By default, anyone with access to your network can connect to any Percona XtraDB Cluster node either as a client or as another node joining the cluster. This could potentially let them query your data or get a complete copy of it.</p> <p>In general, it is a good idea to disable all remote connections to Percona XtraDB Cluster nodes. If you require clients or nodes from outside of your network to connect, you can set up a VPN (virtual private network) for this purpose.</p>"},{"location":"security/secure-network.html#firewall-configuration","title":"Firewall Configuration","text":"<p>A firewall can let you filter Percona XtraDB Cluster traffic based on the clients and nodes that you trust.</p> <p>By default, Percona XtraDB Cluster nodes use the following ports:</p> <ul> <li> <p>3306 is used for MySQL client connections and SST (State Snapshot Transfer) via <code>mysqldump</code>.</p> </li> <li> <p>4444 is used for SST via <code>rsync</code> and Percona XtraBackup.</p> </li> <li> <p>4567 is used for write-set replication traffic (over TCP) and multicast replication (over TCP and UDP).</p> </li> <li> <p>4568 is used for IST (Incremental State Transfer).</p> </li> </ul> <p>Ideally you want to make sure that these ports on each node are accessed only from trusted IP addresses. You can implement packet filtering using <code>iptables</code>, <code>firewalld</code>, <code>pf</code>, or any other firewall of your choice.</p>"},{"location":"security/secure-network.html#using-iptables","title":"Using iptables","text":"<p>To restrict access to Percona XtraDB Cluster ports using <code>iptables</code>, you need to append new rules to the <code>INPUT</code> chain on the filter table. In the following example, the trusted range of IP addresses is 192.168.0.1/24. It is assumed that only Percona XtraDB Cluster nodes and clients will connect from these IPs. To enable packet filtering, run the commands as root on each Percona XtraDB Cluster node.</p> <pre><code># iptables --append INPUT --in-interface eth0 \\\n   --protocol tcp --match tcp --dport 3306 \\\n   --source 192.168.0.1/24 --jump ACCEPT\n# iptables --append INPUT --in-interface eth0 \\\n   --protocol tcp --match tcp --dport 4444 \\\n   --source 192.168.0.1/24 --jump ACCEPT\n# iptables --append INPUT --in-interface eth0 \\\n   --protocol tcp --match tcp --dport 4567 \\\n   --source 192.168.0.1/24 --jump ACCEPT\n# iptables --append INPUT --in-interface eth0 \\\n   --protocol tcp --match tcp --dport 4568 \\\n   --source 192.168.0.1/24 --jump ACCEPT\n# iptables --append INPUT --in-interface eth0 \\\n   --protocol udp --match udp --dport 4567 \\\n   --source 192.168.0.1/24 --jump ACCEPT\n</code></pre> <p>Note</p> <p>The last one opens port 4567 for multicast replication over UDP.</p> <p>If the trusted IPs are not in sequence, you will need to run these commands for each address on each node. In this case, you can consider to open all ports between trusted hosts. This is a little bit less secure, but reduces the amount of commands. For example, if you have three Percona XtraDB Cluster nodes, you can run the following commands on each one:</p> <pre><code># iptables --append INPUT --protocol tcp \\\n    --source 64.57.102.34 --jump ACCEPT\n# iptables --append INPUT --protocol tcp \\\n    --source 193.166.3.20  --jump ACCEPT\n# iptables --append INPUT --protocol tcp \\\n    --source 193.125.4.10  --jump ACCEPT\n</code></pre> <p>Running the previous commands will allow TCP connections from the IP addresses of the other Percona XtraDB Cluster nodes.</p> <p>Note</p> <p>The changes that you make in <code>iptables</code> are not persistent unless you save the packet filtering state:</p> <pre><code># service save iptables\n</code></pre> <p>For distributions that use <code>systemd</code>, you need to save the current packet filtering rules to the path where <code>iptables</code> reads from when it starts. This path can vary by distribution, but it is usually in the <code>/etc</code> directory. For example:</p> <ul> <li> <p><code>/etc/sysconfig/iptables</code></p> </li> <li> <p><code>/etc/iptables/iptables.rules</code></p> </li> </ul> <p>Use <code>iptables-save</code> to update the file:</p> <pre><code># iptables-save &gt; /etc/sysconfig/iptables\n</code></pre>"}]}